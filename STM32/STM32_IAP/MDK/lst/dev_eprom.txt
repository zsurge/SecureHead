; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\dev_eprom.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\dev_eprom.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\user -I..\dev -I..\lib\inc -I..\core_cm3 -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\dev_eprom.crf ..\dev\dev_eprom.c]
                          THUMB

                          AREA ||i.CheckEarseFlash||, CODE, READONLY, ALIGN=1

                  CheckEarseFlash PROC
;;;111    *******************************************************************************/
;;;112    int CheckEarseFlash(u8 *Buf)
000000  4602              MOV      r2,r0
;;;113    {
;;;114    	int i;
;;;115    	for (i = 0; i < 4; i++) {
000002  2100              MOVS     r1,#0
000004  e004              B        |L1.16|
                  |L1.6|
;;;116    		if (Buf[i] != 0xff)
000006  5c50              LDRB     r0,[r2,r1]
000008  28ff              CMP      r0,#0xff
00000a  d000              BEQ      |L1.14|
;;;117    			break;
00000c  e002              B        |L1.20|
                  |L1.14|
00000e  1c49              ADDS     r1,r1,#1              ;115
                  |L1.16|
000010  2904              CMP      r1,#4                 ;115
000012  dbf8              BLT      |L1.6|
                  |L1.20|
000014  bf00              NOP      
;;;118    	}
;;;119    	if (i == 4) {
000016  2904              CMP      r1,#4
000018  d101              BNE      |L1.30|
;;;120    		return -1;
00001a  1f48              SUBS     r0,r1,#5
                  |L1.28|
;;;121    	} else {
;;;122    		return 0;
;;;123    	}
;;;124    }
00001c  4770              BX       lr
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;122
000020  e7fc              B        |L1.28|
;;;125    
                          ENDP


                          AREA ||i.EarseBlockFlash||, CODE, READONLY, ALIGN=1

                  EarseBlockFlash PROC
;;;38     *******************************************************************************/
;;;39     int EarseBlockFlash(uint32_t ADDR )
000000  b538              PUSH     {r3-r5,lr}
;;;40     {
000002  4604              MOV      r4,r0
;;;41     	volatile FLASH_Status FLASHStatus = FLASH_COMPLETE;
000004  2004              MOVS     r0,#4
000006  9000              STR      r0,[sp,#0]
;;;42     		
;;;43     	/* Unlock the Flash Bank1 Program Erase controller */
;;;44       	FLASH_Unlock();
000008  f7fffffe          BL       FLASH_Unlock
;;;45       	  	
;;;46     	if ((ADDR % 0x0400) != 0) {
00000c  05a0              LSLS     r0,r4,#22
00000e  0d80              LSRS     r0,r0,#22
000010  d003              BEQ      |L2.26|
;;;47     		FLASH_Lock();
000012  f7fffffe          BL       FLASH_Lock
;;;48     		return 0;
000016  2000              MOVS     r0,#0
                  |L2.24|
;;;49     	}
;;;50       	FLASHStatus = FLASH_ErasePage(ADDR);
;;;51     
;;;52       	if (FLASHStatus == FLASH_COMPLETE) {
;;;53     		FLASH_Lock();
;;;54     		return 1;
;;;55     	} else {
;;;56     		FLASH_Lock();
;;;57     		return 0;
;;;58     	}
;;;59     }	
000018  bd38              POP      {r3-r5,pc}
                  |L2.26|
00001a  4620              MOV      r0,r4                 ;50
00001c  f7fffffe          BL       FLASH_ErasePage
000020  9000              STR      r0,[sp,#0]            ;50
000022  f89d0000          LDRB     r0,[sp,#0]            ;52
000026  2804              CMP      r0,#4                 ;52
000028  d103              BNE      |L2.50|
00002a  f7fffffe          BL       FLASH_Lock
00002e  2001              MOVS     r0,#1                 ;54
000030  e7f2              B        |L2.24|
                  |L2.50|
000032  f7fffffe          BL       FLASH_Lock
000036  2000              MOVS     r0,#0                 ;57
000038  e7ee              B        |L2.24|
;;;60     
                          ENDP


                          AREA ||i.ReadBlockFlash||, CODE, READONLY, ALIGN=1

                  ReadBlockFlash PROC
;;;13     *******************************************************************************/
;;;14     void ReadBlockFlash(uint32_t ADDR ,u8 *Sourcebuf ,u16 len)
000000  b510              PUSH     {r4,lr}
;;;15     {
000002  460b              MOV      r3,r1
;;;16     	u16 i;
;;;17     
;;;18     	/* Unlock the Flash Bank1 Program Erase controller */
;;;19       	//FLASH_Unlock();
;;;20     
;;;21     	for(i =0;i<len;i++)
000004  2100              MOVS     r1,#0
000006  e004              B        |L3.18|
                  |L3.8|
;;;22     	{
;;;23       		Sourcebuf[i] = *((u8 *)ADDR);
000008  7804              LDRB     r4,[r0,#0]
00000a  545c              STRB     r4,[r3,r1]
;;;24       		ADDR++;
00000c  1c40              ADDS     r0,r0,#1
00000e  1c4c              ADDS     r4,r1,#1              ;21
000010  b2a1              UXTH     r1,r4                 ;21
                  |L3.18|
000012  4291              CMP      r1,r2                 ;21
000014  dbf8              BLT      |L3.8|
;;;25       	}
;;;26     	/* Lock the Flash Bank1 Program Erase controller */
;;;27       	//FLASH_Lock();
;;;28     }
000016  bd10              POP      {r4,pc}
;;;29     
                          ENDP


                          AREA ||i.WriteBlockFlash||, CODE, READONLY, ALIGN=1

                  WriteBlockFlash PROC
;;;69     *******************************************************************************/
;;;70     int WriteBlockFlash(uint32_t ADDR, u8 *Sourcebuf, u16 len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;71     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;72     	u16 i;
;;;73     	u8 d,j;
;;;74     	u32 *form;
;;;75     		
;;;76     	/* Unlock the Flash Bank1 Program Erase controller */
;;;77       	FLASH_Unlock();
00000a  f7fffffe          BL       FLASH_Unlock
;;;78     
;;;79     	if (len % 4 != 0) {
00000e  17e1              ASRS     r1,r4,#31
000010  eb047191          ADD      r1,r4,r1,LSR #30
000014  1089              ASRS     r1,r1,#2
000016  ebb40181          SUBS     r1,r4,r1,LSL #2
00001a  d004              BEQ      |L4.38|
;;;80     		FLASH_Lock();
00001c  f7fffffe          BL       FLASH_Lock
;;;81     		return 0;
000020  2000              MOVS     r0,#0
                  |L4.34|
;;;82     	}
;;;83     	
;;;84     	form = (u32 *)Sourcebuf;
;;;85       	for (i = 0; i < len; i += 4) {
;;;86     		/*写4字节*/
;;;87     		FLASH_ProgramWord(ADDR, *form);
;;;88     		for (j = 0; j < 4; j++) {
;;;89     			d = *((u8 *)ADDR);
;;;90     			/*  校验对错 */
;;;91     			if (d != Sourcebuf[i+j]) {
;;;92     				FLASH_Lock();
;;;93     				return 0;
;;;94     			}
;;;95     			ADDR++;
;;;96     		}
;;;97     		form++;
;;;98     	}
;;;99     	FLASH_Lock();
;;;100    	return	1;
;;;101    }
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L4.38|
000026  46b9              MOV      r9,r7                 ;84
000028  2500              MOVS     r5,#0                 ;85
00002a  e01e              B        |L4.106|
                  |L4.44|
00002c  4630              MOV      r0,r6                 ;87
00002e  f8d91000          LDR      r1,[r9,#0]            ;87
000032  f7fffffe          BL       FLASH_ProgramWord
000036  f04f0800          MOV      r8,#0                 ;88
00003a  e00f              B        |L4.92|
                  |L4.60|
00003c  f896a000          LDRB     r10,[r6,#0]           ;89
000040  eb050008          ADD      r0,r5,r8              ;91
000044  5c38              LDRB     r0,[r7,r0]            ;91
000046  4550              CMP      r0,r10                ;91
000048  d003              BEQ      |L4.82|
00004a  f7fffffe          BL       FLASH_Lock
00004e  2000              MOVS     r0,#0                 ;93
000050  e7e7              B        |L4.34|
                  |L4.82|
000052  1c76              ADDS     r6,r6,#1              ;95
000054  f1080001          ADD      r0,r8,#1              ;88
000058  f00008ff          AND      r8,r0,#0xff           ;88
                  |L4.92|
00005c  f1b80f04          CMP      r8,#4                 ;88
000060  dbec              BLT      |L4.60|
000062  f1090904          ADD      r9,r9,#4              ;97
000066  1d28              ADDS     r0,r5,#4              ;85
000068  b285              UXTH     r5,r0                 ;85
                  |L4.106|
00006a  42a5              CMP      r5,r4                 ;85
00006c  dbde              BLT      |L4.44|
00006e  f7fffffe          BL       FLASH_Lock
000072  2001              MOVS     r0,#1                 ;100
000074  e7d5              B        |L4.34|
;;;102    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\dev\\dev_eprom.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_dev_eprom_c_0e6be3a6____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_dev_eprom_c_0e6be3a6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_dev_eprom_c_0e6be3a6____REVSH|
#line 144
|__asm___11_dev_eprom_c_0e6be3a6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
