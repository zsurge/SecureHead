L 1 "..\user\aes.c"
N#include <string.h>
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5030076
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;
N#elif !defined(__size_t)
S  #define __size_t 1
S  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 2 "..\user\aes.c" 2
N#include "aes.h"
L 1 "..\user\aes.h" 1
N#ifndef _AES_H
N#define _AES_H
N
N#include <stdint.h>
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
N
L 5 "..\user\aes.h" 2
N
N#define AES_MAXNR 14
N#define AES_BLOCK_SIZE 16
N
Nstruct aes_key_st {
N    uint32_t rd_key[4 *(AES_MAXNR + 1)];
X    uint32_t rd_key[4 *(14 + 1)];
N    int rounds;
N};
Ntypedef struct aes_key_st AES_KEY;
N
Nint AES_set_encrypt_key(const unsigned char *userKey, const int bits,AES_KEY *key);
Nint AES_set_decrypt_key(const unsigned char *userKey, const int bits,AES_KEY *key);
N
Nvoid AES_encrypt(const unsigned char *in, unsigned char *out,const AES_KEY *key);
Nvoid AES_decrypt(const unsigned char *in, unsigned char *out,const AES_KEY *key);
Nvoid AES_cbc_encrypt(const unsigned char *in, unsigned char *out,const unsigned long length, const AES_KEY *key,unsigned char *ivec, const int enc);
N
N#endif
L 3 "..\user\aes.c" 2
N
N#ifndef NDEBUG
N#define NDEBUG
N#endif
N
N
N/* This controls loop-unrolling in aes_core.c */
N#undef FULL_UNROLL
N#define GETU32(pt) (((uint32_t)(pt)[0] << 24) ^ ((uint32_t)(pt)[1] << 16) ^ ((uint32_t)(pt)[2] <<  8) ^ ((uint32_t)(pt)[3]))
N#define PUTU32(ct, st) { (ct)[0] = (uint8_t)((st) >> 24); (ct)[1] = (uint8_t)((st) >> 16); (ct)[2] = (uint8_t)((st) >>  8); (ct)[3] = (uint8_t)(st); }
N
N/*
NTe0[x] = S [x].[02, 01, 01, 03];
NTe1[x] = S [x].[03, 02, 01, 01];
NTe2[x] = S [x].[01, 03, 02, 01];
NTe3[x] = S [x].[01, 01, 03, 02];
NTe4[x] = S [x].[01, 01, 01, 01];
N
NTd0[x] = Si[x].[0e, 09, 0d, 0b];
NTd1[x] = Si[x].[0b, 0e, 09, 0d];
NTd2[x] = Si[x].[0d, 0b, 0e, 09];
NTd3[x] = Si[x].[09, 0d, 0b, 0e];
NTd4[x] = Si[x].[01, 01, 01, 01];
N*/
N
Nstatic const uint32_t Te0[256] = {
N    0xc66363a5U, 0xf87c7c84U, 0xee777799U, 0xf67b7b8dU,
N    0xfff2f20dU, 0xd66b6bbdU, 0xde6f6fb1U, 0x91c5c554U,
N    0x60303050U, 0x02010103U, 0xce6767a9U, 0x562b2b7dU,
N    0xe7fefe19U, 0xb5d7d762U, 0x4dababe6U, 0xec76769aU,
N    0x8fcaca45U, 0x1f82829dU, 0x89c9c940U, 0xfa7d7d87U,
N    0xeffafa15U, 0xb25959ebU, 0x8e4747c9U, 0xfbf0f00bU,
N    0x41adadecU, 0xb3d4d467U, 0x5fa2a2fdU, 0x45afafeaU,
N    0x239c9cbfU, 0x53a4a4f7U, 0xe4727296U, 0x9bc0c05bU,
N    0x75b7b7c2U, 0xe1fdfd1cU, 0x3d9393aeU, 0x4c26266aU,
N    0x6c36365aU, 0x7e3f3f41U, 0xf5f7f702U, 0x83cccc4fU,
N    0x6834345cU, 0x51a5a5f4U, 0xd1e5e534U, 0xf9f1f108U,
N    0xe2717193U, 0xabd8d873U, 0x62313153U, 0x2a15153fU,
N    0x0804040cU, 0x95c7c752U, 0x46232365U, 0x9dc3c35eU,
N    0x30181828U, 0x379696a1U, 0x0a05050fU, 0x2f9a9ab5U,
N    0x0e070709U, 0x24121236U, 0x1b80809bU, 0xdfe2e23dU,
N    0xcdebeb26U, 0x4e272769U, 0x7fb2b2cdU, 0xea75759fU,
N    0x1209091bU, 0x1d83839eU, 0x582c2c74U, 0x341a1a2eU,
N    0x361b1b2dU, 0xdc6e6eb2U, 0xb45a5aeeU, 0x5ba0a0fbU,
N    0xa45252f6U, 0x763b3b4dU, 0xb7d6d661U, 0x7db3b3ceU,
N    0x5229297bU, 0xdde3e33eU, 0x5e2f2f71U, 0x13848497U,
N    0xa65353f5U, 0xb9d1d168U, 0x00000000U, 0xc1eded2cU,
N    0x40202060U, 0xe3fcfc1fU, 0x79b1b1c8U, 0xb65b5bedU,
N    0xd46a6abeU, 0x8dcbcb46U, 0x67bebed9U, 0x7239394bU,
N    0x944a4adeU, 0x984c4cd4U, 0xb05858e8U, 0x85cfcf4aU,
N    0xbbd0d06bU, 0xc5efef2aU, 0x4faaaae5U, 0xedfbfb16U,
N    0x864343c5U, 0x9a4d4dd7U, 0x66333355U, 0x11858594U,
N    0x8a4545cfU, 0xe9f9f910U, 0x04020206U, 0xfe7f7f81U,
N    0xa05050f0U, 0x783c3c44U, 0x259f9fbaU, 0x4ba8a8e3U,
N    0xa25151f3U, 0x5da3a3feU, 0x804040c0U, 0x058f8f8aU,
N    0x3f9292adU, 0x219d9dbcU, 0x70383848U, 0xf1f5f504U,
N    0x63bcbcdfU, 0x77b6b6c1U, 0xafdada75U, 0x42212163U,
N    0x20101030U, 0xe5ffff1aU, 0xfdf3f30eU, 0xbfd2d26dU,
N    0x81cdcd4cU, 0x180c0c14U, 0x26131335U, 0xc3ecec2fU,
N    0xbe5f5fe1U, 0x359797a2U, 0x884444ccU, 0x2e171739U,
N    0x93c4c457U, 0x55a7a7f2U, 0xfc7e7e82U, 0x7a3d3d47U,
N    0xc86464acU, 0xba5d5de7U, 0x3219192bU, 0xe6737395U,
N    0xc06060a0U, 0x19818198U, 0x9e4f4fd1U, 0xa3dcdc7fU,
N    0x44222266U, 0x542a2a7eU, 0x3b9090abU, 0x0b888883U,
N    0x8c4646caU, 0xc7eeee29U, 0x6bb8b8d3U, 0x2814143cU,
N    0xa7dede79U, 0xbc5e5ee2U, 0x160b0b1dU, 0xaddbdb76U,
N    0xdbe0e03bU, 0x64323256U, 0x743a3a4eU, 0x140a0a1eU,
N    0x924949dbU, 0x0c06060aU, 0x4824246cU, 0xb85c5ce4U,
N    0x9fc2c25dU, 0xbdd3d36eU, 0x43acacefU, 0xc46262a6U,
N    0x399191a8U, 0x319595a4U, 0xd3e4e437U, 0xf279798bU,
N    0xd5e7e732U, 0x8bc8c843U, 0x6e373759U, 0xda6d6db7U,
N    0x018d8d8cU, 0xb1d5d564U, 0x9c4e4ed2U, 0x49a9a9e0U,
N    0xd86c6cb4U, 0xac5656faU, 0xf3f4f407U, 0xcfeaea25U,
N    0xca6565afU, 0xf47a7a8eU, 0x47aeaee9U, 0x10080818U,
N    0x6fbabad5U, 0xf0787888U, 0x4a25256fU, 0x5c2e2e72U,
N    0x381c1c24U, 0x57a6a6f1U, 0x73b4b4c7U, 0x97c6c651U,
N    0xcbe8e823U, 0xa1dddd7cU, 0xe874749cU, 0x3e1f1f21U,
N    0x964b4bddU, 0x61bdbddcU, 0x0d8b8b86U, 0x0f8a8a85U,
N    0xe0707090U, 0x7c3e3e42U, 0x71b5b5c4U, 0xcc6666aaU,
N    0x904848d8U, 0x06030305U, 0xf7f6f601U, 0x1c0e0e12U,
N    0xc26161a3U, 0x6a35355fU, 0xae5757f9U, 0x69b9b9d0U,
N    0x17868691U, 0x99c1c158U, 0x3a1d1d27U, 0x279e9eb9U,
N    0xd9e1e138U, 0xebf8f813U, 0x2b9898b3U, 0x22111133U,
N    0xd26969bbU, 0xa9d9d970U, 0x078e8e89U, 0x339494a7U,
N    0x2d9b9bb6U, 0x3c1e1e22U, 0x15878792U, 0xc9e9e920U,
N    0x87cece49U, 0xaa5555ffU, 0x50282878U, 0xa5dfdf7aU,
N    0x038c8c8fU, 0x59a1a1f8U, 0x09898980U, 0x1a0d0d17U,
N    0x65bfbfdaU, 0xd7e6e631U, 0x844242c6U, 0xd06868b8U,
N    0x824141c3U, 0x299999b0U, 0x5a2d2d77U, 0x1e0f0f11U,
N    0x7bb0b0cbU, 0xa85454fcU, 0x6dbbbbd6U, 0x2c16163aU,
N};
Nstatic const uint32_t Te1[256] = {
N    0xa5c66363U, 0x84f87c7cU, 0x99ee7777U, 0x8df67b7bU,
N    0x0dfff2f2U, 0xbdd66b6bU, 0xb1de6f6fU, 0x5491c5c5U,
N    0x50603030U, 0x03020101U, 0xa9ce6767U, 0x7d562b2bU,
N    0x19e7fefeU, 0x62b5d7d7U, 0xe64dababU, 0x9aec7676U,
N    0x458fcacaU, 0x9d1f8282U, 0x4089c9c9U, 0x87fa7d7dU,
N    0x15effafaU, 0xebb25959U, 0xc98e4747U, 0x0bfbf0f0U,
N    0xec41adadU, 0x67b3d4d4U, 0xfd5fa2a2U, 0xea45afafU,
N    0xbf239c9cU, 0xf753a4a4U, 0x96e47272U, 0x5b9bc0c0U,
N    0xc275b7b7U, 0x1ce1fdfdU, 0xae3d9393U, 0x6a4c2626U,
N    0x5a6c3636U, 0x417e3f3fU, 0x02f5f7f7U, 0x4f83ccccU,
N    0x5c683434U, 0xf451a5a5U, 0x34d1e5e5U, 0x08f9f1f1U,
N    0x93e27171U, 0x73abd8d8U, 0x53623131U, 0x3f2a1515U,
N    0x0c080404U, 0x5295c7c7U, 0x65462323U, 0x5e9dc3c3U,
N    0x28301818U, 0xa1379696U, 0x0f0a0505U, 0xb52f9a9aU,
N    0x090e0707U, 0x36241212U, 0x9b1b8080U, 0x3ddfe2e2U,
N    0x26cdebebU, 0x694e2727U, 0xcd7fb2b2U, 0x9fea7575U,
N    0x1b120909U, 0x9e1d8383U, 0x74582c2cU, 0x2e341a1aU,
N    0x2d361b1bU, 0xb2dc6e6eU, 0xeeb45a5aU, 0xfb5ba0a0U,
N    0xf6a45252U, 0x4d763b3bU, 0x61b7d6d6U, 0xce7db3b3U,
N    0x7b522929U, 0x3edde3e3U, 0x715e2f2fU, 0x97138484U,
N    0xf5a65353U, 0x68b9d1d1U, 0x00000000U, 0x2cc1ededU,
N    0x60402020U, 0x1fe3fcfcU, 0xc879b1b1U, 0xedb65b5bU,
N    0xbed46a6aU, 0x468dcbcbU, 0xd967bebeU, 0x4b723939U,
N    0xde944a4aU, 0xd4984c4cU, 0xe8b05858U, 0x4a85cfcfU,
N    0x6bbbd0d0U, 0x2ac5efefU, 0xe54faaaaU, 0x16edfbfbU,
N    0xc5864343U, 0xd79a4d4dU, 0x55663333U, 0x94118585U,
N    0xcf8a4545U, 0x10e9f9f9U, 0x06040202U, 0x81fe7f7fU,
N    0xf0a05050U, 0x44783c3cU, 0xba259f9fU, 0xe34ba8a8U,
N    0xf3a25151U, 0xfe5da3a3U, 0xc0804040U, 0x8a058f8fU,
N    0xad3f9292U, 0xbc219d9dU, 0x48703838U, 0x04f1f5f5U,
N    0xdf63bcbcU, 0xc177b6b6U, 0x75afdadaU, 0x63422121U,
N    0x30201010U, 0x1ae5ffffU, 0x0efdf3f3U, 0x6dbfd2d2U,
N    0x4c81cdcdU, 0x14180c0cU, 0x35261313U, 0x2fc3ececU,
N    0xe1be5f5fU, 0xa2359797U, 0xcc884444U, 0x392e1717U,
N    0x5793c4c4U, 0xf255a7a7U, 0x82fc7e7eU, 0x477a3d3dU,
N    0xacc86464U, 0xe7ba5d5dU, 0x2b321919U, 0x95e67373U,
N    0xa0c06060U, 0x98198181U, 0xd19e4f4fU, 0x7fa3dcdcU,
N    0x66442222U, 0x7e542a2aU, 0xab3b9090U, 0x830b8888U,
N    0xca8c4646U, 0x29c7eeeeU, 0xd36bb8b8U, 0x3c281414U,
N    0x79a7dedeU, 0xe2bc5e5eU, 0x1d160b0bU, 0x76addbdbU,
N    0x3bdbe0e0U, 0x56643232U, 0x4e743a3aU, 0x1e140a0aU,
N    0xdb924949U, 0x0a0c0606U, 0x6c482424U, 0xe4b85c5cU,
N    0x5d9fc2c2U, 0x6ebdd3d3U, 0xef43acacU, 0xa6c46262U,
N    0xa8399191U, 0xa4319595U, 0x37d3e4e4U, 0x8bf27979U,
N    0x32d5e7e7U, 0x438bc8c8U, 0x596e3737U, 0xb7da6d6dU,
N    0x8c018d8dU, 0x64b1d5d5U, 0xd29c4e4eU, 0xe049a9a9U,
N    0xb4d86c6cU, 0xfaac5656U, 0x07f3f4f4U, 0x25cfeaeaU,
N    0xafca6565U, 0x8ef47a7aU, 0xe947aeaeU, 0x18100808U,
N    0xd56fbabaU, 0x88f07878U, 0x6f4a2525U, 0x725c2e2eU,
N    0x24381c1cU, 0xf157a6a6U, 0xc773b4b4U, 0x5197c6c6U,
N    0x23cbe8e8U, 0x7ca1ddddU, 0x9ce87474U, 0x213e1f1fU,
N    0xdd964b4bU, 0xdc61bdbdU, 0x860d8b8bU, 0x850f8a8aU,
N    0x90e07070U, 0x427c3e3eU, 0xc471b5b5U, 0xaacc6666U,
N    0xd8904848U, 0x05060303U, 0x01f7f6f6U, 0x121c0e0eU,
N    0xa3c26161U, 0x5f6a3535U, 0xf9ae5757U, 0xd069b9b9U,
N    0x91178686U, 0x5899c1c1U, 0x273a1d1dU, 0xb9279e9eU,
N    0x38d9e1e1U, 0x13ebf8f8U, 0xb32b9898U, 0x33221111U,
N    0xbbd26969U, 0x70a9d9d9U, 0x89078e8eU, 0xa7339494U,
N    0xb62d9b9bU, 0x223c1e1eU, 0x92158787U, 0x20c9e9e9U,
N    0x4987ceceU, 0xffaa5555U, 0x78502828U, 0x7aa5dfdfU,
N    0x8f038c8cU, 0xf859a1a1U, 0x80098989U, 0x171a0d0dU,
N    0xda65bfbfU, 0x31d7e6e6U, 0xc6844242U, 0xb8d06868U,
N    0xc3824141U, 0xb0299999U, 0x775a2d2dU, 0x111e0f0fU,
N    0xcb7bb0b0U, 0xfca85454U, 0xd66dbbbbU, 0x3a2c1616U,
N};
Nstatic const uint32_t Te2[256] = {
N    0x63a5c663U, 0x7c84f87cU, 0x7799ee77U, 0x7b8df67bU,
N    0xf20dfff2U, 0x6bbdd66bU, 0x6fb1de6fU, 0xc55491c5U,
N    0x30506030U, 0x01030201U, 0x67a9ce67U, 0x2b7d562bU,
N    0xfe19e7feU, 0xd762b5d7U, 0xabe64dabU, 0x769aec76U,
N    0xca458fcaU, 0x829d1f82U, 0xc94089c9U, 0x7d87fa7dU,
N    0xfa15effaU, 0x59ebb259U, 0x47c98e47U, 0xf00bfbf0U,
N    0xadec41adU, 0xd467b3d4U, 0xa2fd5fa2U, 0xafea45afU,
N    0x9cbf239cU, 0xa4f753a4U, 0x7296e472U, 0xc05b9bc0U,
N    0xb7c275b7U, 0xfd1ce1fdU, 0x93ae3d93U, 0x266a4c26U,
N    0x365a6c36U, 0x3f417e3fU, 0xf702f5f7U, 0xcc4f83ccU,
N    0x345c6834U, 0xa5f451a5U, 0xe534d1e5U, 0xf108f9f1U,
N    0x7193e271U, 0xd873abd8U, 0x31536231U, 0x153f2a15U,
N    0x040c0804U, 0xc75295c7U, 0x23654623U, 0xc35e9dc3U,
N    0x18283018U, 0x96a13796U, 0x050f0a05U, 0x9ab52f9aU,
N    0x07090e07U, 0x12362412U, 0x809b1b80U, 0xe23ddfe2U,
N    0xeb26cdebU, 0x27694e27U, 0xb2cd7fb2U, 0x759fea75U,
N    0x091b1209U, 0x839e1d83U, 0x2c74582cU, 0x1a2e341aU,
N    0x1b2d361bU, 0x6eb2dc6eU, 0x5aeeb45aU, 0xa0fb5ba0U,
N    0x52f6a452U, 0x3b4d763bU, 0xd661b7d6U, 0xb3ce7db3U,
N    0x297b5229U, 0xe33edde3U, 0x2f715e2fU, 0x84971384U,
N    0x53f5a653U, 0xd168b9d1U, 0x00000000U, 0xed2cc1edU,
N    0x20604020U, 0xfc1fe3fcU, 0xb1c879b1U, 0x5bedb65bU,
N    0x6abed46aU, 0xcb468dcbU, 0xbed967beU, 0x394b7239U,
N    0x4ade944aU, 0x4cd4984cU, 0x58e8b058U, 0xcf4a85cfU,
N    0xd06bbbd0U, 0xef2ac5efU, 0xaae54faaU, 0xfb16edfbU,
N    0x43c58643U, 0x4dd79a4dU, 0x33556633U, 0x85941185U,
N    0x45cf8a45U, 0xf910e9f9U, 0x02060402U, 0x7f81fe7fU,
N    0x50f0a050U, 0x3c44783cU, 0x9fba259fU, 0xa8e34ba8U,
N    0x51f3a251U, 0xa3fe5da3U, 0x40c08040U, 0x8f8a058fU,
N    0x92ad3f92U, 0x9dbc219dU, 0x38487038U, 0xf504f1f5U,
N    0xbcdf63bcU, 0xb6c177b6U, 0xda75afdaU, 0x21634221U,
N    0x10302010U, 0xff1ae5ffU, 0xf30efdf3U, 0xd26dbfd2U,
N    0xcd4c81cdU, 0x0c14180cU, 0x13352613U, 0xec2fc3ecU,
N    0x5fe1be5fU, 0x97a23597U, 0x44cc8844U, 0x17392e17U,
N    0xc45793c4U, 0xa7f255a7U, 0x7e82fc7eU, 0x3d477a3dU,
N    0x64acc864U, 0x5de7ba5dU, 0x192b3219U, 0x7395e673U,
N    0x60a0c060U, 0x81981981U, 0x4fd19e4fU, 0xdc7fa3dcU,
N    0x22664422U, 0x2a7e542aU, 0x90ab3b90U, 0x88830b88U,
N    0x46ca8c46U, 0xee29c7eeU, 0xb8d36bb8U, 0x143c2814U,
N    0xde79a7deU, 0x5ee2bc5eU, 0x0b1d160bU, 0xdb76addbU,
N    0xe03bdbe0U, 0x32566432U, 0x3a4e743aU, 0x0a1e140aU,
N    0x49db9249U, 0x060a0c06U, 0x246c4824U, 0x5ce4b85cU,
N    0xc25d9fc2U, 0xd36ebdd3U, 0xacef43acU, 0x62a6c462U,
N    0x91a83991U, 0x95a43195U, 0xe437d3e4U, 0x798bf279U,
N    0xe732d5e7U, 0xc8438bc8U, 0x37596e37U, 0x6db7da6dU,
N    0x8d8c018dU, 0xd564b1d5U, 0x4ed29c4eU, 0xa9e049a9U,
N    0x6cb4d86cU, 0x56faac56U, 0xf407f3f4U, 0xea25cfeaU,
N    0x65afca65U, 0x7a8ef47aU, 0xaee947aeU, 0x08181008U,
N    0xbad56fbaU, 0x7888f078U, 0x256f4a25U, 0x2e725c2eU,
N    0x1c24381cU, 0xa6f157a6U, 0xb4c773b4U, 0xc65197c6U,
N    0xe823cbe8U, 0xdd7ca1ddU, 0x749ce874U, 0x1f213e1fU,
N    0x4bdd964bU, 0xbddc61bdU, 0x8b860d8bU, 0x8a850f8aU,
N    0x7090e070U, 0x3e427c3eU, 0xb5c471b5U, 0x66aacc66U,
N    0x48d89048U, 0x03050603U, 0xf601f7f6U, 0x0e121c0eU,
N    0x61a3c261U, 0x355f6a35U, 0x57f9ae57U, 0xb9d069b9U,
N    0x86911786U, 0xc15899c1U, 0x1d273a1dU, 0x9eb9279eU,
N    0xe138d9e1U, 0xf813ebf8U, 0x98b32b98U, 0x11332211U,
N    0x69bbd269U, 0xd970a9d9U, 0x8e89078eU, 0x94a73394U,
N    0x9bb62d9bU, 0x1e223c1eU, 0x87921587U, 0xe920c9e9U,
N    0xce4987ceU, 0x55ffaa55U, 0x28785028U, 0xdf7aa5dfU,
N    0x8c8f038cU, 0xa1f859a1U, 0x89800989U, 0x0d171a0dU,
N    0xbfda65bfU, 0xe631d7e6U, 0x42c68442U, 0x68b8d068U,
N    0x41c38241U, 0x99b02999U, 0x2d775a2dU, 0x0f111e0fU,
N    0xb0cb7bb0U, 0x54fca854U, 0xbbd66dbbU, 0x163a2c16U,
N};
Nstatic const uint32_t Te3[256] = {
N
N    0x6363a5c6U, 0x7c7c84f8U, 0x777799eeU, 0x7b7b8df6U,
N    0xf2f20dffU, 0x6b6bbdd6U, 0x6f6fb1deU, 0xc5c55491U,
N    0x30305060U, 0x01010302U, 0x6767a9ceU, 0x2b2b7d56U,
N    0xfefe19e7U, 0xd7d762b5U, 0xababe64dU, 0x76769aecU,
N    0xcaca458fU, 0x82829d1fU, 0xc9c94089U, 0x7d7d87faU,
N    0xfafa15efU, 0x5959ebb2U, 0x4747c98eU, 0xf0f00bfbU,
N    0xadadec41U, 0xd4d467b3U, 0xa2a2fd5fU, 0xafafea45U,
N    0x9c9cbf23U, 0xa4a4f753U, 0x727296e4U, 0xc0c05b9bU,
N    0xb7b7c275U, 0xfdfd1ce1U, 0x9393ae3dU, 0x26266a4cU,
N    0x36365a6cU, 0x3f3f417eU, 0xf7f702f5U, 0xcccc4f83U,
N    0x34345c68U, 0xa5a5f451U, 0xe5e534d1U, 0xf1f108f9U,
N    0x717193e2U, 0xd8d873abU, 0x31315362U, 0x15153f2aU,
N    0x04040c08U, 0xc7c75295U, 0x23236546U, 0xc3c35e9dU,
N    0x18182830U, 0x9696a137U, 0x05050f0aU, 0x9a9ab52fU,
N    0x0707090eU, 0x12123624U, 0x80809b1bU, 0xe2e23ddfU,
N    0xebeb26cdU, 0x2727694eU, 0xb2b2cd7fU, 0x75759feaU,
N    0x09091b12U, 0x83839e1dU, 0x2c2c7458U, 0x1a1a2e34U,
N    0x1b1b2d36U, 0x6e6eb2dcU, 0x5a5aeeb4U, 0xa0a0fb5bU,
N    0x5252f6a4U, 0x3b3b4d76U, 0xd6d661b7U, 0xb3b3ce7dU,
N    0x29297b52U, 0xe3e33eddU, 0x2f2f715eU, 0x84849713U,
N    0x5353f5a6U, 0xd1d168b9U, 0x00000000U, 0xeded2cc1U,
N    0x20206040U, 0xfcfc1fe3U, 0xb1b1c879U, 0x5b5bedb6U,
N    0x6a6abed4U, 0xcbcb468dU, 0xbebed967U, 0x39394b72U,
N    0x4a4ade94U, 0x4c4cd498U, 0x5858e8b0U, 0xcfcf4a85U,
N    0xd0d06bbbU, 0xefef2ac5U, 0xaaaae54fU, 0xfbfb16edU,
N    0x4343c586U, 0x4d4dd79aU, 0x33335566U, 0x85859411U,
N    0x4545cf8aU, 0xf9f910e9U, 0x02020604U, 0x7f7f81feU,
N    0x5050f0a0U, 0x3c3c4478U, 0x9f9fba25U, 0xa8a8e34bU,
N    0x5151f3a2U, 0xa3a3fe5dU, 0x4040c080U, 0x8f8f8a05U,
N    0x9292ad3fU, 0x9d9dbc21U, 0x38384870U, 0xf5f504f1U,
N    0xbcbcdf63U, 0xb6b6c177U, 0xdada75afU, 0x21216342U,
N    0x10103020U, 0xffff1ae5U, 0xf3f30efdU, 0xd2d26dbfU,
N    0xcdcd4c81U, 0x0c0c1418U, 0x13133526U, 0xecec2fc3U,
N    0x5f5fe1beU, 0x9797a235U, 0x4444cc88U, 0x1717392eU,
N    0xc4c45793U, 0xa7a7f255U, 0x7e7e82fcU, 0x3d3d477aU,
N    0x6464acc8U, 0x5d5de7baU, 0x19192b32U, 0x737395e6U,
N    0x6060a0c0U, 0x81819819U, 0x4f4fd19eU, 0xdcdc7fa3U,
N    0x22226644U, 0x2a2a7e54U, 0x9090ab3bU, 0x8888830bU,
N    0x4646ca8cU, 0xeeee29c7U, 0xb8b8d36bU, 0x14143c28U,
N    0xdede79a7U, 0x5e5ee2bcU, 0x0b0b1d16U, 0xdbdb76adU,
N    0xe0e03bdbU, 0x32325664U, 0x3a3a4e74U, 0x0a0a1e14U,
N    0x4949db92U, 0x06060a0cU, 0x24246c48U, 0x5c5ce4b8U,
N    0xc2c25d9fU, 0xd3d36ebdU, 0xacacef43U, 0x6262a6c4U,
N    0x9191a839U, 0x9595a431U, 0xe4e437d3U, 0x79798bf2U,
N    0xe7e732d5U, 0xc8c8438bU, 0x3737596eU, 0x6d6db7daU,
N    0x8d8d8c01U, 0xd5d564b1U, 0x4e4ed29cU, 0xa9a9e049U,
N    0x6c6cb4d8U, 0x5656faacU, 0xf4f407f3U, 0xeaea25cfU,
N    0x6565afcaU, 0x7a7a8ef4U, 0xaeaee947U, 0x08081810U,
N    0xbabad56fU, 0x787888f0U, 0x25256f4aU, 0x2e2e725cU,
N    0x1c1c2438U, 0xa6a6f157U, 0xb4b4c773U, 0xc6c65197U,
N    0xe8e823cbU, 0xdddd7ca1U, 0x74749ce8U, 0x1f1f213eU,
N    0x4b4bdd96U, 0xbdbddc61U, 0x8b8b860dU, 0x8a8a850fU,
N    0x707090e0U, 0x3e3e427cU, 0xb5b5c471U, 0x6666aaccU,
N    0x4848d890U, 0x03030506U, 0xf6f601f7U, 0x0e0e121cU,
N    0x6161a3c2U, 0x35355f6aU, 0x5757f9aeU, 0xb9b9d069U,
N    0x86869117U, 0xc1c15899U, 0x1d1d273aU, 0x9e9eb927U,
N    0xe1e138d9U, 0xf8f813ebU, 0x9898b32bU, 0x11113322U,
N    0x6969bbd2U, 0xd9d970a9U, 0x8e8e8907U, 0x9494a733U,
N    0x9b9bb62dU, 0x1e1e223cU, 0x87879215U, 0xe9e920c9U,
N    0xcece4987U, 0x5555ffaaU, 0x28287850U, 0xdfdf7aa5U,
N    0x8c8c8f03U, 0xa1a1f859U, 0x89898009U, 0x0d0d171aU,
N    0xbfbfda65U, 0xe6e631d7U, 0x4242c684U, 0x6868b8d0U,
N    0x4141c382U, 0x9999b029U, 0x2d2d775aU, 0x0f0f111eU,
N    0xb0b0cb7bU, 0x5454fca8U, 0xbbbbd66dU, 0x16163a2cU,
N};
Nstatic const uint32_t Te4[256] = {
N    0x63636363U, 0x7c7c7c7cU, 0x77777777U, 0x7b7b7b7bU,
N    0xf2f2f2f2U, 0x6b6b6b6bU, 0x6f6f6f6fU, 0xc5c5c5c5U,
N    0x30303030U, 0x01010101U, 0x67676767U, 0x2b2b2b2bU,
N    0xfefefefeU, 0xd7d7d7d7U, 0xababababU, 0x76767676U,
N    0xcacacacaU, 0x82828282U, 0xc9c9c9c9U, 0x7d7d7d7dU,
N    0xfafafafaU, 0x59595959U, 0x47474747U, 0xf0f0f0f0U,
N    0xadadadadU, 0xd4d4d4d4U, 0xa2a2a2a2U, 0xafafafafU,
N    0x9c9c9c9cU, 0xa4a4a4a4U, 0x72727272U, 0xc0c0c0c0U,
N    0xb7b7b7b7U, 0xfdfdfdfdU, 0x93939393U, 0x26262626U,
N    0x36363636U, 0x3f3f3f3fU, 0xf7f7f7f7U, 0xccccccccU,
N    0x34343434U, 0xa5a5a5a5U, 0xe5e5e5e5U, 0xf1f1f1f1U,
N    0x71717171U, 0xd8d8d8d8U, 0x31313131U, 0x15151515U,
N    0x04040404U, 0xc7c7c7c7U, 0x23232323U, 0xc3c3c3c3U,
N    0x18181818U, 0x96969696U, 0x05050505U, 0x9a9a9a9aU,
N    0x07070707U, 0x12121212U, 0x80808080U, 0xe2e2e2e2U,
N    0xebebebebU, 0x27272727U, 0xb2b2b2b2U, 0x75757575U,
N    0x09090909U, 0x83838383U, 0x2c2c2c2cU, 0x1a1a1a1aU,
N    0x1b1b1b1bU, 0x6e6e6e6eU, 0x5a5a5a5aU, 0xa0a0a0a0U,
N    0x52525252U, 0x3b3b3b3bU, 0xd6d6d6d6U, 0xb3b3b3b3U,
N    0x29292929U, 0xe3e3e3e3U, 0x2f2f2f2fU, 0x84848484U,
N    0x53535353U, 0xd1d1d1d1U, 0x00000000U, 0xededededU,
N    0x20202020U, 0xfcfcfcfcU, 0xb1b1b1b1U, 0x5b5b5b5bU,
N    0x6a6a6a6aU, 0xcbcbcbcbU, 0xbebebebeU, 0x39393939U,
N    0x4a4a4a4aU, 0x4c4c4c4cU, 0x58585858U, 0xcfcfcfcfU,
N    0xd0d0d0d0U, 0xefefefefU, 0xaaaaaaaaU, 0xfbfbfbfbU,
N    0x43434343U, 0x4d4d4d4dU, 0x33333333U, 0x85858585U,
N    0x45454545U, 0xf9f9f9f9U, 0x02020202U, 0x7f7f7f7fU,
N    0x50505050U, 0x3c3c3c3cU, 0x9f9f9f9fU, 0xa8a8a8a8U,
N    0x51515151U, 0xa3a3a3a3U, 0x40404040U, 0x8f8f8f8fU,
N    0x92929292U, 0x9d9d9d9dU, 0x38383838U, 0xf5f5f5f5U,
N    0xbcbcbcbcU, 0xb6b6b6b6U, 0xdadadadaU, 0x21212121U,
N    0x10101010U, 0xffffffffU, 0xf3f3f3f3U, 0xd2d2d2d2U,
N    0xcdcdcdcdU, 0x0c0c0c0cU, 0x13131313U, 0xececececU,
N    0x5f5f5f5fU, 0x97979797U, 0x44444444U, 0x17171717U,
N    0xc4c4c4c4U, 0xa7a7a7a7U, 0x7e7e7e7eU, 0x3d3d3d3dU,
N    0x64646464U, 0x5d5d5d5dU, 0x19191919U, 0x73737373U,
N    0x60606060U, 0x81818181U, 0x4f4f4f4fU, 0xdcdcdcdcU,
N    0x22222222U, 0x2a2a2a2aU, 0x90909090U, 0x88888888U,
N    0x46464646U, 0xeeeeeeeeU, 0xb8b8b8b8U, 0x14141414U,
N    0xdedededeU, 0x5e5e5e5eU, 0x0b0b0b0bU, 0xdbdbdbdbU,
N    0xe0e0e0e0U, 0x32323232U, 0x3a3a3a3aU, 0x0a0a0a0aU,
N    0x49494949U, 0x06060606U, 0x24242424U, 0x5c5c5c5cU,
N    0xc2c2c2c2U, 0xd3d3d3d3U, 0xacacacacU, 0x62626262U,
N    0x91919191U, 0x95959595U, 0xe4e4e4e4U, 0x79797979U,
N    0xe7e7e7e7U, 0xc8c8c8c8U, 0x37373737U, 0x6d6d6d6dU,
N    0x8d8d8d8dU, 0xd5d5d5d5U, 0x4e4e4e4eU, 0xa9a9a9a9U,
N    0x6c6c6c6cU, 0x56565656U, 0xf4f4f4f4U, 0xeaeaeaeaU,
N    0x65656565U, 0x7a7a7a7aU, 0xaeaeaeaeU, 0x08080808U,
N    0xbabababaU, 0x78787878U, 0x25252525U, 0x2e2e2e2eU,
N    0x1c1c1c1cU, 0xa6a6a6a6U, 0xb4b4b4b4U, 0xc6c6c6c6U,
N    0xe8e8e8e8U, 0xddddddddU, 0x74747474U, 0x1f1f1f1fU,
N    0x4b4b4b4bU, 0xbdbdbdbdU, 0x8b8b8b8bU, 0x8a8a8a8aU,
N    0x70707070U, 0x3e3e3e3eU, 0xb5b5b5b5U, 0x66666666U,
N    0x48484848U, 0x03030303U, 0xf6f6f6f6U, 0x0e0e0e0eU,
N    0x61616161U, 0x35353535U, 0x57575757U, 0xb9b9b9b9U,
N    0x86868686U, 0xc1c1c1c1U, 0x1d1d1d1dU, 0x9e9e9e9eU,
N    0xe1e1e1e1U, 0xf8f8f8f8U, 0x98989898U, 0x11111111U,
N    0x69696969U, 0xd9d9d9d9U, 0x8e8e8e8eU, 0x94949494U,
N    0x9b9b9b9bU, 0x1e1e1e1eU, 0x87878787U, 0xe9e9e9e9U,
N    0xcecececeU, 0x55555555U, 0x28282828U, 0xdfdfdfdfU,
N    0x8c8c8c8cU, 0xa1a1a1a1U, 0x89898989U, 0x0d0d0d0dU,
N    0xbfbfbfbfU, 0xe6e6e6e6U, 0x42424242U, 0x68686868U,
N    0x41414141U, 0x99999999U, 0x2d2d2d2dU, 0x0f0f0f0fU,
N    0xb0b0b0b0U, 0x54545454U, 0xbbbbbbbbU, 0x16161616U,
N};
Nstatic const uint32_t Td0[256] = {
N    0x51f4a750U, 0x7e416553U, 0x1a17a4c3U, 0x3a275e96U,
N    0x3bab6bcbU, 0x1f9d45f1U, 0xacfa58abU, 0x4be30393U,
N    0x2030fa55U, 0xad766df6U, 0x88cc7691U, 0xf5024c25U,
N    0x4fe5d7fcU, 0xc52acbd7U, 0x26354480U, 0xb562a38fU,
N    0xdeb15a49U, 0x25ba1b67U, 0x45ea0e98U, 0x5dfec0e1U,
N    0xc32f7502U, 0x814cf012U, 0x8d4697a3U, 0x6bd3f9c6U,
N    0x038f5fe7U, 0x15929c95U, 0xbf6d7aebU, 0x955259daU,
N    0xd4be832dU, 0x587421d3U, 0x49e06929U, 0x8ec9c844U,
N    0x75c2896aU, 0xf48e7978U, 0x99583e6bU, 0x27b971ddU,
N    0xbee14fb6U, 0xf088ad17U, 0xc920ac66U, 0x7dce3ab4U,
N    0x63df4a18U, 0xe51a3182U, 0x97513360U, 0x62537f45U,
N    0xb16477e0U, 0xbb6bae84U, 0xfe81a01cU, 0xf9082b94U,
N    0x70486858U, 0x8f45fd19U, 0x94de6c87U, 0x527bf8b7U,
N    0xab73d323U, 0x724b02e2U, 0xe31f8f57U, 0x6655ab2aU,
N    0xb2eb2807U, 0x2fb5c203U, 0x86c57b9aU, 0xd33708a5U,
N    0x302887f2U, 0x23bfa5b2U, 0x02036abaU, 0xed16825cU,
N    0x8acf1c2bU, 0xa779b492U, 0xf307f2f0U, 0x4e69e2a1U,
N    0x65daf4cdU, 0x0605bed5U, 0xd134621fU, 0xc4a6fe8aU,
N    0x342e539dU, 0xa2f355a0U, 0x058ae132U, 0xa4f6eb75U,
N    0x0b83ec39U, 0x4060efaaU, 0x5e719f06U, 0xbd6e1051U,
N    0x3e218af9U, 0x96dd063dU, 0xdd3e05aeU, 0x4de6bd46U,
N    0x91548db5U, 0x71c45d05U, 0x0406d46fU, 0x605015ffU,
N    0x1998fb24U, 0xd6bde997U, 0x894043ccU, 0x67d99e77U,
N    0xb0e842bdU, 0x07898b88U, 0xe7195b38U, 0x79c8eedbU,
N    0xa17c0a47U, 0x7c420fe9U, 0xf8841ec9U, 0x00000000U,
N    0x09808683U, 0x322bed48U, 0x1e1170acU, 0x6c5a724eU,
N    0xfd0efffbU, 0x0f853856U, 0x3daed51eU, 0x362d3927U,
N    0x0a0fd964U, 0x685ca621U, 0x9b5b54d1U, 0x24362e3aU,
N    0x0c0a67b1U, 0x9357e70fU, 0xb4ee96d2U, 0x1b9b919eU,
N    0x80c0c54fU, 0x61dc20a2U, 0x5a774b69U, 0x1c121a16U,
N    0xe293ba0aU, 0xc0a02ae5U, 0x3c22e043U, 0x121b171dU,
N    0x0e090d0bU, 0xf28bc7adU, 0x2db6a8b9U, 0x141ea9c8U,
N    0x57f11985U, 0xaf75074cU, 0xee99ddbbU, 0xa37f60fdU,
N    0xf701269fU, 0x5c72f5bcU, 0x44663bc5U, 0x5bfb7e34U,
N    0x8b432976U, 0xcb23c6dcU, 0xb6edfc68U, 0xb8e4f163U,
N    0xd731dccaU, 0x42638510U, 0x13972240U, 0x84c61120U,
N    0x854a247dU, 0xd2bb3df8U, 0xaef93211U, 0xc729a16dU,
N    0x1d9e2f4bU, 0xdcb230f3U, 0x0d8652ecU, 0x77c1e3d0U,
N    0x2bb3166cU, 0xa970b999U, 0x119448faU, 0x47e96422U,
N    0xa8fc8cc4U, 0xa0f03f1aU, 0x567d2cd8U, 0x223390efU,
N    0x87494ec7U, 0xd938d1c1U, 0x8ccaa2feU, 0x98d40b36U,
N    0xa6f581cfU, 0xa57ade28U, 0xdab78e26U, 0x3fadbfa4U,
N    0x2c3a9de4U, 0x5078920dU, 0x6a5fcc9bU, 0x547e4662U,
N    0xf68d13c2U, 0x90d8b8e8U, 0x2e39f75eU, 0x82c3aff5U,
N    0x9f5d80beU, 0x69d0937cU, 0x6fd52da9U, 0xcf2512b3U,
N    0xc8ac993bU, 0x10187da7U, 0xe89c636eU, 0xdb3bbb7bU,
N    0xcd267809U, 0x6e5918f4U, 0xec9ab701U, 0x834f9aa8U,
N    0xe6956e65U, 0xaaffe67eU, 0x21bccf08U, 0xef15e8e6U,
N    0xbae79bd9U, 0x4a6f36ceU, 0xea9f09d4U, 0x29b07cd6U,
N    0x31a4b2afU, 0x2a3f2331U, 0xc6a59430U, 0x35a266c0U,
N    0x744ebc37U, 0xfc82caa6U, 0xe090d0b0U, 0x33a7d815U,
N    0xf104984aU, 0x41ecdaf7U, 0x7fcd500eU, 0x1791f62fU,
N    0x764dd68dU, 0x43efb04dU, 0xccaa4d54U, 0xe49604dfU,
N    0x9ed1b5e3U, 0x4c6a881bU, 0xc12c1fb8U, 0x4665517fU,
N    0x9d5eea04U, 0x018c355dU, 0xfa877473U, 0xfb0b412eU,
N    0xb3671d5aU, 0x92dbd252U, 0xe9105633U, 0x6dd64713U,
N    0x9ad7618cU, 0x37a10c7aU, 0x59f8148eU, 0xeb133c89U,
N    0xcea927eeU, 0xb761c935U, 0xe11ce5edU, 0x7a47b13cU,
N    0x9cd2df59U, 0x55f2733fU, 0x1814ce79U, 0x73c737bfU,
N    0x53f7cdeaU, 0x5ffdaa5bU, 0xdf3d6f14U, 0x7844db86U,
N    0xcaaff381U, 0xb968c43eU, 0x3824342cU, 0xc2a3405fU,
N    0x161dc372U, 0xbce2250cU, 0x283c498bU, 0xff0d9541U,
N    0x39a80171U, 0x080cb3deU, 0xd8b4e49cU, 0x6456c190U,
N    0x7bcb8461U, 0xd532b670U, 0x486c5c74U, 0xd0b85742U,
N};
Nstatic const uint32_t Td1[256] = {
N    0x5051f4a7U, 0x537e4165U, 0xc31a17a4U, 0x963a275eU,
N    0xcb3bab6bU, 0xf11f9d45U, 0xabacfa58U, 0x934be303U,
N    0x552030faU, 0xf6ad766dU, 0x9188cc76U, 0x25f5024cU,
N    0xfc4fe5d7U, 0xd7c52acbU, 0x80263544U, 0x8fb562a3U,
N    0x49deb15aU, 0x6725ba1bU, 0x9845ea0eU, 0xe15dfec0U,
N    0x02c32f75U, 0x12814cf0U, 0xa38d4697U, 0xc66bd3f9U,
N    0xe7038f5fU, 0x9515929cU, 0xebbf6d7aU, 0xda955259U,
N    0x2dd4be83U, 0xd3587421U, 0x2949e069U, 0x448ec9c8U,
N    0x6a75c289U, 0x78f48e79U, 0x6b99583eU, 0xdd27b971U,
N    0xb6bee14fU, 0x17f088adU, 0x66c920acU, 0xb47dce3aU,
N    0x1863df4aU, 0x82e51a31U, 0x60975133U, 0x4562537fU,
N    0xe0b16477U, 0x84bb6baeU, 0x1cfe81a0U, 0x94f9082bU,
N    0x58704868U, 0x198f45fdU, 0x8794de6cU, 0xb7527bf8U,
N    0x23ab73d3U, 0xe2724b02U, 0x57e31f8fU, 0x2a6655abU,
N    0x07b2eb28U, 0x032fb5c2U, 0x9a86c57bU, 0xa5d33708U,
N    0xf2302887U, 0xb223bfa5U, 0xba02036aU, 0x5ced1682U,
N    0x2b8acf1cU, 0x92a779b4U, 0xf0f307f2U, 0xa14e69e2U,
N    0xcd65daf4U, 0xd50605beU, 0x1fd13462U, 0x8ac4a6feU,
N    0x9d342e53U, 0xa0a2f355U, 0x32058ae1U, 0x75a4f6ebU,
N    0x390b83ecU, 0xaa4060efU, 0x065e719fU, 0x51bd6e10U,
N    0xf93e218aU, 0x3d96dd06U, 0xaedd3e05U, 0x464de6bdU,
N    0xb591548dU, 0x0571c45dU, 0x6f0406d4U, 0xff605015U,
N    0x241998fbU, 0x97d6bde9U, 0xcc894043U, 0x7767d99eU,
N    0xbdb0e842U, 0x8807898bU, 0x38e7195bU, 0xdb79c8eeU,
N    0x47a17c0aU, 0xe97c420fU, 0xc9f8841eU, 0x00000000U,
N    0x83098086U, 0x48322bedU, 0xac1e1170U, 0x4e6c5a72U,
N    0xfbfd0effU, 0x560f8538U, 0x1e3daed5U, 0x27362d39U,
N    0x640a0fd9U, 0x21685ca6U, 0xd19b5b54U, 0x3a24362eU,
N    0xb10c0a67U, 0x0f9357e7U, 0xd2b4ee96U, 0x9e1b9b91U,
N    0x4f80c0c5U, 0xa261dc20U, 0x695a774bU, 0x161c121aU,
N    0x0ae293baU, 0xe5c0a02aU, 0x433c22e0U, 0x1d121b17U,
N    0x0b0e090dU, 0xadf28bc7U, 0xb92db6a8U, 0xc8141ea9U,
N    0x8557f119U, 0x4caf7507U, 0xbbee99ddU, 0xfda37f60U,
N    0x9ff70126U, 0xbc5c72f5U, 0xc544663bU, 0x345bfb7eU,
N    0x768b4329U, 0xdccb23c6U, 0x68b6edfcU, 0x63b8e4f1U,
N    0xcad731dcU, 0x10426385U, 0x40139722U, 0x2084c611U,
N    0x7d854a24U, 0xf8d2bb3dU, 0x11aef932U, 0x6dc729a1U,
N    0x4b1d9e2fU, 0xf3dcb230U, 0xec0d8652U, 0xd077c1e3U,
N    0x6c2bb316U, 0x99a970b9U, 0xfa119448U, 0x2247e964U,
N    0xc4a8fc8cU, 0x1aa0f03fU, 0xd8567d2cU, 0xef223390U,
N    0xc787494eU, 0xc1d938d1U, 0xfe8ccaa2U, 0x3698d40bU,
N    0xcfa6f581U, 0x28a57adeU, 0x26dab78eU, 0xa43fadbfU,
N    0xe42c3a9dU, 0x0d507892U, 0x9b6a5fccU, 0x62547e46U,
N    0xc2f68d13U, 0xe890d8b8U, 0x5e2e39f7U, 0xf582c3afU,
N    0xbe9f5d80U, 0x7c69d093U, 0xa96fd52dU, 0xb3cf2512U,
N    0x3bc8ac99U, 0xa710187dU, 0x6ee89c63U, 0x7bdb3bbbU,
N    0x09cd2678U, 0xf46e5918U, 0x01ec9ab7U, 0xa8834f9aU,
N    0x65e6956eU, 0x7eaaffe6U, 0x0821bccfU, 0xe6ef15e8U,
N    0xd9bae79bU, 0xce4a6f36U, 0xd4ea9f09U, 0xd629b07cU,
N    0xaf31a4b2U, 0x312a3f23U, 0x30c6a594U, 0xc035a266U,
N    0x37744ebcU, 0xa6fc82caU, 0xb0e090d0U, 0x1533a7d8U,
N    0x4af10498U, 0xf741ecdaU, 0x0e7fcd50U, 0x2f1791f6U,
N    0x8d764dd6U, 0x4d43efb0U, 0x54ccaa4dU, 0xdfe49604U,
N    0xe39ed1b5U, 0x1b4c6a88U, 0xb8c12c1fU, 0x7f466551U,
N    0x049d5eeaU, 0x5d018c35U, 0x73fa8774U, 0x2efb0b41U,
N    0x5ab3671dU, 0x5292dbd2U, 0x33e91056U, 0x136dd647U,
N    0x8c9ad761U, 0x7a37a10cU, 0x8e59f814U, 0x89eb133cU,
N    0xeecea927U, 0x35b761c9U, 0xede11ce5U, 0x3c7a47b1U,
N    0x599cd2dfU, 0x3f55f273U, 0x791814ceU, 0xbf73c737U,
N    0xea53f7cdU, 0x5b5ffdaaU, 0x14df3d6fU, 0x867844dbU,
N    0x81caaff3U, 0x3eb968c4U, 0x2c382434U, 0x5fc2a340U,
N    0x72161dc3U, 0x0cbce225U, 0x8b283c49U, 0x41ff0d95U,
N    0x7139a801U, 0xde080cb3U, 0x9cd8b4e4U, 0x906456c1U,
N    0x617bcb84U, 0x70d532b6U, 0x74486c5cU, 0x42d0b857U,
N};
Nstatic const uint32_t Td2[256] = {
N    0xa75051f4U, 0x65537e41U, 0xa4c31a17U, 0x5e963a27U,
N    0x6bcb3babU, 0x45f11f9dU, 0x58abacfaU, 0x03934be3U,
N    0xfa552030U, 0x6df6ad76U, 0x769188ccU, 0x4c25f502U,
N    0xd7fc4fe5U, 0xcbd7c52aU, 0x44802635U, 0xa38fb562U,
N    0x5a49deb1U, 0x1b6725baU, 0x0e9845eaU, 0xc0e15dfeU,
N    0x7502c32fU, 0xf012814cU, 0x97a38d46U, 0xf9c66bd3U,
N    0x5fe7038fU, 0x9c951592U, 0x7aebbf6dU, 0x59da9552U,
N    0x832dd4beU, 0x21d35874U, 0x692949e0U, 0xc8448ec9U,
N    0x896a75c2U, 0x7978f48eU, 0x3e6b9958U, 0x71dd27b9U,
N    0x4fb6bee1U, 0xad17f088U, 0xac66c920U, 0x3ab47dceU,
N    0x4a1863dfU, 0x3182e51aU, 0x33609751U, 0x7f456253U,
N    0x77e0b164U, 0xae84bb6bU, 0xa01cfe81U, 0x2b94f908U,
N    0x68587048U, 0xfd198f45U, 0x6c8794deU, 0xf8b7527bU,
N    0xd323ab73U, 0x02e2724bU, 0x8f57e31fU, 0xab2a6655U,
N    0x2807b2ebU, 0xc2032fb5U, 0x7b9a86c5U, 0x08a5d337U,
N    0x87f23028U, 0xa5b223bfU, 0x6aba0203U, 0x825ced16U,
N    0x1c2b8acfU, 0xb492a779U, 0xf2f0f307U, 0xe2a14e69U,
N    0xf4cd65daU, 0xbed50605U, 0x621fd134U, 0xfe8ac4a6U,
N    0x539d342eU, 0x55a0a2f3U, 0xe132058aU, 0xeb75a4f6U,
N    0xec390b83U, 0xefaa4060U, 0x9f065e71U, 0x1051bd6eU,
N
N    0x8af93e21U, 0x063d96ddU, 0x05aedd3eU, 0xbd464de6U,
N    0x8db59154U, 0x5d0571c4U, 0xd46f0406U, 0x15ff6050U,
N    0xfb241998U, 0xe997d6bdU, 0x43cc8940U, 0x9e7767d9U,
N    0x42bdb0e8U, 0x8b880789U, 0x5b38e719U, 0xeedb79c8U,
N    0x0a47a17cU, 0x0fe97c42U, 0x1ec9f884U, 0x00000000U,
N    0x86830980U, 0xed48322bU, 0x70ac1e11U, 0x724e6c5aU,
N    0xfffbfd0eU, 0x38560f85U, 0xd51e3daeU, 0x3927362dU,
N    0xd9640a0fU, 0xa621685cU, 0x54d19b5bU, 0x2e3a2436U,
N    0x67b10c0aU, 0xe70f9357U, 0x96d2b4eeU, 0x919e1b9bU,
N    0xc54f80c0U, 0x20a261dcU, 0x4b695a77U, 0x1a161c12U,
N    0xba0ae293U, 0x2ae5c0a0U, 0xe0433c22U, 0x171d121bU,
N    0x0d0b0e09U, 0xc7adf28bU, 0xa8b92db6U, 0xa9c8141eU,
N    0x198557f1U, 0x074caf75U, 0xddbbee99U, 0x60fda37fU,
N    0x269ff701U, 0xf5bc5c72U, 0x3bc54466U, 0x7e345bfbU,
N    0x29768b43U, 0xc6dccb23U, 0xfc68b6edU, 0xf163b8e4U,
N    0xdccad731U, 0x85104263U, 0x22401397U, 0x112084c6U,
N    0x247d854aU, 0x3df8d2bbU, 0x3211aef9U, 0xa16dc729U,
N    0x2f4b1d9eU, 0x30f3dcb2U, 0x52ec0d86U, 0xe3d077c1U,
N    0x166c2bb3U, 0xb999a970U, 0x48fa1194U, 0x642247e9U,
N    0x8cc4a8fcU, 0x3f1aa0f0U, 0x2cd8567dU, 0x90ef2233U,
N    0x4ec78749U, 0xd1c1d938U, 0xa2fe8ccaU, 0x0b3698d4U,
N    0x81cfa6f5U, 0xde28a57aU, 0x8e26dab7U, 0xbfa43fadU,
N    0x9de42c3aU, 0x920d5078U, 0xcc9b6a5fU, 0x4662547eU,
N    0x13c2f68dU, 0xb8e890d8U, 0xf75e2e39U, 0xaff582c3U,
N    0x80be9f5dU, 0x937c69d0U, 0x2da96fd5U, 0x12b3cf25U,
N    0x993bc8acU, 0x7da71018U, 0x636ee89cU, 0xbb7bdb3bU,
N    0x7809cd26U, 0x18f46e59U, 0xb701ec9aU, 0x9aa8834fU,
N    0x6e65e695U, 0xe67eaaffU, 0xcf0821bcU, 0xe8e6ef15U,
N    0x9bd9bae7U, 0x36ce4a6fU, 0x09d4ea9fU, 0x7cd629b0U,
N    0xb2af31a4U, 0x23312a3fU, 0x9430c6a5U, 0x66c035a2U,
N    0xbc37744eU, 0xcaa6fc82U, 0xd0b0e090U, 0xd81533a7U,
N    0x984af104U, 0xdaf741ecU, 0x500e7fcdU, 0xf62f1791U,
N    0xd68d764dU, 0xb04d43efU, 0x4d54ccaaU, 0x04dfe496U,
N    0xb5e39ed1U, 0x881b4c6aU, 0x1fb8c12cU, 0x517f4665U,
N    0xea049d5eU, 0x355d018cU, 0x7473fa87U, 0x412efb0bU,
N    0x1d5ab367U, 0xd25292dbU, 0x5633e910U, 0x47136dd6U,
N    0x618c9ad7U, 0x0c7a37a1U, 0x148e59f8U, 0x3c89eb13U,
N    0x27eecea9U, 0xc935b761U, 0xe5ede11cU, 0xb13c7a47U,
N    0xdf599cd2U, 0x733f55f2U, 0xce791814U, 0x37bf73c7U,
N    0xcdea53f7U, 0xaa5b5ffdU, 0x6f14df3dU, 0xdb867844U,
N    0xf381caafU, 0xc43eb968U, 0x342c3824U, 0x405fc2a3U,
N    0xc372161dU, 0x250cbce2U, 0x498b283cU, 0x9541ff0dU,
N    0x017139a8U, 0xb3de080cU, 0xe49cd8b4U, 0xc1906456U,
N    0x84617bcbU, 0xb670d532U, 0x5c74486cU, 0x5742d0b8U,
N};
Nstatic const uint32_t Td3[256] = {
N    0xf4a75051U, 0x4165537eU, 0x17a4c31aU, 0x275e963aU,
N    0xab6bcb3bU, 0x9d45f11fU, 0xfa58abacU, 0xe303934bU,
N    0x30fa5520U, 0x766df6adU, 0xcc769188U, 0x024c25f5U,
N    0xe5d7fc4fU, 0x2acbd7c5U, 0x35448026U, 0x62a38fb5U,
N    0xb15a49deU, 0xba1b6725U, 0xea0e9845U, 0xfec0e15dU,
N    0x2f7502c3U, 0x4cf01281U, 0x4697a38dU, 0xd3f9c66bU,
N    0x8f5fe703U, 0x929c9515U, 0x6d7aebbfU, 0x5259da95U,
N    0xbe832dd4U, 0x7421d358U, 0xe0692949U, 0xc9c8448eU,
N    0xc2896a75U, 0x8e7978f4U, 0x583e6b99U, 0xb971dd27U,
N    0xe14fb6beU, 0x88ad17f0U, 0x20ac66c9U, 0xce3ab47dU,
N    0xdf4a1863U, 0x1a3182e5U, 0x51336097U, 0x537f4562U,
N    0x6477e0b1U, 0x6bae84bbU, 0x81a01cfeU, 0x082b94f9U,
N    0x48685870U, 0x45fd198fU, 0xde6c8794U, 0x7bf8b752U,
N    0x73d323abU, 0x4b02e272U, 0x1f8f57e3U, 0x55ab2a66U,
N    0xeb2807b2U, 0xb5c2032fU, 0xc57b9a86U, 0x3708a5d3U,
N    0x2887f230U, 0xbfa5b223U, 0x036aba02U, 0x16825cedU,
N    0xcf1c2b8aU, 0x79b492a7U, 0x07f2f0f3U, 0x69e2a14eU,
N    0xdaf4cd65U, 0x05bed506U, 0x34621fd1U, 0xa6fe8ac4U,
N    0x2e539d34U, 0xf355a0a2U, 0x8ae13205U, 0xf6eb75a4U,
N    0x83ec390bU, 0x60efaa40U, 0x719f065eU, 0x6e1051bdU,
N    0x218af93eU, 0xdd063d96U, 0x3e05aeddU, 0xe6bd464dU,
N    0x548db591U, 0xc45d0571U, 0x06d46f04U, 0x5015ff60U,
N    0x98fb2419U, 0xbde997d6U, 0x4043cc89U, 0xd99e7767U,
N    0xe842bdb0U, 0x898b8807U, 0x195b38e7U, 0xc8eedb79U,
N    0x7c0a47a1U, 0x420fe97cU, 0x841ec9f8U, 0x00000000U,
N    0x80868309U, 0x2bed4832U, 0x1170ac1eU, 0x5a724e6cU,
N    0x0efffbfdU, 0x8538560fU, 0xaed51e3dU, 0x2d392736U,
N    0x0fd9640aU, 0x5ca62168U, 0x5b54d19bU, 0x362e3a24U,
N    0x0a67b10cU, 0x57e70f93U, 0xee96d2b4U, 0x9b919e1bU,
N    0xc0c54f80U, 0xdc20a261U, 0x774b695aU, 0x121a161cU,
N    0x93ba0ae2U, 0xa02ae5c0U, 0x22e0433cU, 0x1b171d12U,
N    0x090d0b0eU, 0x8bc7adf2U, 0xb6a8b92dU, 0x1ea9c814U,
N    0xf1198557U, 0x75074cafU, 0x99ddbbeeU, 0x7f60fda3U,
N    0x01269ff7U, 0x72f5bc5cU, 0x663bc544U, 0xfb7e345bU,
N    0x4329768bU, 0x23c6dccbU, 0xedfc68b6U, 0xe4f163b8U,
N    0x31dccad7U, 0x63851042U, 0x97224013U, 0xc6112084U,
N    0x4a247d85U, 0xbb3df8d2U, 0xf93211aeU, 0x29a16dc7U,
N    0x9e2f4b1dU, 0xb230f3dcU, 0x8652ec0dU, 0xc1e3d077U,
N    0xb3166c2bU, 0x70b999a9U, 0x9448fa11U, 0xe9642247U,
N    0xfc8cc4a8U, 0xf03f1aa0U, 0x7d2cd856U, 0x3390ef22U,
N    0x494ec787U, 0x38d1c1d9U, 0xcaa2fe8cU, 0xd40b3698U,
N    0xf581cfa6U, 0x7ade28a5U, 0xb78e26daU, 0xadbfa43fU,
N    0x3a9de42cU, 0x78920d50U, 0x5fcc9b6aU, 0x7e466254U,
N    0x8d13c2f6U, 0xd8b8e890U, 0x39f75e2eU, 0xc3aff582U,
N    0x5d80be9fU, 0xd0937c69U, 0xd52da96fU, 0x2512b3cfU,
N    0xac993bc8U, 0x187da710U, 0x9c636ee8U, 0x3bbb7bdbU,
N    0x267809cdU, 0x5918f46eU, 0x9ab701ecU, 0x4f9aa883U,
N    0x956e65e6U, 0xffe67eaaU, 0xbccf0821U, 0x15e8e6efU,
N    0xe79bd9baU, 0x6f36ce4aU, 0x9f09d4eaU, 0xb07cd629U,
N    0xa4b2af31U, 0x3f23312aU, 0xa59430c6U, 0xa266c035U,
N    0x4ebc3774U, 0x82caa6fcU, 0x90d0b0e0U, 0xa7d81533U,
N    0x04984af1U, 0xecdaf741U, 0xcd500e7fU, 0x91f62f17U,
N    0x4dd68d76U, 0xefb04d43U, 0xaa4d54ccU, 0x9604dfe4U,
N    0xd1b5e39eU, 0x6a881b4cU, 0x2c1fb8c1U, 0x65517f46U,
N    0x5eea049dU, 0x8c355d01U, 0x877473faU, 0x0b412efbU,
N    0x671d5ab3U, 0xdbd25292U, 0x105633e9U, 0xd647136dU,
N    0xd7618c9aU, 0xa10c7a37U, 0xf8148e59U, 0x133c89ebU,
N    0xa927eeceU, 0x61c935b7U, 0x1ce5ede1U, 0x47b13c7aU,
N    0xd2df599cU, 0xf2733f55U, 0x14ce7918U, 0xc737bf73U,
N    0xf7cdea53U, 0xfdaa5b5fU, 0x3d6f14dfU, 0x44db8678U,
N    0xaff381caU, 0x68c43eb9U, 0x24342c38U, 0xa3405fc2U,
N    0x1dc37216U, 0xe2250cbcU, 0x3c498b28U, 0x0d9541ffU,
N    0xa8017139U, 0x0cb3de08U, 0xb4e49cd8U, 0x56c19064U,
N    0xcb84617bU, 0x32b670d5U, 0x6c5c7448U, 0xb85742d0U,
N};
Nstatic const uint32_t Td4[256] = {
N    0x52525252U, 0x09090909U, 0x6a6a6a6aU, 0xd5d5d5d5U,
N    0x30303030U, 0x36363636U, 0xa5a5a5a5U, 0x38383838U,
N    0xbfbfbfbfU, 0x40404040U, 0xa3a3a3a3U, 0x9e9e9e9eU,
N    0x81818181U, 0xf3f3f3f3U, 0xd7d7d7d7U, 0xfbfbfbfbU,
N    0x7c7c7c7cU, 0xe3e3e3e3U, 0x39393939U, 0x82828282U,
N    0x9b9b9b9bU, 0x2f2f2f2fU, 0xffffffffU, 0x87878787U,
N    0x34343434U, 0x8e8e8e8eU, 0x43434343U, 0x44444444U,
N    0xc4c4c4c4U, 0xdedededeU, 0xe9e9e9e9U, 0xcbcbcbcbU,
N    0x54545454U, 0x7b7b7b7bU, 0x94949494U, 0x32323232U,
N    0xa6a6a6a6U, 0xc2c2c2c2U, 0x23232323U, 0x3d3d3d3dU,
N    0xeeeeeeeeU, 0x4c4c4c4cU, 0x95959595U, 0x0b0b0b0bU,
N    0x42424242U, 0xfafafafaU, 0xc3c3c3c3U, 0x4e4e4e4eU,
N    0x08080808U, 0x2e2e2e2eU, 0xa1a1a1a1U, 0x66666666U,
N    0x28282828U, 0xd9d9d9d9U, 0x24242424U, 0xb2b2b2b2U,
N    0x76767676U, 0x5b5b5b5bU, 0xa2a2a2a2U, 0x49494949U,
N    0x6d6d6d6dU, 0x8b8b8b8bU, 0xd1d1d1d1U, 0x25252525U,
N    0x72727272U, 0xf8f8f8f8U, 0xf6f6f6f6U, 0x64646464U,
N    0x86868686U, 0x68686868U, 0x98989898U, 0x16161616U,
N    0xd4d4d4d4U, 0xa4a4a4a4U, 0x5c5c5c5cU, 0xccccccccU,
N    0x5d5d5d5dU, 0x65656565U, 0xb6b6b6b6U, 0x92929292U,
N    0x6c6c6c6cU, 0x70707070U, 0x48484848U, 0x50505050U,
N    0xfdfdfdfdU, 0xededededU, 0xb9b9b9b9U, 0xdadadadaU,
N    0x5e5e5e5eU, 0x15151515U, 0x46464646U, 0x57575757U,
N    0xa7a7a7a7U, 0x8d8d8d8dU, 0x9d9d9d9dU, 0x84848484U,
N    0x90909090U, 0xd8d8d8d8U, 0xababababU, 0x00000000U,
N    0x8c8c8c8cU, 0xbcbcbcbcU, 0xd3d3d3d3U, 0x0a0a0a0aU,
N    0xf7f7f7f7U, 0xe4e4e4e4U, 0x58585858U, 0x05050505U,
N    0xb8b8b8b8U, 0xb3b3b3b3U, 0x45454545U, 0x06060606U,
N    0xd0d0d0d0U, 0x2c2c2c2cU, 0x1e1e1e1eU, 0x8f8f8f8fU,
N    0xcacacacaU, 0x3f3f3f3fU, 0x0f0f0f0fU, 0x02020202U,
N    0xc1c1c1c1U, 0xafafafafU, 0xbdbdbdbdU, 0x03030303U,
N    0x01010101U, 0x13131313U, 0x8a8a8a8aU, 0x6b6b6b6bU,
N    0x3a3a3a3aU, 0x91919191U, 0x11111111U, 0x41414141U,
N    0x4f4f4f4fU, 0x67676767U, 0xdcdcdcdcU, 0xeaeaeaeaU,
N    0x97979797U, 0xf2f2f2f2U, 0xcfcfcfcfU, 0xcecececeU,
N    0xf0f0f0f0U, 0xb4b4b4b4U, 0xe6e6e6e6U, 0x73737373U,
N    0x96969696U, 0xacacacacU, 0x74747474U, 0x22222222U,
N    0xe7e7e7e7U, 0xadadadadU, 0x35353535U, 0x85858585U,
N    0xe2e2e2e2U, 0xf9f9f9f9U, 0x37373737U, 0xe8e8e8e8U,
N    0x1c1c1c1cU, 0x75757575U, 0xdfdfdfdfU, 0x6e6e6e6eU,
N    0x47474747U, 0xf1f1f1f1U, 0x1a1a1a1aU, 0x71717171U,
N    0x1d1d1d1dU, 0x29292929U, 0xc5c5c5c5U, 0x89898989U,
N    0x6f6f6f6fU, 0xb7b7b7b7U, 0x62626262U, 0x0e0e0e0eU,
N    0xaaaaaaaaU, 0x18181818U, 0xbebebebeU, 0x1b1b1b1bU,
N    0xfcfcfcfcU, 0x56565656U, 0x3e3e3e3eU, 0x4b4b4b4bU,
N    0xc6c6c6c6U, 0xd2d2d2d2U, 0x79797979U, 0x20202020U,
N    0x9a9a9a9aU, 0xdbdbdbdbU, 0xc0c0c0c0U, 0xfefefefeU,
N    0x78787878U, 0xcdcdcdcdU, 0x5a5a5a5aU, 0xf4f4f4f4U,
N    0x1f1f1f1fU, 0xddddddddU, 0xa8a8a8a8U, 0x33333333U,
N    0x88888888U, 0x07070707U, 0xc7c7c7c7U, 0x31313131U,
N    0xb1b1b1b1U, 0x12121212U, 0x10101010U, 0x59595959U,
N    0x27272727U, 0x80808080U, 0xececececU, 0x5f5f5f5fU,
N    0x60606060U, 0x51515151U, 0x7f7f7f7fU, 0xa9a9a9a9U,
N    0x19191919U, 0xb5b5b5b5U, 0x4a4a4a4aU, 0x0d0d0d0dU,
N    0x2d2d2d2dU, 0xe5e5e5e5U, 0x7a7a7a7aU, 0x9f9f9f9fU,
N    0x93939393U, 0xc9c9c9c9U, 0x9c9c9c9cU, 0xefefefefU,
N    0xa0a0a0a0U, 0xe0e0e0e0U, 0x3b3b3b3bU, 0x4d4d4d4dU,
N    0xaeaeaeaeU, 0x2a2a2a2aU, 0xf5f5f5f5U, 0xb0b0b0b0U,
N    0xc8c8c8c8U, 0xebebebebU, 0xbbbbbbbbU, 0x3c3c3c3cU,
N    0x83838383U, 0x53535353U, 0x99999999U, 0x61616161U,
N    0x17171717U, 0x2b2b2b2bU, 0x04040404U, 0x7e7e7e7eU,
N    0xbabababaU, 0x77777777U, 0xd6d6d6d6U, 0x26262626U,
N    0xe1e1e1e1U, 0x69696969U, 0x14141414U, 0x63636363U,
N    0x55555555U, 0x21212121U, 0x0c0c0c0cU, 0x7d7d7d7dU,
N};
Nstatic const uint32_t rcon[] = {
N        0x01000000, 0x02000000, 0x04000000, 0x08000000,
N        0x10000000, 0x20000000, 0x40000000, 0x80000000,
N        0x1B000000, 0x36000000, /* for 128-bit blocks, Rijndael never uses more than 10 rcon values */
N};
N
N/**
N * Expand the cipher key into the encryption key schedule.
N */
Nint AES_set_encrypt_key(const unsigned char *userKey, const int bits,AES_KEY *key) 
N{
N
N        uint32_t *rk;
N        int i = 0;
N        uint32_t temp;
N
N        if (!userKey || !key)
N                return -1;
N        if (bits != 128 && bits != 192 && bits != 256)
N                return -2;
N
N        rk = key->rd_key;
N
N        if (bits==128)
N                key->rounds = 10;
N        else if (bits==192)
N                key->rounds = 12;
N        else
N                key->rounds = 14;
N
N        rk[0] = GETU32(userKey     );
X        rk[0] = (((uint32_t)(userKey)[0] << 24) ^ ((uint32_t)(userKey)[1] << 16) ^ ((uint32_t)(userKey)[2] << 8) ^ ((uint32_t)(userKey)[3]));
N        rk[1] = GETU32(userKey +  4);
X        rk[1] = (((uint32_t)(userKey + 4)[0] << 24) ^ ((uint32_t)(userKey + 4)[1] << 16) ^ ((uint32_t)(userKey + 4)[2] << 8) ^ ((uint32_t)(userKey + 4)[3]));
N        rk[2] = GETU32(userKey +  8);
X        rk[2] = (((uint32_t)(userKey + 8)[0] << 24) ^ ((uint32_t)(userKey + 8)[1] << 16) ^ ((uint32_t)(userKey + 8)[2] << 8) ^ ((uint32_t)(userKey + 8)[3]));
N        rk[3] = GETU32(userKey + 12);
X        rk[3] = (((uint32_t)(userKey + 12)[0] << 24) ^ ((uint32_t)(userKey + 12)[1] << 16) ^ ((uint32_t)(userKey + 12)[2] << 8) ^ ((uint32_t)(userKey + 12)[3]));
N        if (bits == 128) {
N                while (1) {
N                        temp  = rk[3];
N                        rk[4] = rk[0] ^
N                                (Te4[(temp >> 16) & 0xff] & 0xff000000) ^
N                                (Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
N                                (Te4[(temp      ) & 0xff] & 0x0000ff00) ^
N                                (Te4[(temp >> 24)       ] & 0x000000ff) ^
N                                rcon[i];
N                        rk[5] = rk[1] ^ rk[4];
N                        rk[6] = rk[2] ^ rk[5];
N                        rk[7] = rk[3] ^ rk[6];
N                        if (++i == 10) {
N                                return 0;
N                        }
N                        rk += 4;
N                }
N        }
N        rk[4] = GETU32(userKey + 16);
X        rk[4] = (((uint32_t)(userKey + 16)[0] << 24) ^ ((uint32_t)(userKey + 16)[1] << 16) ^ ((uint32_t)(userKey + 16)[2] << 8) ^ ((uint32_t)(userKey + 16)[3]));
N        rk[5] = GETU32(userKey + 20);
X        rk[5] = (((uint32_t)(userKey + 20)[0] << 24) ^ ((uint32_t)(userKey + 20)[1] << 16) ^ ((uint32_t)(userKey + 20)[2] << 8) ^ ((uint32_t)(userKey + 20)[3]));
N        if (bits == 192) {
N                while (1) {
N                        temp = rk[ 5];
N                        rk[ 6] = rk[ 0] ^
N                                (Te4[(temp >> 16) & 0xff] & 0xff000000) ^
N                                (Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
N                                (Te4[(temp      ) & 0xff] & 0x0000ff00) ^
N                                (Te4[(temp >> 24)       ] & 0x000000ff) ^
N                                rcon[i];
N                        rk[ 7] = rk[ 1] ^ rk[ 6];
N                        rk[ 8] = rk[ 2] ^ rk[ 7];
N                        rk[ 9] = rk[ 3] ^ rk[ 8];
N                        if (++i == 8) {
N                                return 0;
N                        }
N                        rk[10] = rk[ 4] ^ rk[ 9];
N                        rk[11] = rk[ 5] ^ rk[10];
N                        rk += 6;
N                }
N        }
N        rk[6] = GETU32(userKey + 24);
X        rk[6] = (((uint32_t)(userKey + 24)[0] << 24) ^ ((uint32_t)(userKey + 24)[1] << 16) ^ ((uint32_t)(userKey + 24)[2] << 8) ^ ((uint32_t)(userKey + 24)[3]));
N        rk[7] = GETU32(userKey + 28);
X        rk[7] = (((uint32_t)(userKey + 28)[0] << 24) ^ ((uint32_t)(userKey + 28)[1] << 16) ^ ((uint32_t)(userKey + 28)[2] << 8) ^ ((uint32_t)(userKey + 28)[3]));
N        if (bits == 256) {
N                while (1) {
N                        temp = rk[ 7];
N                        rk[ 8] = rk[ 0] ^
N                                (Te4[(temp >> 16) & 0xff] & 0xff000000) ^
N                                (Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
N                                (Te4[(temp      ) & 0xff] & 0x0000ff00) ^
N                                (Te4[(temp >> 24)       ] & 0x000000ff) ^
N                                rcon[i];
N                        rk[ 9] = rk[ 1] ^ rk[ 8];
N                        rk[10] = rk[ 2] ^ rk[ 9];
N                        rk[11] = rk[ 3] ^ rk[10];
N                        if (++i == 7) {
N                                return 0;
N                        }
N                        temp = rk[11];
N                        rk[12] = rk[ 4] ^
N                                (Te4[(temp >> 24)       ] & 0xff000000) ^
N                                (Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
N                                (Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
N                                (Te4[(temp      ) & 0xff] & 0x000000ff);
N                        rk[13] = rk[ 5] ^ rk[12];
N                        rk[14] = rk[ 6] ^ rk[13];
N                        rk[15] = rk[ 7] ^ rk[14];
N
N                        rk += 8;
N                }
N        }
N        return 0;
N}
N
N/**
N * Expand the cipher key into the decryption key schedule.
N */
Nint AES_set_decrypt_key(const unsigned char *userKey, const int bits,AES_KEY *key) 
N{
N        uint32_t *rk;
N        int i, j, status;
N        uint32_t temp;
N
N        /* first, start with an encryption schedule */
N        status = AES_set_encrypt_key(userKey, bits, key);
N        if (status < 0)
N                return status;
N
N        rk = key->rd_key;
N
N        /* invert the order of the round keys: */
N        for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
N                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
N                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
N                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
N                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
N        }
N        /* apply the inverse MixColumn transform to all round keys but the first and the last: */
N        for (i = 1; i < (key->rounds); i++) {
N                rk += 4;
N                rk[0] =
N                        Td0[Te4[(rk[0] >> 24)       ] & 0xff] ^
N                        Td1[Te4[(rk[0] >> 16) & 0xff] & 0xff] ^
N                        Td2[Te4[(rk[0] >>  8) & 0xff] & 0xff] ^
N                        Td3[Te4[(rk[0]      ) & 0xff] & 0xff];
N                rk[1] =
N                        Td0[Te4[(rk[1] >> 24)       ] & 0xff] ^
N                        Td1[Te4[(rk[1] >> 16) & 0xff] & 0xff] ^
N                        Td2[Te4[(rk[1] >>  8) & 0xff] & 0xff] ^
N                        Td3[Te4[(rk[1]      ) & 0xff] & 0xff];
N                rk[2] =
N                        Td0[Te4[(rk[2] >> 24)       ] & 0xff] ^
N                        Td1[Te4[(rk[2] >> 16) & 0xff] & 0xff] ^
N                        Td2[Te4[(rk[2] >>  8) & 0xff] & 0xff] ^
N                        Td3[Te4[(rk[2]      ) & 0xff] & 0xff];
N                rk[3] =
N                        Td0[Te4[(rk[3] >> 24)       ] & 0xff] ^
N                        Td1[Te4[(rk[3] >> 16) & 0xff] & 0xff] ^
N                        Td2[Te4[(rk[3] >>  8) & 0xff] & 0xff] ^
N                        Td3[Te4[(rk[3]      ) & 0xff] & 0xff];
N        }
N        return 0;
N}
N
N#ifndef AES_ASM
N/*
N * Encrypt a single block
N * in and out can overlap
N */
Nvoid AES_encrypt(const unsigned char *in, unsigned char *out,const AES_KEY *key) 
N{
N
N        const uint32_t *rk;
N        uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
N#ifndef FULL_UNROLL
N        int r;
N#endif /* ?FULL_UNROLL */
N
N        //assert(in && out && key);
N        rk = key->rd_key;
N
N        /*
N         * map byte array block to cipher state
N         * and add initial round key:
N         */
N        s0 = GETU32(in     ) ^ rk[0];
X        s0 = (((uint32_t)(in)[0] << 24) ^ ((uint32_t)(in)[1] << 16) ^ ((uint32_t)(in)[2] << 8) ^ ((uint32_t)(in)[3])) ^ rk[0];
N        s1 = GETU32(in +  4) ^ rk[1];
X        s1 = (((uint32_t)(in + 4)[0] << 24) ^ ((uint32_t)(in + 4)[1] << 16) ^ ((uint32_t)(in + 4)[2] << 8) ^ ((uint32_t)(in + 4)[3])) ^ rk[1];
N        s2 = GETU32(in +  8) ^ rk[2];
X        s2 = (((uint32_t)(in + 8)[0] << 24) ^ ((uint32_t)(in + 8)[1] << 16) ^ ((uint32_t)(in + 8)[2] << 8) ^ ((uint32_t)(in + 8)[3])) ^ rk[2];
N        s3 = GETU32(in + 12) ^ rk[3];
X        s3 = (((uint32_t)(in + 12)[0] << 24) ^ ((uint32_t)(in + 12)[1] << 16) ^ ((uint32_t)(in + 12)[2] << 8) ^ ((uint32_t)(in + 12)[3])) ^ rk[3];
N#ifdef FULL_UNROLL
S        /* round 1: */
S        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[ 4];
S        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[ 5];
S        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[ 6];
S        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[ 7];
S        /* round 2: */
S        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[ 8];
S        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[ 9];
S        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[10];
S        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[11];
S        /* round 3: */
S        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[12];
S        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[13];
S        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[14];
S        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[15];
S        /* round 4: */
S        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[16];
S        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[17];
S        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[18];
S        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[19];
S        /* round 5: */
S        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[20];
S        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[21];
S        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[22];
S        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[23];
S        /* round 6: */
S        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[24];
S        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[25];
S        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[26];
S        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[27];
S        /* round 7: */
S        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[28];
S        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[29];
S        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[30];
S        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[31];
S        /* round 8: */
S        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[32];
S        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[33];
S        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[34];
S        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[35];
S        /* round 9: */
S        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[36];
S        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[37];
S        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[38];
S        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[39];
S    if (key->rounds > 10) {
S        /* round 10: */
S        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[40];
S        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[41];
S        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[42];
S        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[43];
S        /* round 11: */
S        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[44];
S        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[45];
S        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[46];
S        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[47];
S        if (key->rounds > 12) {
S            /* round 12: */
S            s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[48];
S            s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[49];
S            s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[50];
S            s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[51];
S            /* round 13: */
S            t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[52];
S            t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[53];
S            t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[54];
S            t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[55];
S        }
S    }
S    rk += key->rounds << 2;
N#else  /* !FULL_UNROLL */
N    /*
N     * Nr - 1 full rounds:
N     */
N    r = key->rounds >> 1;
N    for (;;) {
N        t0 =
N            Te0[(s0 >> 24)       ] ^
N            Te1[(s1 >> 16) & 0xff] ^
N            Te2[(s2 >>  8) & 0xff] ^
N            Te3[(s3      ) & 0xff] ^
N            rk[4];
N        t1 =
N            Te0[(s1 >> 24)       ] ^
N            Te1[(s2 >> 16) & 0xff] ^
N            Te2[(s3 >>  8) & 0xff] ^
N            Te3[(s0      ) & 0xff] ^
N            rk[5];
N        t2 =
N            Te0[(s2 >> 24)       ] ^
N            Te1[(s3 >> 16) & 0xff] ^
N            Te2[(s0 >>  8) & 0xff] ^
N            Te3[(s1      ) & 0xff] ^
N            rk[6];
N        t3 =
N            Te0[(s3 >> 24)       ] ^
N            Te1[(s0 >> 16) & 0xff] ^
N            Te2[(s1 >>  8) & 0xff] ^
N            Te3[(s2      ) & 0xff] ^
N            rk[7];
N
N        rk += 8;
N        if (--r == 0) {
N            break;
N        }
N
N        s0 =
N            Te0[(t0 >> 24)       ] ^
N            Te1[(t1 >> 16) & 0xff] ^
N            Te2[(t2 >>  8) & 0xff] ^
N            Te3[(t3      ) & 0xff] ^
N            rk[0];
N        s1 =
N            Te0[(t1 >> 24)       ] ^
N            Te1[(t2 >> 16) & 0xff] ^
N            Te2[(t3 >>  8) & 0xff] ^
N            Te3[(t0      ) & 0xff] ^
N            rk[1];
N        s2 =
N            Te0[(t2 >> 24)       ] ^
N            Te1[(t3 >> 16) & 0xff] ^
N            Te2[(t0 >>  8) & 0xff] ^
N            Te3[(t1      ) & 0xff] ^
N            rk[2];
N        s3 =
N            Te0[(t3 >> 24)       ] ^
N            Te1[(t0 >> 16) & 0xff] ^
N            Te2[(t1 >>  8) & 0xff] ^
N            Te3[(t2      ) & 0xff] ^
N            rk[3];
N    }
N#endif /* ?FULL_UNROLL */
N    /*
N         * apply last round and
N         * map cipher state to byte array block:
N         */
N        s0 =
N                (Te4[(t0 >> 24)       ] & 0xff000000) ^
N                (Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
N                (Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
N                (Te4[(t3      ) & 0xff] & 0x000000ff) ^
N                rk[0];
N        PUTU32(out     , s0);
X        { (out)[0] = (uint8_t)((s0) >> 24); (out)[1] = (uint8_t)((s0) >> 16); (out)[2] = (uint8_t)((s0) >> 8); (out)[3] = (uint8_t)(s0); };
N        s1 =
N                (Te4[(t1 >> 24)       ] & 0xff000000) ^
N                (Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
N                (Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
N                (Te4[(t0      ) & 0xff] & 0x000000ff) ^
N                rk[1];
N        PUTU32(out +  4, s1);
X        { (out + 4)[0] = (uint8_t)((s1) >> 24); (out + 4)[1] = (uint8_t)((s1) >> 16); (out + 4)[2] = (uint8_t)((s1) >> 8); (out + 4)[3] = (uint8_t)(s1); };
N        s2 =
N                (Te4[(t2 >> 24)       ] & 0xff000000) ^
N                (Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
N                (Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
N                (Te4[(t1      ) & 0xff] & 0x000000ff) ^
N                rk[2];
N        PUTU32(out +  8, s2);
X        { (out + 8)[0] = (uint8_t)((s2) >> 24); (out + 8)[1] = (uint8_t)((s2) >> 16); (out + 8)[2] = (uint8_t)((s2) >> 8); (out + 8)[3] = (uint8_t)(s2); };
N        s3 =
N                (Te4[(t3 >> 24)       ] & 0xff000000) ^
N                (Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
N                (Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
N                (Te4[(t2      ) & 0xff] & 0x000000ff) ^
N                rk[3];
N        PUTU32(out + 12, s3);
X        { (out + 12)[0] = (uint8_t)((s3) >> 24); (out + 12)[1] = (uint8_t)((s3) >> 16); (out + 12)[2] = (uint8_t)((s3) >> 8); (out + 12)[3] = (uint8_t)(s3); };
N}
N
N/*
N * Decrypt a single block
N * in and out can overlap
N */
Nvoid AES_decrypt(const unsigned char *in, unsigned char *out,
N                 const AES_KEY *key) {
N
N        const uint32_t *rk;
N        uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
N#ifndef FULL_UNROLL
N        int r;
N#endif /* ?FULL_UNROLL */
N
N        //assert(in && out && key);
N        rk = key->rd_key;
N
N        /*
N         * map byte array block to cipher state
N         * and add initial round key:
N         */
N    s0 = GETU32(in     ) ^ rk[0];
X    s0 = (((uint32_t)(in)[0] << 24) ^ ((uint32_t)(in)[1] << 16) ^ ((uint32_t)(in)[2] << 8) ^ ((uint32_t)(in)[3])) ^ rk[0];
N    s1 = GETU32(in +  4) ^ rk[1];
X    s1 = (((uint32_t)(in + 4)[0] << 24) ^ ((uint32_t)(in + 4)[1] << 16) ^ ((uint32_t)(in + 4)[2] << 8) ^ ((uint32_t)(in + 4)[3])) ^ rk[1];
N    s2 = GETU32(in +  8) ^ rk[2];
X    s2 = (((uint32_t)(in + 8)[0] << 24) ^ ((uint32_t)(in + 8)[1] << 16) ^ ((uint32_t)(in + 8)[2] << 8) ^ ((uint32_t)(in + 8)[3])) ^ rk[2];
N    s3 = GETU32(in + 12) ^ rk[3];
X    s3 = (((uint32_t)(in + 12)[0] << 24) ^ ((uint32_t)(in + 12)[1] << 16) ^ ((uint32_t)(in + 12)[2] << 8) ^ ((uint32_t)(in + 12)[3])) ^ rk[3];
N#ifdef FULL_UNROLL
S    /* round 1: */
S    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[ 4];
S    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[ 5];
S    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[ 6];
S    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[ 7];
S    /* round 2: */
S    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[ 8];
S    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[ 9];
S    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[10];
S    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[11];
S    /* round 3: */
S    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[12];
S    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[13];
S    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[14];
S    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[15];
S    /* round 4: */
S    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[16];
S    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[17];
S    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[18];
S    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[19];
S    /* round 5: */
S    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[20];
S    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[21];
S    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[22];
S    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[23];
S    /* round 6: */
S    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[24];
S    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[25];
S    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[26];
S    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[27];
S    /* round 7: */
S    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[28];
S    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[29];
S    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[30];
S    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[31];
S    /* round 8: */
S    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[32];
S    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[33];
S    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[34];
S    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[35];
S    /* round 9: */
S    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[36];
S    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[37];
S    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[38];
S    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[39];
S    if (key->rounds > 10) {
S        /* round 10: */
S        s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[40];
S        s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[41];
S        s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[42];
S        s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[43];
S        /* round 11: */
S        t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[44];
S        t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[45];
S        t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[46];
S        t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[47];
S        if (key->rounds > 12) {
S            /* round 12: */
S            s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[48];
S            s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[49];
S            s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[50];
S            s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[51];
S            /* round 13: */
S            t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[52];
S            t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[53];
S            t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[54];
S            t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[55];
S        }
S    }
S        rk += key->rounds << 2;
N#else  /* !FULL_UNROLL */
N    /*
N     * Nr - 1 full rounds:
N     */
N    r = key->rounds >> 1;
N    for (;;) {
N        t0 =
N            Td0[(s0 >> 24)       ] ^
N            Td1[(s3 >> 16) & 0xff] ^
N            Td2[(s2 >>  8) & 0xff] ^
N            Td3[(s1      ) & 0xff] ^
N            rk[4];
N        t1 =
N            Td0[(s1 >> 24)       ] ^
N            Td1[(s0 >> 16) & 0xff] ^
N            Td2[(s3 >>  8) & 0xff] ^
N            Td3[(s2      ) & 0xff] ^
N            rk[5];
N        t2 =
N            Td0[(s2 >> 24)       ] ^
N            Td1[(s1 >> 16) & 0xff] ^
N            Td2[(s0 >>  8) & 0xff] ^
N            Td3[(s3      ) & 0xff] ^
N            rk[6];
N        t3 =
N            Td0[(s3 >> 24)       ] ^
N            Td1[(s2 >> 16) & 0xff] ^
N            Td2[(s1 >>  8) & 0xff] ^
N            Td3[(s0      ) & 0xff] ^
N            rk[7];
N
N        rk += 8;
N        if (--r == 0) {
N            break;
N        }
N
N        s0 =
N            Td0[(t0 >> 24)       ] ^
N            Td1[(t3 >> 16) & 0xff] ^
N            Td2[(t2 >>  8) & 0xff] ^
N            Td3[(t1      ) & 0xff] ^
N            rk[0];
N        s1 =
N            Td0[(t1 >> 24)       ] ^
N            Td1[(t0 >> 16) & 0xff] ^
N            Td2[(t3 >>  8) & 0xff] ^
N            Td3[(t2      ) & 0xff] ^
N            rk[1];
N        s2 =
N            Td0[(t2 >> 24)       ] ^
N            Td1[(t1 >> 16) & 0xff] ^
N            Td2[(t0 >>  8) & 0xff] ^
N            Td3[(t3      ) & 0xff] ^
N            rk[2];
N        s3 =
N            Td0[(t3 >> 24)       ] ^
N            Td1[(t2 >> 16) & 0xff] ^
N            Td2[(t1 >>  8) & 0xff] ^
N            Td3[(t0      ) & 0xff] ^
N            rk[3];
N    }
N#endif /* ?FULL_UNROLL */
N    /*
N         * apply last round and
N         * map cipher state to byte array block:
N         */
N        s0 =
N                (Td4[(t0 >> 24)       ] & 0xff000000) ^
N                (Td4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
N                (Td4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
N                (Td4[(t1      ) & 0xff] & 0x000000ff) ^
N                rk[0];
N        PUTU32(out     , s0);
X        { (out)[0] = (uint8_t)((s0) >> 24); (out)[1] = (uint8_t)((s0) >> 16); (out)[2] = (uint8_t)((s0) >> 8); (out)[3] = (uint8_t)(s0); };
N        s1 =
N                (Td4[(t1 >> 24)       ] & 0xff000000) ^
N                (Td4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
N                (Td4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
N                (Td4[(t2      ) & 0xff] & 0x000000ff) ^
N                rk[1];
N        PUTU32(out +  4, s1);
X        { (out + 4)[0] = (uint8_t)((s1) >> 24); (out + 4)[1] = (uint8_t)((s1) >> 16); (out + 4)[2] = (uint8_t)((s1) >> 8); (out + 4)[3] = (uint8_t)(s1); };
N        s2 =
N                (Td4[(t2 >> 24)       ] & 0xff000000) ^
N                (Td4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
N                (Td4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
N                (Td4[(t3      ) & 0xff] & 0x000000ff) ^
N                rk[2];
N        PUTU32(out +  8, s2);
X        { (out + 8)[0] = (uint8_t)((s2) >> 24); (out + 8)[1] = (uint8_t)((s2) >> 16); (out + 8)[2] = (uint8_t)((s2) >> 8); (out + 8)[3] = (uint8_t)(s2); };
N        s3 =
N                (Td4[(t3 >> 24)       ] & 0xff000000) ^
N                (Td4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
N                (Td4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
N                (Td4[(t0      ) & 0xff] & 0x000000ff) ^
N                rk[3];
N        PUTU32(out + 12, s3);
X        { (out + 12)[0] = (uint8_t)((s3) >> 24); (out + 12)[1] = (uint8_t)((s3) >> 16); (out + 12)[2] = (uint8_t)((s3) >> 8); (out + 12)[3] = (uint8_t)(s3); };
N}
N
N#endif /* AES_ASM */
N
Nvoid AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
N                     const unsigned long length, const AES_KEY *key,
N                     unsigned char *ivec, const int enc)
N{
N
N        unsigned long n;
N        unsigned long len = length;
N        unsigned char tmp[AES_BLOCK_SIZE];
X        unsigned char tmp[16];
N
N        //assert(in && out && key && ivec);
N
N        if (enc) 
N		{
N                while (len >= AES_BLOCK_SIZE) 
X                while (len >= 16) 
N				{
N                        for(n=0; n < AES_BLOCK_SIZE; ++n)
X                        for(n=0; n < 16; ++n)
N                                tmp[n] = in[n] ^ ivec[n];
N                        AES_encrypt(tmp, out, key);
N                        memcpy(ivec, out, AES_BLOCK_SIZE);
X                        memcpy(ivec, out, 16);
N                        len -= AES_BLOCK_SIZE;
X                        len -= 16;
N                        in += AES_BLOCK_SIZE;
X                        in += 16;
N                        out += AES_BLOCK_SIZE;
X                        out += 16;
N                }
N                if (len) 
N				{
N                        for(n=0; n < len; ++n)
N                                tmp[n] = in[n] ^ ivec[n];
N                        for(n=len; n < AES_BLOCK_SIZE; ++n)
X                        for(n=len; n < 16; ++n)
N                                tmp[n] = ivec[n];
N                        AES_encrypt(tmp, tmp, key);
N                        memcpy(out, tmp, AES_BLOCK_SIZE);
X                        memcpy(out, tmp, 16);
N                        memcpy(ivec, tmp, AES_BLOCK_SIZE);
X                        memcpy(ivec, tmp, 16);
N                }
N        }
N		else 
N		{
N                while (len >= AES_BLOCK_SIZE) 
X                while (len >= 16) 
N				{
N                        memcpy(tmp, in, AES_BLOCK_SIZE);
X                        memcpy(tmp, in, 16);
N                        AES_decrypt(in, out, key);
N                        for(n=0; n < AES_BLOCK_SIZE; ++n)
X                        for(n=0; n < 16; ++n)
N                                out[n] ^= ivec[n];
N                        memcpy(ivec, tmp, AES_BLOCK_SIZE);
X                        memcpy(ivec, tmp, 16);
N                        len -= AES_BLOCK_SIZE;
X                        len -= 16;
N                        in += AES_BLOCK_SIZE;
X                        in += 16;
N                        out += AES_BLOCK_SIZE;
X                        out += 16;
N                }
N                if (len) 
N				{
N                        memcpy(tmp, in, AES_BLOCK_SIZE);
X                        memcpy(tmp, in, 16);
N                        AES_decrypt(tmp, tmp, key);
N                        for(n=0; n < len; ++n)
N                                out[n] = tmp[n] ^ ivec[n];
N                        memcpy(ivec, tmp, AES_BLOCK_SIZE);
X                        memcpy(ivec, tmp, 16);
N                }
N        }
N}
