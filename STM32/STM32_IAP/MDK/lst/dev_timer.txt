; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\dev_timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\dev_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\user -I..\dev -I..\lib\inc -I..\core_cm3 -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\dev_timer.crf ..\dev\dev_timer.c]
                          THUMB

                          AREA ||i.TIM2_Cap_Init||, CODE, READONLY, ALIGN=1

                  TIM2_Cap_Init PROC
;;;28     *******************************************************************************/
;;;29     void TIM2_Cap_Init(u16 psc)
000000  b53e              PUSH     {r1-r5,lr}
;;;30     {
000002  4604              MOV      r4,r0
;;;31     	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;32     	
;;;33     	//时钟使能
;;;34     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3, ENABLE);	//使能 TIM2 和 TIM3时钟 
000004  2101              MOVS     r1,#1
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;35     		
;;;36     	//初始化 TIM 参数
;;;37     	TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;							//设定计数器自动重装值 
00000c  f64f70ff          MOV      r0,#0xffff
000010  f8ad0004          STRH     r0,[sp,#4]
;;;38     	TIM_TimeBaseStructure.TIM_Prescaler     = psc;								//预分频器
000014  f8ad4000          STRH     r4,[sp,#0]
;;;39     	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;						//TDTS = Tck_tim
000018  2000              MOVS     r0,#0
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;40     	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;				//TIM 向上计数模式
00001e  f8ad0002          STRH     r0,[sp,#2]
;;;41     	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);								//初始化 TIMx
000022  4669              MOV      r1,sp
000024  f04f4080          MOV      r0,#0x40000000
000028  f7fffffe          BL       TIM_TimeBaseInit
;;;42     
;;;43     	TIM_ClearFlag(TIM2, TIM_FLAG_Update);										//清除更新标志位 
00002c  2101              MOVS     r1,#1
00002e  0788              LSLS     r0,r1,#30
000030  f7fffffe          BL       TIM_ClearFlag
;;;44     	TIM_ClearITPendingBit(TIM2, TIM_FLAG_Update);								//清除TIM2等待中断更新中断标志位
000034  2101              MOVS     r1,#1
000036  0788              LSLS     r0,r1,#30
000038  f7fffffe          BL       TIM_ClearITPendingBit
;;;45     
;;;46     	TIM_Cmd(TIM2, ENABLE);														//使能定时器
00003c  2101              MOVS     r1,#1
00003e  0788              LSLS     r0,r1,#30
000040  f7fffffe          BL       TIM_Cmd
;;;47     	
;;;48     }  
000044  bd3e              POP      {r1-r5,pc}
;;;49     
                          ENDP


                          AREA ||i.TIM3_Cnt_Init||, CODE, READONLY, ALIGN=2

                  TIM3_Cnt_Init PROC
;;;58     *******************************************************************************/
;;;59     void TIM3_Cnt_Init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;60     {
;;;61     	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;62     	NVIC_InitTypeDef NVIC_InitStructure;
;;;63     
;;;64     	// 使能TIM3时钟
;;;65     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;66     	
;;;67     	TIM_TimeBaseStructure.TIM_Period        = 1499;								//设定的最大计数值，定时1.5秒
00000a  f24050db          MOV      r0,#0x5db
00000e  f8ad0008          STRH     r0,[sp,#8]
;;;68     	TIM_TimeBaseStructure.TIM_Prescaler     = 35999;							//分频35999，at 1.00 Khz
000012  f648409f          MOV      r0,#0x8c9f
000016  f8ad0004          STRH     r0,[sp,#4]
;;;69     	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;						//时钟分割
00001a  2000              MOVS     r0,#0
00001c  f8ad000a          STRH     r0,[sp,#0xa]
;;;70     	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;				//计数方向向上计数
000020  f8ad0006          STRH     r0,[sp,#6]
;;;71     	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
000024  a901              ADD      r1,sp,#4
000026  4812              LDR      r0,|L2.112|
000028  f7fffffe          BL       TIM_TimeBaseInit
;;;72     
;;;73     	TIM_ClearFlag(TIM3, TIM_FLAG_Update);										/*清除更新标志位*/ 
00002c  2101              MOVS     r1,#1
00002e  4810              LDR      r0,|L2.112|
000030  f7fffffe          BL       TIM_ClearFlag
;;;74     	TIM_ClearITPendingBit(TIM3, TIM_FLAG_Update);								//清除TIM2等待中断更新中断标志位
000034  2101              MOVS     r1,#1
000036  480e              LDR      r0,|L2.112|
000038  f7fffffe          BL       TIM_ClearITPendingBit
;;;75     
;;;76     	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);									//使能TIM2的更新
00003c  2201              MOVS     r2,#1
00003e  4611              MOV      r1,r2
000040  480b              LDR      r0,|L2.112|
000042  f7fffffe          BL       TIM_ITConfig
;;;77     	
;;;78     	// 设定TIM3中断优先级
;;;79         NVIC_InitStructure.NVIC_IRQChannel                   = TIM3_IRQn;
000046  201d              MOVS     r0,#0x1d
000048  f88d0000          STRB     r0,[sp,#0]
;;;80         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
00004c  2001              MOVS     r0,#1
00004e  f88d0001          STRB     r0,[sp,#1]
;;;81         NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
000052  2000              MOVS     r0,#0
000054  f88d0002          STRB     r0,[sp,#2]
;;;82         NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
000058  2001              MOVS     r0,#1
00005a  f88d0003          STRB     r0,[sp,#3]
;;;83         NVIC_Init(&NVIC_InitStructure);  
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       NVIC_Init
;;;84       
;;;85     	TIM_Cmd(TIM3, DISABLE);														//TIM3 disable counter
000064  2100              MOVS     r1,#0
000066  4802              LDR      r0,|L2.112|
000068  f7fffffe          BL       TIM_Cmd
;;;86     }
00006c  bd1f              POP      {r0-r4,pc}
;;;87     
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      0x40000400

;*** Start embedded assembler ***

#line 1 "..\\dev\\dev_timer.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_dev_timer_c_cb0c5d9c____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_dev_timer_c_cb0c5d9c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_dev_timer_c_cb0c5d9c____REVSH|
#line 144
|__asm___11_dev_timer_c_cb0c5d9c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
