L 1 "..\user\sha1.c"
N#include <string.h>
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5030076
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;
N#elif !defined(__size_t)
S  #define __size_t 1
S  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 2 "..\user\sha1.c" 2
N#include <stdint.h>
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
N
L 3 "..\user\sha1.c" 2
N#include "sha1.h"
L 1 "..\user\sha1.h" 1
N#ifndef _SHA1_H
N#define _SHA1_H
N
N#include <stdint.h>
N
N#define SHA1_HASH_SIZE 20
N
N/* Hash size in 32-bit words */
N#define SHA1_HASH_WORDS 5
N
Nstruct _SHA1Context {
N  uint64_t totalLength;
N  uint32_t hash[SHA1_HASH_WORDS];
X  uint32_t hash[5];
N  uint32_t bufferLength;
N  union {
N    uint32_t words[16];
N    uint8_t bytes[64];
N  } buffer;
N#ifdef RUNTIME_ENDIAN
S  int littleEndian;
N#endif /* RUNTIME_ENDIAN */
N};
N
Ntypedef struct _SHA1Context SHA1Context;
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Nvoid SHA1Init (SHA1Context *sc);
Nvoid SHA1Update (SHA1Context *sc, const void *data, uint32_t len);
Nvoid SHA1Final (SHA1Context *sc, uint8_t hash[SHA1_HASH_SIZE]);
Xvoid SHA1Final (SHA1Context *sc, uint8_t hash[20]);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* _SHA1_H */
L 4 "..\user\sha1.c" 2
N//#include "core_cm3.h"
N
N
N#define ROTL(x, n) (((x) << (n)) | ((x) >> (32 - (n))))
N#define ROTR(x, n) (((x) >> (n)) | ((x) << (32 - (n))))
N
N#define F_0_19(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))
N#define F_20_39(x, y, z) ((x) ^ (y) ^ (z))
N#define F_40_59(x, y, z) (((x) & ((y) | (z))) | ((y) & (z)))
N#define F_60_79(x, y, z) ((x) ^ (y) ^ (z))
N
N#define DO_ROUND(F, K) { \
N  temp = ROTL(a, 5) + F(b, c, d) + e + *(W++) + K; \
N  e = d; \
N  d = c; \
N  c = ROTL(b, 30); \
N  b = a; \
N  a = temp; \
N}
X#define DO_ROUND(F, K) {   temp = ROTL(a, 5) + F(b, c, d) + e + *(W++) + K;   e = d;   d = c;   c = ROTL(b, 30);   b = a;   a = temp; }
N
N#define K_0_19 0x5a827999L
N#define K_20_39 0x6ed9eba1L
N#define K_40_59 0x8f1bbcdcL
N#define K_60_79 0xca62c1d6L
N
N#ifndef RUNTIME_ENDIAN
N
N#ifdef WORDS_BIGENDIAN
S
S#define BYTESWAP(x) (x)
S#define BYTESWAP64(x) (x)
S
N#else /* WORDS_BIGENDIAN */
N
N#define BYTESWAP(x) ((ROTR((x), 8) & 0xff00ff00L) | \
N		     (ROTL((x), 8) & 0x00ff00ffL))
X#define BYTESWAP(x) ((ROTR((x), 8) & 0xff00ff00L) | 		     (ROTL((x), 8) & 0x00ff00ffL))
N#define BYTESWAP64(x) _byteswap64(x)
N
N#if defined ( __CC_ARM   )
X#if 1L
Nstatic __inline uint64_t _byteswap64(uint64_t x)
N#else
S#pragma inline
Sstatic uint64_t _byteswap64(uint64_t x)
N#endif
N{
N  uint32_t a = x >> 32;
N  uint32_t b = (uint32_t) x;
N  return ((uint64_t) BYTESWAP(b) << 32) | (uint64_t) BYTESWAP(a);
X  return ((uint64_t) ((((((b)) >> (8)) | (((b)) << (32 - (8)))) & 0xff00ff00L) | (((((b)) << (8)) | (((b)) >> (32 - (8)))) & 0x00ff00ffL)) << 32) | (uint64_t) ((((((a)) >> (8)) | (((a)) << (32 - (8)))) & 0xff00ff00L) | (((((a)) << (8)) | (((a)) >> (32 - (8)))) & 0x00ff00ffL));
N}
N
N#endif /* WORDS_BIGENDIAN */
N
N#else /* !RUNTIME_ENDIAN */
S
S#define BYTESWAP(x) _byteswap(sc->littleEndian, x)
S#define BYTESWAP64(x) _byteswap64(sc->littleEndian, x)
S
S#define _BYTESWAP(x) ((ROTR((x), 8) & 0xff00ff00L) | \
S		      (ROTL((x), 8) & 0x00ff00ffL))
X#define _BYTESWAP(x) ((ROTR((x), 8) & 0xff00ff00L) | 		      (ROTL((x), 8) & 0x00ff00ffL))
S#define _BYTESWAP64(x) __byteswap64(x)
S
Sstatic inline uint64_t __byteswap64(uint64_t x)
S{
S  uint32_t a = x >> 32;
S  uint32_t b = (uint32_t) x;
S  return ((uint64_t) _BYTESWAP(b) << 32) | (uint64_t) _BYTESWAP(a);
S}
S
Sstatic inline uint32_t _byteswap(int littleEndian, uint32_t x)
S{
S  if (!littleEndian)
S    return x;
S  else
S    return _BYTESWAP(x);
S}
S
Sstatic inline uint64_t _byteswap64(int littleEndian, uint64_t x)
S{
S  if (!littleEndian)
S    return x;
S  else
S    return _BYTESWAP64(x);
S}
S
Sstatic inline void setEndian(int *littleEndianp)
S{
S  union {
S    uint32_t w;
S    uint8_t b[4];
S  } endian;
S
S  endian.w = 1L;
S  *littleEndianp = endian.b[0] != 0;
S}
S
N#endif /* !RUNTIME_ENDIAN */
N
Nstatic const uint8_t padding[64] = {
N  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
N};
N
Nvoid
NSHA1Init (SHA1Context *sc)
N{
N#ifdef RUNTIME_ENDIAN
S  setEndian (&sc->littleEndian);
N#endif /* RUNTIME_ENDIAN */
N
N  sc->totalLength = 0LL;
N  sc->hash[0] = 0x67452301L;
N  sc->hash[1] = 0xefcdab89L;
N  sc->hash[2] = 0x98badcfeL;
N  sc->hash[3] = 0x10325476L;
N  sc->hash[4] = 0xc3d2e1f0L;
N  sc->bufferLength = 0L;
N}
N
Nstatic void
NburnStack (int size)
N{
N  char buf[128];
N
N  memset (buf, 0, sizeof (buf));
N  size -= sizeof (buf);
N  if (size > 0)
N    burnStack (size);
N}
N
Nstatic void
NSHA1Guts (SHA1Context *sc, const uint32_t *cbuf)
N{
N  uint32_t buf[80];
N  uint32_t *W, *W3, *W8, *W14, *W16;
N  uint32_t a, b, c, d, e, temp;
N  int i;
N
N  W = buf;
N
N  for (i = 15; i >= 0; i--) {
N    *(W++) = BYTESWAP(*cbuf);
X    *(W++) = ((((((*cbuf)) >> (8)) | (((*cbuf)) << (32 - (8)))) & 0xff00ff00L) | (((((*cbuf)) << (8)) | (((*cbuf)) >> (32 - (8)))) & 0x00ff00ffL));
N    cbuf++;
N  }
N
N  W16 = &buf[0];
N  W14 = &buf[2];
N  W8 = &buf[8];
N  W3 = &buf[13];
N
N  for (i = 63; i >= 0; i--) {
N    *W = *(W3++) ^ *(W8++) ^ *(W14++) ^ *(W16++);
N    *W = ROTL(*W, 1);
X    *W = (((*W) << (1)) | ((*W) >> (32 - (1))));
N    W++;
N  }
N
N  a = sc->hash[0];
N  b = sc->hash[1];
N  c = sc->hash[2];
N  d = sc->hash[3];
N  e = sc->hash[4];
N
N  W = buf;
N
N#ifndef SHA1_UNROLL
N#define SHA1_UNROLL 20
N#endif /* !SHA1_UNROLL */
N
N#if SHA1_UNROLL == 1
X#if 20 == 1
S  for (i = 19; i >= 0; i--)
S    DO_ROUND(F_0_19, K_0_19);
S
S  for (i = 19; i >= 0; i--)
S    DO_ROUND(F_20_39, K_20_39);
S
S  for (i = 19; i >= 0; i--)
S    DO_ROUND(F_40_59, K_40_59);
S
S  for (i = 19; i >= 0; i--)
S    DO_ROUND(F_60_79, K_60_79);
S#elif SHA1_UNROLL == 2
X#elif 20 == 2
S  for (i = 9; i >= 0; i--) {
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S  }
S
S  for (i = 9; i >= 0; i--) {
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S  }
S
S  for (i = 9; i >= 0; i--) {
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S  }
S
S  for (i = 9; i >= 0; i--) {
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S  }
S#elif SHA1_UNROLL == 4
X#elif 20 == 4
S  for (i = 4; i >= 0; i--) {
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S  }
S
S  for (i = 4; i >= 0; i--) {
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S  }
S
S  for (i = 4; i >= 0; i--) {
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S  }
S
S  for (i = 4; i >= 0; i--) {
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S  }
S#elif SHA1_UNROLL == 5
X#elif 20 == 5
S  for (i = 3; i >= 0; i--) {
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S  }
S
S  for (i = 3; i >= 0; i--) {
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S  }
S
S  for (i = 3; i >= 0; i--) {
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S  }
S
S  for (i = 3; i >= 0; i--) {
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S  }
S#elif SHA1_UNROLL == 10
X#elif 20 == 10
S  for (i = 1; i >= 0; i--) {
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S    DO_ROUND(F_0_19, K_0_19);
S  }
S
S  for (i = 1; i >= 0; i--) {
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S    DO_ROUND(F_20_39, K_20_39);
S  }
S
S  for (i = 1; i >= 0; i--) {
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S    DO_ROUND(F_40_59, K_40_59);
S  }
S
S  for (i = 1; i >= 0; i--) {
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S    DO_ROUND(F_60_79, K_60_79);
S  }
N#elif SHA1_UNROLL == 20
X#elif 20 == 20
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_0_19, K_0_19);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((d) ^ ((b) & ((c) ^ (d)))) + e + *(W++) + 0x5a827999L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_20_39, K_20_39);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0x6ed9eba1L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_40_59, K_40_59);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + (((b) & ((c) | (d))) | ((c) & (d))) + e + *(W++) + 0x8f1bbcdcL; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N  DO_ROUND(F_60_79, K_60_79);
X  { temp = (((a) << (5)) | ((a) >> (32 - (5)))) + ((b) ^ (c) ^ (d)) + e + *(W++) + 0xca62c1d6L; e = d; d = c; c = (((b) << (30)) | ((b) >> (32 - (30)))); b = a; a = temp; };
N#else /* SHA1_UNROLL */
S#error SHA1_UNROLL must be 1, 2, 4, 5, 10 or 20!
N#endif
N
N  sc->hash[0] += a;
N  sc->hash[1] += b;
N  sc->hash[2] += c;
N  sc->hash[3] += d;
N  sc->hash[4] += e;
N}
N
Nvoid
NSHA1Update (SHA1Context *sc, const void *vdata, uint32_t len)
N{
N  const uint8_t *data = vdata;
N  uint32_t bufferBytesLeft;
N  uint32_t bytesToCopy;
N  int needBurn = 0;
N
N#ifdef SHA1_FAST_COPY
S  if (sc->bufferLength) {
S    bufferBytesLeft = 64L - sc->bufferLength;
S
S    bytesToCopy = bufferBytesLeft;
S    if (bytesToCopy > len)
S      bytesToCopy = len;
S
S    memcpy (&sc->buffer.bytes[sc->bufferLength], data, bytesToCopy);
S
S    sc->totalLength += bytesToCopy * 8L;
S
S    sc->bufferLength += bytesToCopy;
S    data += bytesToCopy;
S    len -= bytesToCopy;
S
S    if (sc->bufferLength == 64L) {
S      SHA1Guts (sc, sc->buffer.words);
S      needBurn = 1;
S      sc->bufferLength = 0L;
S    }
S  }
S
S  while (len > 63) {
S    sc->totalLength += 512L;
S
S    SHA1Guts (sc, data);
S    needBurn = 1;
S
S    data += 64L;
S    len -= 64L;
S  }
S
S  if (len) {
S    memcpy (&sc->buffer.bytes[sc->bufferLength], data, len);
S
S    sc->totalLength += len * 8L;
S
S    sc->bufferLength += len;
S  }
N#else /* SHA1_FAST_COPY */
N  while (len) {
N    bufferBytesLeft = 64L - sc->bufferLength;
N
N    bytesToCopy = bufferBytesLeft;
N    if (bytesToCopy > len)
N      bytesToCopy = len;
N
N    memcpy (&sc->buffer.bytes[sc->bufferLength], data, bytesToCopy);
N
N    sc->totalLength += bytesToCopy * 8L;
N
N    sc->bufferLength += bytesToCopy;
N    data += bytesToCopy;
N    len -= bytesToCopy;
N
N    if (sc->bufferLength == 64L) {
N      SHA1Guts (sc, sc->buffer.words);
N      needBurn = 1;
N      sc->bufferLength = 0L;
N    }
N  }
N#endif /* SHA1_FAST_COPY */
N
N  if (needBurn)
N    burnStack (sizeof (uint32_t[86]) + sizeof (uint32_t *[5]) + sizeof (int));
N}
N
Nvoid
NSHA1Final (SHA1Context *sc, uint8_t hash[SHA1_HASH_SIZE])
XSHA1Final (SHA1Context *sc, uint8_t hash[20])
N{
N  uint32_t bytesToPad;
N  uint64_t lengthPad;
N  int i;
N
N  bytesToPad = 120L - sc->bufferLength;
N  if (bytesToPad > 64L)
N    bytesToPad -= 64L;
N
N  lengthPad = BYTESWAP64(sc->totalLength);
X  lengthPad = _byteswap64(sc->totalLength);
N
N  SHA1Update (sc, padding, bytesToPad);
N  SHA1Update (sc, &lengthPad, 8L);
N
N  if (hash) {
N    for (i = 0; i < SHA1_HASH_WORDS; i++) {
X    for (i = 0; i < 5; i++) {
N#ifdef SHA1_FAST_COPY
S      *((uint32_t *) hash) = BYTESWAP(sc->hash[i]);
N#else /* SHA1_FAST_COPY */
N      hash[0] = (uint8_t) (sc->hash[i] >> 24);
N      hash[1] = (uint8_t) (sc->hash[i] >> 16);
N      hash[2] = (uint8_t) (sc->hash[i] >> 8);
N      hash[3] = (uint8_t) sc->hash[i];
N#endif /* SHA1_FAST_COPY */
N      hash += 4;
N    }
N  }
N}
N
