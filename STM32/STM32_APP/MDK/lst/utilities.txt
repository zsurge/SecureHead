; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\utilities.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\utilities.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\user -I..\dev -I..\lib\inc -I..\core_cm3 -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\utilities.crf ..\user\utilities.c]
                          THUMB

                          AREA ||i.GetIK||, CODE, READONLY, ALIGN=2

                  GetIK PROC
;;;141    
;;;142    void GetIK(uint8_t *pBKSN,uint8_t *pBDK, uint8_t *pBIK)
000000  b570              PUSH     {r4-r6,lr}
;;;143    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;144    	unsigned char tmpKEY[8];
;;;145    	unsigned char TMP[16];
;;;146    	unsigned char toXO[] = {0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00};
00000a  a31a              ADR      r3,|L1.116|
00000c  cb0f              LDM      r3,{r0-r3}
00000e  e88d000f          STM      sp,{r0-r3}
;;;147    	memcpy(tmpKEY,pBKSN,8);
000012  6820              LDR      r0,[r4,#0]
000014  9008              STR      r0,[sp,#0x20]
000016  6860              LDR      r0,[r4,#4]
000018  9009              STR      r0,[sp,#0x24]
;;;148    	tmpKEY[7] &= 0xE0;
00001a  f89d0027          LDRB     r0,[sp,#0x27]
00001e  f00000e0          AND      r0,r0,#0xe0
000022  f88d0027          STRB     r0,[sp,#0x27]
;;;149    	tri_des(tmpKEY,pBDK,pBDK+8,0);
000026  2300              MOVS     r3,#0
000028  f1060208          ADD      r2,r6,#8
00002c  4631              MOV      r1,r6
00002e  a808              ADD      r0,sp,#0x20
000030  f7fffffe          BL       tri_des
;;;150    	memcpy(pBIK,tmpKEY,8);
000034  9808              LDR      r0,[sp,#0x20]
000036  6028              STR      r0,[r5,#0]
000038  9809              LDR      r0,[sp,#0x24]
00003a  6068              STR      r0,[r5,#4]
;;;151    	GetXORKey(pBDK,toXO,TMP,16);
00003c  2310              MOVS     r3,#0x10
00003e  aa04              ADD      r2,sp,#0x10
000040  4669              MOV      r1,sp
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       GetXORKey
;;;152    	memcpy(tmpKEY,pBKSN,8);
000048  6820              LDR      r0,[r4,#0]
00004a  9008              STR      r0,[sp,#0x20]
00004c  6860              LDR      r0,[r4,#4]
00004e  9009              STR      r0,[sp,#0x24]
;;;153    	tmpKEY[7] &= 0xE0;
000050  f89d0027          LDRB     r0,[sp,#0x27]
000054  f00000e0          AND      r0,r0,#0xe0
000058  f88d0027          STRB     r0,[sp,#0x27]
;;;154    	tri_des(tmpKEY,TMP,TMP+8,0);
00005c  2300              MOVS     r3,#0
00005e  aa06              ADD      r2,sp,#0x18
000060  a904              ADD      r1,sp,#0x10
000062  a808              ADD      r0,sp,#0x20
000064  f7fffffe          BL       tri_des
;;;155    	memcpy(pBIK + 8,tmpKEY,8);
000068  9808              LDR      r0,[sp,#0x20]
00006a  60a8              STR      r0,[r5,#8]
00006c  9809              LDR      r0,[sp,#0x24]
00006e  60e8              STR      r0,[r5,#0xc]
;;;156    }
000070  b00a              ADD      sp,sp,#0x28
000072  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.116|
000074  c0c0c0c0          DCB      192,192,192,192,0
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
00007c  c0c0c0c0          DCB      192,192,192,192,0
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.GetKeyCkeckValue||, CODE, READONLY, ALIGN=1

                  GetKeyCkeckValue PROC
;;;87     
;;;88     void GetKeyCkeckValue(uint8_t *pBKey, uint8_t *pBKCV,int iLength,int iEncryption)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;89     {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;90     	uint8_t *pkey;
;;;91     	uint8_t *block;
;;;92     	
;;;93     	pkey = (uint8_t *)malloc((sizeof(uint8_t))*iLength);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       malloc
000012  4605              MOV      r5,r0
;;;94     	memcpy(pkey,pBKey,iLength);
000014  4622              MOV      r2,r4
000016  4641              MOV      r1,r8
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       __aeabi_memcpy
;;;95     
;;;96     	block = (uint8_t *)malloc((sizeof(uint8_t))*iLength);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       malloc
000024  4607              MOV      r7,r0
;;;97     	memset(block,0,iLength);
000026  4621              MOV      r1,r4
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       __aeabi_memclr
;;;98     
;;;99     	if (iEncryption == ET_TDES_MS || iEncryption == ET_TDES_DUKPT || iEncryption == ET_DES_DUKPT)
00002e  2e01              CMP      r6,#1
000030  d003              BEQ      |L2.58|
000032  2e03              CMP      r6,#3
000034  d001              BEQ      |L2.58|
000036  2e02              CMP      r6,#2
000038  d11e              BNE      |L2.120|
                  |L2.58|
;;;100    	{
;;;101    		if(iLength/8 == 1) 
00003a  17e1              ASRS     r1,r4,#31
00003c  eb047151          ADD      r1,r4,r1,LSR #29
000040  2201              MOVS     r2,#1
000042  ebb20fe1          CMP      r2,r1,ASR #3
000046  d107              BNE      |L2.88|
;;;102    			tri_des(block,pkey,pkey+8,0);
000048  2300              MOVS     r3,#0
00004a  f1050208          ADD      r2,r5,#8
00004e  4629              MOV      r1,r5
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       tri_des
000056  e02c              B        |L2.178|
                  |L2.88|
;;;103    		else
;;;104    		{
;;;105    			tri_des(block,pkey,pkey+8,0);
000058  2300              MOVS     r3,#0
00005a  f1050208          ADD      r2,r5,#8
00005e  4629              MOV      r1,r5
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       tri_des
;;;106    			tri_des(block+8,pkey,pkey+8,0);
000066  2300              MOVS     r3,#0
000068  f1050208          ADD      r2,r5,#8
00006c  4629              MOV      r1,r5
00006e  f1070008          ADD      r0,r7,#8
000072  f7fffffe          BL       tri_des
000076  e01c              B        |L2.178|
                  |L2.120|
;;;107    		}
;;;108    	}
;;;109    	else if (iEncryption == ET_DES_MS )
000078  b9de              CBNZ     r6,|L2.178|
;;;110    	{
;;;111    		if(iLength/8 == 1) 
00007a  17e1              ASRS     r1,r4,#31
00007c  eb047151          ADD      r1,r4,r1,LSR #29
000080  2201              MOVS     r2,#1
000082  ebb20fe1          CMP      r2,r1,ASR #3
000086  d105              BNE      |L2.148|
;;;112    			des(block,pkey,0);
000088  2200              MOVS     r2,#0
00008a  4629              MOV      r1,r5
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       ||des||
000092  e00e              B        |L2.178|
                  |L2.148|
;;;113    		else
;;;114    		{
;;;115    			tri_des(block,pkey,pkey+8,0);
000094  2300              MOVS     r3,#0
000096  f1050208          ADD      r2,r5,#8
00009a  4629              MOV      r1,r5
00009c  4638              MOV      r0,r7
00009e  f7fffffe          BL       tri_des
;;;116    			tri_des(block+8,pkey,pkey+8,0);
0000a2  2300              MOVS     r3,#0
0000a4  f1050208          ADD      r2,r5,#8
0000a8  4629              MOV      r1,r5
0000aa  f1070008          ADD      r0,r7,#8
0000ae  f7fffffe          BL       tri_des
                  |L2.178|
;;;117    		}
;;;118    	}
;;;119    
;;;120    	memcpy(pBKCV,block,3);
0000b2  8838              LDRH     r0,[r7,#0]
0000b4  f8a90000          STRH     r0,[r9,#0]
0000b8  78b8              LDRB     r0,[r7,#2]
0000ba  f8890002          STRB     r0,[r9,#2]
;;;121    
;;;122    	free(pkey);
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       free
;;;123    	free(block);
0000c4  4638              MOV      r0,r7
0000c6  f7fffffe          BL       free
;;;124    }
0000ca  e8bd87f0          POP      {r4-r10,pc}
;;;125    
                          ENDP


                          AREA ||i.GetXORKey||, CODE, READONLY, ALIGN=1

                  GetXORKey PROC
;;;125    
;;;126    void GetXORKey(const unsigned char* pBKey1,const unsigned char* pBKey2,unsigned char* pBOutResult,int iLength)
000000  b5f0              PUSH     {r4-r7,lr}
;;;127    {
000002  4604              MOV      r4,r0
;;;128    	unsigned char*   bTemp;
;;;129    	unsigned char ch1;
;;;130    	unsigned char ch2;
;;;131    	int loop = 0;
000004  2000              MOVS     r0,#0
;;;132    	bTemp = pBOutResult;
000006  4615              MOV      r5,r2
;;;133    	for(loop = 0 ; loop < iLength; loop++)
000008  bf00              NOP      
00000a  e007              B        |L3.28|
                  |L3.12|
;;;134    	{
;;;135    		ch1 = *(pBKey1 + loop);
00000c  5c27              LDRB     r7,[r4,r0]
;;;136    		ch2 = *(pBKey2 + loop);
00000e  5c0e              LDRB     r6,[r1,r0]
;;;137    		*bTemp = (ch1)^(ch2);
000010  ea870c06          EOR      r12,r7,r6
000014  f885c000          STRB     r12,[r5,#0]
;;;138    		bTemp++;
000018  1c6d              ADDS     r5,r5,#1
00001a  1c40              ADDS     r0,r0,#1              ;133
                  |L3.28|
00001c  4298              CMP      r0,r3                 ;133
00001e  dbf5              BLT      |L3.12|
;;;139    	}
;;;140    }
000020  bdf0              POP      {r4-r7,pc}
;;;141    
                          ENDP


                          AREA ||i.from64tobits||, CODE, READONLY, ALIGN=2

                  from64tobits PROC
;;;39     
;;;40     int from64tobits(uint8_t *out, uint8_t *in, int maxlen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;41     {
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
;;;42         int len = 0;
000008  2600              MOVS     r6,#0
;;;43         uint8_t digit1, digit2, digit3, digit4;
;;;44     	
;;;45         if (in[0] == '+' && in[1] == ' ')
00000a  7808              LDRB     r0,[r1,#0]
00000c  282b              CMP      r0,#0x2b
00000e  d103              BNE      |L4.24|
000010  7848              LDRB     r0,[r1,#1]
000012  2820              CMP      r0,#0x20
000014  d100              BNE      |L4.24|
;;;46     		in += 2;
000016  1c89              ADDS     r1,r1,#2
                  |L4.24|
;;;47         if (*in == '\r')
000018  7808              LDRB     r0,[r1,#0]
00001a  280d              CMP      r0,#0xd
00001c  d102              BNE      |L4.36|
;;;48     		return(0);
00001e  2000              MOVS     r0,#0
                  |L4.32|
;;;49     	
;;;50         do {
;;;51     		digit1 = in[0];
;;;52     		if (DECODE64(digit1) == BAD)
;;;53     			return(-1);
;;;54     		digit2 = in[1];
;;;55     		if (DECODE64(digit2) == BAD)
;;;56     			return(-1);
;;;57     		digit3 = in[2];
;;;58     		if (digit3 != '=' && DECODE64(digit3) == BAD)
;;;59     			return(-1); 
;;;60     		digit4 = in[3];
;;;61     		if (digit4 != '=' && DECODE64(digit4) == BAD)
;;;62     			return(-1);
;;;63     		in += 4;
;;;64     		++len;
;;;65     		if (maxlen && len > maxlen)
;;;66     			return(-1);
;;;67     		*out++ = (DECODE64(digit1) << 2) | (DECODE64(digit2) >> 4);
;;;68     		if (digit3 != '=')
;;;69     		{
;;;70     			++len;
;;;71     			if (maxlen && len > maxlen)
;;;72     				return(-1);
;;;73     			*out++ = ((DECODE64(digit2) << 4) & 0xf0) | (DECODE64(digit3) >> 2);
;;;74     			if (digit4 != '=')
;;;75     			{
;;;76     				++len;
;;;77     				if (maxlen && len > maxlen)
;;;78     					return(-1);
;;;79     				*out++ = ((DECODE64(digit3) << 6) & 0xc0) | DECODE64(digit4);
;;;80     			}
;;;81     		}
;;;82         } while 
;;;83     		(*in && *in != '\r' && digit4 != '=');
;;;84     	
;;;85         return (len);
;;;86     }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L4.36|
000024  bf00              NOP                            ;50
                  |L4.38|
000026  f891c000          LDRB     r12,[r1,#0]           ;51
00002a  f1bc0f80          CMP      r12,#0x80             ;52
00002e  d203              BCS      |L4.56|
000030  484a              LDR      r0,|L4.348|
000032  f810000c          LDRB     r0,[r0,r12]           ;52
000036  e000              B        |L4.58|
                  |L4.56|
000038  20ff              MOVS     r0,#0xff              ;52
                  |L4.58|
00003a  28ff              CMP      r0,#0xff              ;52
00003c  d102              BNE      |L4.68|
00003e  f04f30ff          MOV      r0,#0xffffffff        ;53
000042  e7ed              B        |L4.32|
                  |L4.68|
000044  784f              LDRB     r7,[r1,#1]            ;54
000046  2f80              CMP      r7,#0x80              ;55
000048  d202              BCS      |L4.80|
00004a  4844              LDR      r0,|L4.348|
00004c  5dc0              LDRB     r0,[r0,r7]            ;55
00004e  e000              B        |L4.82|
                  |L4.80|
000050  20ff              MOVS     r0,#0xff              ;55
                  |L4.82|
000052  28ff              CMP      r0,#0xff              ;55
000054  d102              BNE      |L4.92|
000056  f04f30ff          MOV      r0,#0xffffffff        ;56
00005a  e7e1              B        |L4.32|
                  |L4.92|
00005c  788a              LDRB     r2,[r1,#2]            ;57
00005e  2a3d              CMP      r2,#0x3d              ;58
000060  d00a              BEQ      |L4.120|
000062  2a80              CMP      r2,#0x80              ;58
000064  d202              BCS      |L4.108|
000066  483d              LDR      r0,|L4.348|
000068  5c80              LDRB     r0,[r0,r2]            ;58
00006a  e000              B        |L4.110|
                  |L4.108|
00006c  20ff              MOVS     r0,#0xff              ;58
                  |L4.110|
00006e  28ff              CMP      r0,#0xff              ;58
000070  d102              BNE      |L4.120|
000072  f04f30ff          MOV      r0,#0xffffffff        ;59
000076  e7d3              B        |L4.32|
                  |L4.120|
000078  78cb              LDRB     r3,[r1,#3]            ;60
00007a  2b3d              CMP      r3,#0x3d              ;61
00007c  d00a              BEQ      |L4.148|
00007e  2b80              CMP      r3,#0x80              ;61
000080  d202              BCS      |L4.136|
000082  4836              LDR      r0,|L4.348|
000084  5cc0              LDRB     r0,[r0,r3]            ;61
000086  e000              B        |L4.138|
                  |L4.136|
000088  20ff              MOVS     r0,#0xff              ;61
                  |L4.138|
00008a  28ff              CMP      r0,#0xff              ;61
00008c  d102              BNE      |L4.148|
00008e  f04f30ff          MOV      r0,#0xffffffff        ;62
000092  e7c5              B        |L4.32|
                  |L4.148|
000094  1d09              ADDS     r1,r1,#4              ;63
000096  1c76              ADDS     r6,r6,#1              ;64
000098  b125              CBZ      r5,|L4.164|
00009a  42ae              CMP      r6,r5                 ;65
00009c  dd02              BLE      |L4.164|
00009e  f04f30ff          MOV      r0,#0xffffffff        ;66
0000a2  e7bd              B        |L4.32|
                  |L4.164|
0000a4  f1bc0f80          CMP      r12,#0x80             ;67
0000a8  d203              BCS      |L4.178|
0000aa  482c              LDR      r0,|L4.348|
0000ac  f810000c          LDRB     r0,[r0,r12]           ;67
0000b0  e000              B        |L4.180|
                  |L4.178|
0000b2  20ff              MOVS     r0,#0xff              ;67
                  |L4.180|
0000b4  ea4f0880          LSL      r8,r0,#2              ;67
0000b8  2f80              CMP      r7,#0x80              ;67
0000ba  d202              BCS      |L4.194|
0000bc  4827              LDR      r0,|L4.348|
0000be  5dc0              LDRB     r0,[r0,r7]            ;67
0000c0  e000              B        |L4.196|
                  |L4.194|
0000c2  20ff              MOVS     r0,#0xff              ;67
                  |L4.196|
0000c4  ea481020          ORR      r0,r8,r0,ASR #4       ;67
0000c8  f8040b01          STRB     r0,[r4],#1            ;67
0000cc  2a3d              CMP      r2,#0x3d              ;68
0000ce  d03a              BEQ      |L4.326|
0000d0  1c76              ADDS     r6,r6,#1              ;70
0000d2  b125              CBZ      r5,|L4.222|
0000d4  42ae              CMP      r6,r5                 ;71
0000d6  dd02              BLE      |L4.222|
0000d8  f04f30ff          MOV      r0,#0xffffffff        ;72
0000dc  e7a0              B        |L4.32|
                  |L4.222|
0000de  2f80              CMP      r7,#0x80              ;73
0000e0  d202              BCS      |L4.232|
0000e2  481e              LDR      r0,|L4.348|
0000e4  5dc0              LDRB     r0,[r0,r7]            ;73
0000e6  e000              B        |L4.234|
                  |L4.232|
0000e8  20ff              MOVS     r0,#0xff              ;73
                  |L4.234|
0000ea  f04f08f0          MOV      r8,#0xf0              ;73
0000ee  ea081800          AND      r8,r8,r0,LSL #4       ;73
0000f2  2a80              CMP      r2,#0x80              ;73
0000f4  d202              BCS      |L4.252|
0000f6  4819              LDR      r0,|L4.348|
0000f8  5c80              LDRB     r0,[r0,r2]            ;73
0000fa  e000              B        |L4.254|
                  |L4.252|
0000fc  20ff              MOVS     r0,#0xff              ;73
                  |L4.254|
0000fe  ea4800a0          ORR      r0,r8,r0,ASR #2       ;73
000102  f8040b01          STRB     r0,[r4],#1            ;73
000106  2b3d              CMP      r3,#0x3d              ;74
000108  d01d              BEQ      |L4.326|
00010a  1c76              ADDS     r6,r6,#1              ;76
00010c  b125              CBZ      r5,|L4.280|
00010e  42ae              CMP      r6,r5                 ;77
000110  dd02              BLE      |L4.280|
000112  f04f30ff          MOV      r0,#0xffffffff        ;78
000116  e783              B        |L4.32|
                  |L4.280|
000118  2a80              CMP      r2,#0x80              ;79
00011a  d202              BCS      |L4.290|
00011c  480f              LDR      r0,|L4.348|
00011e  5c80              LDRB     r0,[r0,r2]            ;79
000120  e000              B        |L4.292|
                  |L4.290|
000122  20ff              MOVS     r0,#0xff              ;79
                  |L4.292|
000124  f04f08c0          MOV      r8,#0xc0              ;79
000128  ea081080          AND      r0,r8,r0,LSL #6       ;79
00012c  2b80              CMP      r3,#0x80              ;79
00012e  d204              BCS      |L4.314|
000130  f8df8028          LDR      r8,|L4.348|
000134  f8188003          LDRB     r8,[r8,r3]            ;79
000138  e001              B        |L4.318|
                  |L4.314|
00013a  f04f08ff          MOV      r8,#0xff              ;79
                  |L4.318|
00013e  ea400008          ORR      r0,r0,r8              ;79
000142  f8040b01          STRB     r0,[r4],#1            ;79
                  |L4.326|
000146  7808              LDRB     r0,[r1,#0]            ;83
000148  b128              CBZ      r0,|L4.342|
00014a  7808              LDRB     r0,[r1,#0]            ;83
00014c  280d              CMP      r0,#0xd               ;83
00014e  d002              BEQ      |L4.342|
000150  2b3d              CMP      r3,#0x3d              ;83
000152  f47faf68          BNE      |L4.38|
                  |L4.342|
000156  4630              MOV      r0,r6                 ;85
000158  e762              B        |L4.32|
;;;87     
                          ENDP

00015a  0000              DCW      0x0000
                  |L4.348|
                          DCD      base64val

                          AREA ||i.getEncodedLength||, CODE, READONLY, ALIGN=1

                  getEncodedLength PROC
;;;5      
;;;6      int getEncodedLength(int EncodeLength)
000000  4601              MOV      r1,r0
;;;7      {
;;;8      	int modulas = EncodeLength % 3;
000002  2003              MOVS     r0,#3
000004  fb91f3f0          SDIV     r3,r1,r0
000008  fb001213          MLS      r2,r0,r3,r1
;;;9      	if(modulas == 0)
00000c  b91a              CBNZ     r2,|L5.22|
;;;10     		return (EncodeLength/3)*4;
00000e  fb91f0f0          SDIV     r0,r1,r0
000012  0080              LSLS     r0,r0,#2
                  |L5.20|
;;;11     	else
;;;12     		return ((EncodeLength/3)+1)*4;	
;;;13     }
000014  4770              BX       lr
                  |L5.22|
000016  2003              MOVS     r0,#3                 ;12
000018  fb91f0f0          SDIV     r0,r1,r0              ;12
00001c  1c40              ADDS     r0,r0,#1              ;12
00001e  0080              LSLS     r0,r0,#2              ;12
000020  e7f8              B        |L5.20|
;;;14     
                          ENDP


                          AREA ||i.to64frombits||, CODE, READONLY, ALIGN=2

                  to64frombits PROC
;;;15     
;;;16     void to64frombits(uint8_t *out, uint8_t *in, int inlen)
000000  b530              PUSH     {r4,r5,lr}
;;;17     {
;;;18         uint8_t fragment;
;;;19     	for (; inlen >= 3; inlen -= 3)
000002  e024              B        |L6.78|
                  |L6.4|
;;;20         {
;;;21     		*out++ = base64digits[in[0] >> 2];
000004  780c              LDRB     r4,[r1,#0]
000006  4d27              LDR      r5,|L6.164|
000008  eb0504a4          ADD      r4,r5,r4,ASR #2
00000c  7824              LDRB     r4,[r4,#0]
00000e  f8004b01          STRB     r4,[r0],#1
;;;22     		*out++ = base64digits[((in[0] << 4) & 0x30) | (in[1] >> 4)];
000012  780c              LDRB     r4,[r1,#0]
000014  2530              MOVS     r5,#0x30
000016  ea051404          AND      r4,r5,r4,LSL #4
00001a  784d              LDRB     r5,[r1,#1]
00001c  ea441425          ORR      r4,r4,r5,ASR #4
000020  4d20              LDR      r5,|L6.164|
000022  5d2c              LDRB     r4,[r5,r4]
000024  f8004b01          STRB     r4,[r0],#1
;;;23     		*out++ = base64digits[((in[1] << 2) & 0x3c) | (in[2] >> 6)];
000028  784c              LDRB     r4,[r1,#1]
00002a  253c              MOVS     r5,#0x3c
00002c  ea050484          AND      r4,r5,r4,LSL #2
000030  788d              LDRB     r5,[r1,#2]
000032  ea4414a5          ORR      r4,r4,r5,ASR #6
000036  4d1b              LDR      r5,|L6.164|
000038  5d2c              LDRB     r4,[r5,r4]
00003a  f8004b01          STRB     r4,[r0],#1
;;;24     		*out++ = base64digits[in[2] & 0x3f];
00003e  788c              LDRB     r4,[r1,#2]
000040  f004043f          AND      r4,r4,#0x3f
000044  5d2c              LDRB     r4,[r5,r4]
000046  f8004b01          STRB     r4,[r0],#1
;;;25     		in += 3;
00004a  1cc9              ADDS     r1,r1,#3
00004c  1ed2              SUBS     r2,r2,#3              ;19
                  |L6.78|
00004e  2a03              CMP      r2,#3                 ;19
000050  dad8              BGE      |L6.4|
;;;26         }
;;;27         if (inlen > 0)
000052  2a00              CMP      r2,#0
000054  dd22              BLE      |L6.156|
;;;28         {
;;;29     		*out++ = base64digits[in[0] >> 2];
000056  780c              LDRB     r4,[r1,#0]
000058  4d12              LDR      r5,|L6.164|
00005a  eb0504a4          ADD      r4,r5,r4,ASR #2
00005e  7824              LDRB     r4,[r4,#0]
000060  f8004b01          STRB     r4,[r0],#1
;;;30     		fragment = (in[0] << 4) & 0x30;
000064  780c              LDRB     r4,[r1,#0]
000066  2530              MOVS     r5,#0x30
000068  ea051304          AND      r3,r5,r4,LSL #4
;;;31     		if (inlen > 1)
00006c  2a01              CMP      r2,#1
00006e  dd02              BLE      |L6.118|
;;;32     			fragment |= in[1] >> 4;
000070  784c              LDRB     r4,[r1,#1]
000072  ea431324          ORR      r3,r3,r4,ASR #4
                  |L6.118|
;;;33     		*out++ = base64digits[fragment];
000076  4c0b              LDR      r4,|L6.164|
000078  5ce4              LDRB     r4,[r4,r3]
00007a  f8004b01          STRB     r4,[r0],#1
;;;34     		*out++ = (inlen < 2) ? '=' : base64digits[(in[1] << 2) & 0x3c];
00007e  2a02              CMP      r2,#2
000080  da01              BGE      |L6.134|
000082  243d              MOVS     r4,#0x3d
000084  e005              B        |L6.146|
                  |L6.134|
000086  784c              LDRB     r4,[r1,#1]
000088  253c              MOVS     r5,#0x3c
00008a  ea050484          AND      r4,r5,r4,LSL #2
00008e  4d05              LDR      r5,|L6.164|
000090  5d2c              LDRB     r4,[r5,r4]
                  |L6.146|
000092  f8004b01          STRB     r4,[r0],#1
;;;35     		*out++ = '=';
000096  243d              MOVS     r4,#0x3d
000098  f8004b01          STRB     r4,[r0],#1
                  |L6.156|
;;;36         }
;;;37         *out = '\0';
00009c  2400              MOVS     r4,#0
00009e  7004              STRB     r4,[r0,#0]
;;;38     }
0000a0  bd30              POP      {r4,r5,pc}
;;;39     
                          ENDP

0000a2  0000              DCW      0x0000
                  |L6.164|
                          DCD      base64digits

                          AREA ||.data||, DATA, ALIGN=0

                  base64digits
000000  41424344          DCB      0x41,0x42,0x43,0x44
000004  45464748          DCB      0x45,0x46,0x47,0x48
000008  494a4b4c          DCB      0x49,0x4a,0x4b,0x4c
00000c  4d4e4f50          DCB      0x4d,0x4e,0x4f,0x50
000010  51525354          DCB      0x51,0x52,0x53,0x54
000014  55565758          DCB      0x55,0x56,0x57,0x58
000018  595a6162          DCB      0x59,0x5a,0x61,0x62
00001c  63646566          DCB      0x63,0x64,0x65,0x66
000020  6768696a          DCB      0x67,0x68,0x69,0x6a
000024  6b6c6d6e          DCB      0x6b,0x6c,0x6d,0x6e
000028  6f707172          DCB      0x6f,0x70,0x71,0x72
00002c  73747576          DCB      0x73,0x74,0x75,0x76
000030  7778797a          DCB      0x77,0x78,0x79,0x7a
000034  30313233          DCB      0x30,0x31,0x32,0x33
000038  34353637          DCB      0x34,0x35,0x36,0x37
00003c  38392b2f          DCB      0x38,0x39,0x2b,0x2f
000040  00                DCB      0x00
                  base64val
000041  ffffff            DCB      0xff,0xff,0xff
000044  ffffffff          DCB      0xff,0xff,0xff,0xff
000048  ffffffff          DCB      0xff,0xff,0xff,0xff
00004c  ffffffff          DCB      0xff,0xff,0xff,0xff
000050  ffffffff          DCB      0xff,0xff,0xff,0xff
000054  ffffffff          DCB      0xff,0xff,0xff,0xff
000058  ffffffff          DCB      0xff,0xff,0xff,0xff
00005c  ffffffff          DCB      0xff,0xff,0xff,0xff
000060  ffffffff          DCB      0xff,0xff,0xff,0xff
000064  ffffffff          DCB      0xff,0xff,0xff,0xff
000068  ffffffff          DCB      0xff,0xff,0xff,0xff
00006c  3effffff          DCB      0x3e,0xff,0xff,0xff
000070  3f343536          DCB      0x3f,0x34,0x35,0x36
000074  3738393a          DCB      0x37,0x38,0x39,0x3a
000078  3b3c3dff          DCB      0x3b,0x3c,0x3d,0xff
00007c  ffffffff          DCB      0xff,0xff,0xff,0xff
000080  ffff0001          DCB      0xff,0xff,0x00,0x01
000084  02030405          DCB      0x02,0x03,0x04,0x05
000088  06070809          DCB      0x06,0x07,0x08,0x09
00008c  0a0b0c0d          DCB      0x0a,0x0b,0x0c,0x0d
000090  0e0f1011          DCB      0x0e,0x0f,0x10,0x11
000094  12131415          DCB      0x12,0x13,0x14,0x15
000098  16171819          DCB      0x16,0x17,0x18,0x19
00009c  ffffffff          DCB      0xff,0xff,0xff,0xff
0000a0  ffff1a1b          DCB      0xff,0xff,0x1a,0x1b
0000a4  1c1d1e1f          DCB      0x1c,0x1d,0x1e,0x1f
0000a8  20212223          DCB      0x20,0x21,0x22,0x23
0000ac  24252627          DCB      0x24,0x25,0x26,0x27
0000b0  28292a2b          DCB      0x28,0x29,0x2a,0x2b
0000b4  2c2d2e2f          DCB      0x2c,0x2d,0x2e,0x2f
0000b8  30313233          DCB      0x30,0x31,0x32,0x33
0000bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0000c0  ff                DCB      0xff
