; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\magdecode.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\magdecode.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\user -I..\dev -I..\lib\inc -I..\core_cm3 -IE:\Keil\ARM\RV31\INC -IE:\Keil\ARM\CMSIS\Include -IE:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB --omf_browse=.\obj\magdecode.crf ..\user\magdecode.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  SetBit PROC
;;;64     ********************************************************************/
;;;65     static void SetBit(uint8_t *lpByte,uint8_t nBit)
000000  7802              LDRB     r2,[r0,#0]
;;;66     {
;;;67         *lpByte |= (0x01<<nBit);
000002  2301              MOVS     r3,#1
000004  408b              LSLS     r3,r3,r1
000006  431a              ORRS     r2,r2,r3
000008  7002              STRB     r2,[r0,#0]
;;;68     }
00000a  4770              BX       lr
;;;69     
                          ENDP

                  ClearBit PROC
;;;77     ********************************************************************/
;;;78     static void ClearBit(uint8_t *lpByte,uint8_t nBit)
00000c  7802              LDRB     r2,[r0,#0]
;;;79     {
;;;80         *lpByte &= ~(0x01<<nBit);
00000e  2301              MOVS     r3,#1
000010  408b              LSLS     r3,r3,r1
000012  439a              BICS     r2,r2,r3
000014  7002              STRB     r2,[r0,#0]
;;;81     }
000016  4770              BX       lr
;;;82     
                          ENDP

                  CplBit PROC
;;;90     ********************************************************************/
;;;91     static void CplBit(uint8_t *lpByte,uint8_t nBit)
000018  7802              LDRB     r2,[r0,#0]
;;;92     {
;;;93     	*lpByte ^= (0x01<<nBit);
00001a  2301              MOVS     r3,#1
00001c  408b              LSLS     r3,r3,r1
00001e  405a              EORS     r2,r2,r3
000020  7002              STRB     r2,[r0,#0]
;;;94     }
000022  4770              BX       lr
;;;95     
                          ENDP

                  CheckLrcEvenParity PROC
;;;103    ********************************************************************/
;;;104    static uint8_t CheckLrcEvenParity(uint8_t *lpIn,uint16_t nLen,uint8_t nBitPos)
000024  b570              PUSH     {r4-r6,lr}
;;;105    {
000026  4603              MOV      r3,r0
000028  460c              MOV      r4,r1
00002a  4615              MOV      r5,r2
;;;106    	uint16_t i,BitCnt;
;;;107    	
;;;108    	BitCnt = 0; 
00002c  2100              MOVS     r1,#0
;;;109    	for(i = 0; i <nLen; i++)
00002e  2200              MOVS     r2,#0
000030  e008              B        |L1.68|
                  |L1.50|
;;;110    	{
;;;111    		if(((lpIn[i] >> nBitPos) & 0x01) == 0x01)
000032  5c98              LDRB     r0,[r3,r2]
000034  4128              ASRS     r0,r0,r5
000036  f0100f01          TST      r0,#1
00003a  d001              BEQ      |L1.64|
;;;112    		{
;;;113    			BitCnt ++;
00003c  1c48              ADDS     r0,r1,#1
00003e  b281              UXTH     r1,r0
                  |L1.64|
000040  1c50              ADDS     r0,r2,#1              ;109
000042  b282              UXTH     r2,r0                 ;109
                  |L1.68|
000044  42a2              CMP      r2,r4                 ;109
000046  dbf4              BLT      |L1.50|
;;;114    		}
;;;115    	}
;;;116    	if((BitCnt % 2) == 0)
000048  4608              MOV      r0,r1
00004a  eb0176d0          ADD      r6,r1,r0,LSR #31
00004e  1076              ASRS     r6,r6,#1
000050  ebb10646          SUBS     r6,r1,r6,LSL #1
000054  d101              BNE      |L1.90|
;;;117    	{
;;;118    		return 1;
000056  2001              MOVS     r0,#1
                  |L1.88|
;;;119    	}
;;;120    	else
;;;121    	{
;;;122    		return 0;
;;;123    	}
;;;124    }
000058  bd70              POP      {r4-r6,pc}
                  |L1.90|
00005a  2000              MOVS     r0,#0                 ;122
00005c  e7fc              B        |L1.88|
;;;125    
                          ENDP

                  CheckLrcDirtOnlyOne PROC
;;;133    ********************************************************************/
;;;134    static uint16_t CheckLrcDirtOnlyOne(uint16_t *lpOutDirtPos,uint8_t *lpIn,uint16_t nLen,uint8_t nBitPos)
00005e  b570              PUSH     {r4-r6,lr}
;;;135    {
000060  4604              MOV      r4,r0
000062  460d              MOV      r5,r1
;;;136    	uint16_t i,BitCnt;
;;;137    	
;;;138    	BitCnt = 0; 
000064  2600              MOVS     r6,#0
;;;139    	for(i = 0; i <nLen; i++)
000066  2100              MOVS     r1,#0
000068  e009              B        |L1.126|
                  |L1.106|
;;;140    	{
;;;141    		if(((lpIn[i] >> nBitPos) & 0x01) == 0x01)
00006a  5c68              LDRB     r0,[r5,r1]
00006c  4118              ASRS     r0,r0,r3
00006e  f0100f01          TST      r0,#1
000072  d002              BEQ      |L1.122|
;;;142    		{
;;;143    			*lpOutDirtPos = i;
000074  8021              STRH     r1,[r4,#0]
;;;144    			BitCnt ++;
000076  1c70              ADDS     r0,r6,#1
000078  b286              UXTH     r6,r0
                  |L1.122|
00007a  1c48              ADDS     r0,r1,#1              ;139
00007c  b281              UXTH     r1,r0                 ;139
                  |L1.126|
00007e  4291              CMP      r1,r2                 ;139
000080  dbf3              BLT      |L1.106|
;;;145    		}
;;;146    	}
;;;147    	if(BitCnt == 1)								//只有一位可疑位
000082  2e01              CMP      r6,#1
000084  d101              BNE      |L1.138|
;;;148    	{
;;;149    		return 1;								//返回唯一一位污染
000086  2001              MOVS     r0,#1
                  |L1.136|
;;;150    	}
;;;151    	else
;;;152    	{
;;;153    		return 0;								//返回没有污染
;;;154    	}	
;;;155    }
000088  bd70              POP      {r4-r6,pc}
                  |L1.138|
00008a  2000              MOVS     r0,#0                 ;153
00008c  e7fc              B        |L1.136|
;;;156    
                          ENDP

                  CheckOddParity PROC
;;;166                                           1, 2, 2, 3, 2, 3, 3, 4};
;;;167    static uint8_t CheckOddParity(uint8_t nByte)
00008e  4601              MOV      r1,r0
;;;168    {
;;;169        return (PARITY_TAB[nByte&0x0f]+PARITY_TAB[(nByte>>4)&0x0f])&0x01;
000090  f001000f          AND      r0,r1,#0xf
000094  4afa              LDR      r2,|L1.1152|
000096  5c10              LDRB     r0,[r2,r0]
000098  eb021211          ADD      r2,r2,r1,LSR #4
00009c  7812              LDRB     r2,[r2,#0]
00009e  4410              ADD      r0,r0,r2
0000a0  f0000001          AND      r0,r0,#1
;;;170    }
0000a4  4770              BX       lr
;;;171    
                          ENDP

                  CheckDirtOnlyOne PROC
;;;179    ********************************************************************/
;;;180    static uint8_t CheckDirtOnlyOne(uint8_t nByte)
0000a6  4601              MOV      r1,r0
;;;181    {
;;;182    	uint8_t i,BitCnt;
;;;183    	
;;;184    	BitCnt = 0; 
0000a8  2300              MOVS     r3,#0
;;;185    	for(i = 0; i < 8; i++)
0000aa  2200              MOVS     r2,#0
0000ac  e007              B        |L1.190|
                  |L1.174|
;;;186    	{
;;;187    		if((nByte & 0x01) == 0x01)
0000ae  f0110f01          TST      r1,#1
0000b2  d001              BEQ      |L1.184|
;;;188    		{
;;;189    			BitCnt ++;
0000b4  1c58              ADDS     r0,r3,#1
0000b6  b2c3              UXTB     r3,r0
                  |L1.184|
;;;190    		}
;;;191    		nByte >>= 1;
0000b8  1049              ASRS     r1,r1,#1
0000ba  1c50              ADDS     r0,r2,#1              ;185
0000bc  b2c2              UXTB     r2,r0                 ;185
                  |L1.190|
0000be  2a08              CMP      r2,#8                 ;185
0000c0  dbf5              BLT      |L1.174|
;;;192    	}
;;;193    	if(BitCnt == 1)								//只有一位可疑位
0000c2  2b01              CMP      r3,#1
0000c4  d101              BNE      |L1.202|
;;;194    	{
;;;195    		return 1;						
0000c6  2001              MOVS     r0,#1
                  |L1.200|
;;;196    	}
;;;197    	else
;;;198    	{
;;;199    		return 0;
;;;200    	}	
;;;201    }
0000c8  4770              BX       lr
                  |L1.202|
0000ca  2000              MOVS     r0,#0                 ;199
0000cc  e7fc              B        |L1.200|
;;;202    
                          ENDP

                  GetDelta PROC
;;;210    ********************************************************************/
;;;211    static uint16_t GetDelta(uint16_t FirstData,uint16_t SecondData)
0000ce  4602              MOV      r2,r0
;;;212    {
;;;213    	if(FirstData > SecondData)
0000d0  428a              CMP      r2,r1
0000d2  dd02              BLE      |L1.218|
;;;214    	{
;;;215    		return FirstData - SecondData;
0000d4  1a50              SUBS     r0,r2,r1
0000d6  b280              UXTH     r0,r0
                  |L1.216|
;;;216    	}
;;;217    	else
;;;218    	{
;;;219    		return SecondData - FirstData; 
;;;220    	}
;;;221    }
0000d8  4770              BX       lr
                  |L1.218|
0000da  1a88              SUBS     r0,r1,r2              ;219
0000dc  b280              UXTH     r0,r0                 ;219
0000de  e7fb              B        |L1.216|
;;;222    
                          ENDP

                  PllSmooth PROC
;;;230    ********************************************************************/
;;;231    static uint16_t PllSmooth(uint16_t *lpIn,uint16_t nLen)
0000e0  b510              PUSH     {r4,lr}
;;;232    {
0000e2  4604              MOV      r4,r0
0000e4  460a              MOV      r2,r1
;;;233    	uint32_t i,average = 0;
0000e6  2300              MOVS     r3,#0
;;;234    
;;;235    	if(nLen >= CURNC)
0000e8  2a08              CMP      r2,#8
0000ea  db0a              BLT      |L1.258|
;;;236    	{
;;;237    		for(i = 1; i <= CURNC; i++)
0000ec  2101              MOVS     r1,#1
0000ee  e004              B        |L1.250|
                  |L1.240|
;;;238    		{
;;;239    			average += lpIn[nLen-i];
0000f0  1a50              SUBS     r0,r2,r1
0000f2  f8340010          LDRH     r0,[r4,r0,LSL #1]
0000f6  4403              ADD      r3,r3,r0
0000f8  1c49              ADDS     r1,r1,#1              ;237
                  |L1.250|
0000fa  2908              CMP      r1,#8                 ;237
0000fc  d9f8              BLS      |L1.240|
;;;240    		}
;;;241    		average /= CURNC;
0000fe  08db              LSRS     r3,r3,#3
000100  e009              B        |L1.278|
                  |L1.258|
;;;242    	}
;;;243    	else
;;;244    	{
;;;245    		for(i = 0; i < nLen; i++)
000102  2100              MOVS     r1,#0
000104  e003              B        |L1.270|
                  |L1.262|
;;;246    		{
;;;247    			average += lpIn[i];
000106  f8340011          LDRH     r0,[r4,r1,LSL #1]
00010a  4403              ADD      r3,r3,r0
00010c  1c49              ADDS     r1,r1,#1              ;245
                  |L1.270|
00010e  4291              CMP      r1,r2                 ;245
000110  d3f9              BCC      |L1.262|
;;;248    		}
;;;249    		average /= nLen;
000112  fbb3f3f2          UDIV     r3,r3,r2
                  |L1.278|
;;;250    	}
;;;251    	return (uint16_t)average;
000116  b298              UXTH     r0,r3
;;;252    }
000118  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  ResortMagData PROC
;;;262    ********************************************************************/
;;;263    static void ResortMagData( uint8_t  type)
00011a  b5f0              PUSH     {r4-r7,lr}
;;;264    {
00011c  4603              MOV      r3,r0
;;;265      #ifndef TIMERFLOW_12BIT  
;;;266    	uint16_t lpInTimeFlowLength,*lpInTimeFlowValue;
;;;267    	uint16_t i,nLoopCount = 0,uData;
00011e  2500              MOVS     r5,#0
;;;268    	type = type >> 4;
000120  111b              ASRS     r3,r3,#4
;;;269    	if (1 == type)
000122  2b01              CMP      r3,#1
000124  d104              BNE      |L1.304|
;;;270    	{
;;;271    		lpInTimeFlowLength = Track1TimeFlow.Length;
000126  4ed7              LDR      r6,|L1.1156|
000128  f8b60898          LDRH     r0,[r6,#0x898]
;;;272    		lpInTimeFlowValue = Track1TimeFlow.Value;
00012c  4631              MOV      r1,r6
00012e  e00e              B        |L1.334|
                  |L1.304|
;;;273    	}
;;;274    	else if (2 == type)
000130  2b02              CMP      r3,#2
000132  d104              BNE      |L1.318|
;;;275    	{
;;;276    		lpInTimeFlowLength = Track2TimeFlow.Length;
000134  4ed4              LDR      r6,|L1.1160|
000136  f8b603e8          LDRH     r0,[r6,#0x3e8]  ; Track2TimeFlow
;;;277    		lpInTimeFlowValue = Track2TimeFlow.Value;
00013a  4631              MOV      r1,r6
00013c  e007              B        |L1.334|
                  |L1.318|
;;;278    	}
;;;279    	else if (3== type)
00013e  2b03              CMP      r3,#3
000140  d104              BNE      |L1.332|
;;;280    	{
;;;281    		lpInTimeFlowLength = Track3TimeFlow.Length;
000142  4ed2              LDR      r6,|L1.1164|
000144  f8b60870          LDRH     r0,[r6,#0x870]
;;;282    		lpInTimeFlowValue = Track3TimeFlow.Value;
000148  4631              MOV      r1,r6
00014a  e000              B        |L1.334|
                  |L1.332|
;;;283    	}
;;;284    	else
;;;285    	{
;;;286    		return ;
;;;287    	}
;;;288    	nLoopCount = lpInTimeFlowLength / 2;
;;;289    	
;;;290    	for ( i = 0; i < nLoopCount; i ++ )
;;;291    	{
;;;292    		uData = lpInTimeFlowValue[i];
;;;293    		lpInTimeFlowValue[i] = lpInTimeFlowValue[lpInTimeFlowLength-i-1];
;;;294    		lpInTimeFlowValue[lpInTimeFlowLength-i-1] = uData;
;;;295    	}
;;;296      #else
;;;297    	uint16_t lpInTimeFlowLength;
;;;298        uint8_t  *lpInTimeFlowValue;
;;;299    	uint16_t i,nLoopCount = 0;
;;;300        uint8_t uData;
;;;301    
;;;302    	type = type >> 4;
;;;303    	if (1 == type)
;;;304    	{
;;;305            Track1TimeFlow.Length = (Track1TimeFlow.Length+1)&0xfffe;
;;;306    		lpInTimeFlowLength = Track1TimeFlow.Length;
;;;307    		lpInTimeFlowValue = Track1TimeFlow.Value;
;;;308    	}
;;;309    	else if (2 == type)
;;;310    	{
;;;311            Track2TimeFlow.Length = (Track2TimeFlow.Length+1)&0xfffe;
;;;312    		lpInTimeFlowLength = Track2TimeFlow.Length;
;;;313    		lpInTimeFlowValue = Track2TimeFlow.Value;
;;;314    	}
;;;315    	else if (3== type)
;;;316    	{
;;;317            Track3TimeFlow.Length = (Track3TimeFlow.Length+1)&0xfffe;
;;;318    		lpInTimeFlowLength = Track3TimeFlow.Length;
;;;319    		lpInTimeFlowValue = Track3TimeFlow.Value;
;;;320    	}
;;;321    	else
;;;322    	{
;;;323    		return ;
;;;324    	}
;;;325        lpInTimeFlowLength = (lpInTimeFlowLength*3)>>1;
;;;326    	nLoopCount = lpInTimeFlowLength / 2;
;;;327    	
;;;328    	for ( i = 0; i < nLoopCount; i ++ )
;;;329    	{
;;;330    		uData = lpInTimeFlowValue[i];
;;;331    		lpInTimeFlowValue[i] = lpInTimeFlowValue[lpInTimeFlowLength-i-1];
;;;332    		lpInTimeFlowValue[lpInTimeFlowLength-i-1] = uData;
;;;333    	}
;;;334        //把保存高位字节的高4bit和低4bit对调
;;;335        for(i=1; i< lpInTimeFlowLength; i+=3) 
;;;336        {
;;;337            lpInTimeFlowValue[i] = ((lpInTimeFlowValue[i]<<4)&0xF0)|((lpInTimeFlowValue[i]>>4)&0X0F);
;;;338        }
;;;339      #endif
;;;340    }
00014c  bdf0              POP      {r4-r7,pc}
                  |L1.334|
00014e  4606              MOV      r6,r0                 ;288
000150  eb0077d6          ADD      r7,r0,r6,LSR #31      ;288
000154  f3c7054f          UBFX     r5,r7,#1,#16          ;288
000158  2200              MOVS     r2,#0                 ;290
00015a  e00d              B        |L1.376|
                  |L1.348|
00015c  f8314012          LDRH     r4,[r1,r2,LSL #1]     ;292
000160  1a86              SUBS     r6,r0,r2              ;293
000162  1e76              SUBS     r6,r6,#1              ;293
000164  f8316016          LDRH     r6,[r1,r6,LSL #1]     ;293
000168  f8216012          STRH     r6,[r1,r2,LSL #1]     ;293
00016c  1a86              SUBS     r6,r0,r2              ;294
00016e  1e76              SUBS     r6,r6,#1              ;294
000170  f8214016          STRH     r4,[r1,r6,LSL #1]     ;294
000174  1c56              ADDS     r6,r2,#1              ;290
000176  b2b2              UXTH     r2,r6                 ;290
                  |L1.376|
000178  42aa              CMP      r2,r5                 ;290
00017a  dbef              BLT      |L1.348|
00017c  bf00              NOP      
00017e  e7e5              B        |L1.332|
;;;341    
                          ENDP

                  DecodeTimeToBit PROC
;;;362    ********************************************************************/
;;;363    uint8_t DecodeTimeToBit(uint8_t type)
000180  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;364    {
000184  b08e              SUB      sp,sp,#0x38
;;;365    	uint8_t  bSync = 0,bFlag,bCompensate = 0;
000186  2000              MOVS     r0,#0
000188  900d              STR      r0,[sp,#0x34]
00018a  900b              STR      r0,[sp,#0x2c]
;;;366    	uint8_t  ProbePulse = 0,ProbeDirt = 0;
00018c  900a              STR      r0,[sp,#0x28]
00018e  9009              STR      r0,[sp,#0x24]
;;;367    	uint16_t SyncCnt = 0,CurTimeFlowCnt = 0,CurPercent = 0;
000190  9008              STR      r0,[sp,#0x20]
000192  4680              MOV      r8,r0
000194  4682              MOV      r10,r0
;;;368    	uint32_t i,j;
;;;369    	uint16_t CurPllCycle = 0,CurPllCycleTemp[CURNC] = {0},curnclen = 0;
000196  2600              MOVS     r6,#0
000198  9004              STR      r0,[sp,#0x10]
00019a  9005              STR      r0,[sp,#0x14]
00019c  9006              STR      r0,[sp,#0x18]
00019e  9007              STR      r0,[sp,#0x1c]
0001a0  2400              MOVS     r4,#0
;;;370    	int ProbeTotalTime = 0;
0001a2  2700              MOVS     r7,#0
;;;371    	uint16_t lpInTimeFlowLength;
;;;372    	#ifndef TIMERFLOW_12BIT
;;;373        uint16_t *lpInTimeFlowValue;
;;;374    	#else
;;;375    	uint8_t *lpInTimeFlowValue;
;;;376    	#endif
;;;377        uint16_t ltmpu16, ltmpu16_next;
;;;378    
;;;379    	type = type >> 4;
0001a4  980e              LDR      r0,[sp,#0x38]
0001a6  1100              ASRS     r0,r0,#4
0001a8  900e              STR      r0,[sp,#0x38]
;;;380    	if (1 == type)
0001aa  980e              LDR      r0,[sp,#0x38]
0001ac  2801              CMP      r0,#1
0001ae  d106              BNE      |L1.446|
;;;381    	{
;;;382    		lpInTimeFlowLength = Track1TimeFlow.Length;
0001b0  48b4              LDR      r0,|L1.1156|
0001b2  f8b00898          LDRH     r0,[r0,#0x898]
0001b6  9003              STR      r0,[sp,#0xc]
;;;383    		lpInTimeFlowValue = Track1TimeFlow.Value;
0001b8  f8df92c8          LDR      r9,|L1.1156|
0001bc  e017              B        |L1.494|
                  |L1.446|
;;;384    	}
;;;385    	else if (2 == type)
0001be  980e              LDR      r0,[sp,#0x38]
0001c0  2802              CMP      r0,#2
0001c2  d106              BNE      |L1.466|
;;;386    	{
;;;387    		lpInTimeFlowLength = Track2TimeFlow.Length;
0001c4  48b0              LDR      r0,|L1.1160|
0001c6  f8b003e8          LDRH     r0,[r0,#0x3e8]  ; Track2TimeFlow
0001ca  9003              STR      r0,[sp,#0xc]
;;;388    		lpInTimeFlowValue = Track2TimeFlow.Value;
0001cc  f8df92b8          LDR      r9,|L1.1160|
0001d0  e00d              B        |L1.494|
                  |L1.466|
;;;389    	}
;;;390    	else if (3== type)
0001d2  980e              LDR      r0,[sp,#0x38]
0001d4  2803              CMP      r0,#3
0001d6  d106              BNE      |L1.486|
;;;391    	{
;;;392    		lpInTimeFlowLength = Track3TimeFlow.Length;
0001d8  48ac              LDR      r0,|L1.1164|
0001da  f8b00870          LDRH     r0,[r0,#0x870]
0001de  9003              STR      r0,[sp,#0xc]
;;;393    		lpInTimeFlowValue = Track3TimeFlow.Value;
0001e0  f8df92a8          LDR      r9,|L1.1164|
0001e4  e003              B        |L1.494|
                  |L1.486|
;;;394    	}
;;;395    	else
;;;396    	{
;;;397    		return 3;
0001e6  2003              MOVS     r0,#3
                  |L1.488|
;;;398    	}
;;;399    	memset((uint8_t*)&TrackBitFlow,0,sizeof(TRACKBITFLOW));
;;;400        
;;;401    	for(CurTimeFlowCnt = 0; CurTimeFlowCnt < lpInTimeFlowLength; CurTimeFlowCnt++)
;;;402    	{
;;;403    		if(!bSync)																								//磁道数据未同步上,需要继续同步
;;;404    		{
;;;405    			#ifndef TIMERFLOW_12BIT  
;;;406                if((lpInTimeFlowValue[CurTimeFlowCnt] == 0) || (lpInTimeFlowValue[CurTimeFlowCnt] > 30000))		//防止除数为零								//过滤干扰周期,按2磁道最慢速度10cm/s计算,最慢1位周期不能小于3333us.
;;;407    			#else  
;;;408    			ltmpu16  = _output_12bit_data(lpInTimeFlowValue, CurTimeFlowCnt);
;;;409                if((0 == ltmpu16) || (30000 < ltmpu16))
;;;410    			#endif
;;;411                {
;;;412    				continue;
;;;413    			}
;;;414              #ifndef TIMERFLOW_12BIT 
;;;415    			i = GetDelta(CurPllCycle,lpInTimeFlowValue[CurTimeFlowCnt]);
;;;416    			i = (i*100) /lpInTimeFlowValue[CurTimeFlowCnt];
;;;417    			CurPllCycle = lpInTimeFlowValue[CurTimeFlowCnt];
;;;418              #else
;;;419    			i = GetDelta(CurPllCycle,ltmpu16);
;;;420    			i = (i*100) /ltmpu16;
;;;421    			CurPllCycle = ltmpu16;
;;;422    		  #endif	
;;;423    			if(i > 30)																							//同步头连续误差不应该超过20%,可以考虑更科学同步方法,冒泡控制10位总误差不能超过20%                  
;;;424    			{
;;;425    				SyncCnt = 0;
;;;426    			}
;;;427    			else
;;;428    			{
;;;429    				SyncCnt ++;
;;;430    				if(SyncCnt >= CURNC)															//同步上了
;;;431    				{
;;;432    					bSync = 1;
;;;433    					ProbeDirt = 0;
;;;434    					ProbePulse = 0;
;;;435    					ProbeTotalTime = 0;
;;;436    					TrackBitFlow.Length = 0;
;;;437    					curnclen = 0;
;;;438    					for(i = 0; i < (uint32_t)CurTimeFlowCnt+1; i ++)
;;;439    					{
;;;440    						//TrackBitFlow.Value[i] = 0xff;
;;;441                          #ifndef TIMERFLOW_12BIT 
;;;442    						CurPllCycleTemp[i%CURNC] = lpInTimeFlowValue[i];
;;;443                          #else
;;;444                            CurPllCycleTemp[i%CURNC] = _output_12bit_data(lpInTimeFlowValue, i);
;;;445                          #endif
;;;446    					}
;;;447    					curnclen = CurTimeFlowCnt+1;
;;;448    				}
;;;449    			}
;;;450    		}
;;;451    		else
;;;452    		{
;;;453    			#ifndef TIMERFLOW_12BIT
;;;454    			ltmpu16  = lpInTimeFlowValue[CurTimeFlowCnt];
;;;455    			#else
;;;456    			ltmpu16  = _output_12bit_data(lpInTimeFlowValue, CurTimeFlowCnt);
;;;457    			#endif
;;;458                ProbeTotalTime += ltmpu16;
;;;459    			CurPllCycle = PllSmooth(CurPllCycleTemp,CURNC);
;;;460    			CurPercent = (ProbeTotalTime * 100) / CurPllCycle;
;;;461    			i = (ltmpu16*100) / CurPllCycle; 
;;;462    			if(i >= 20 && i < 33)															//非稳态区域											
;;;463    			{
;;;464    				ProbeDirt = 1;
;;;465    			}
;;;466    			if(CurPercent >= 33 && CurPercent < 70)											//稳定半周期，抗两端尖峰干扰
;;;467    			{
;;;468    				if(i < 20)
;;;469    				{
;;;470    					ProbeDirt = 1;															//中间尖峰干扰
;;;471    				}
;;;472    				ProbePulse ++;																//跳变加加
;;;473    			}
;;;474    			else if(CurPercent >= 70 && CurPercent < 130)									//稳定全周期 幅度不能收窄,否则有些卡过不去
;;;475    			{             
;;;476    				bFlag = 0;
;;;477    				#ifndef TIMERFLOW_12BIT
;;;478    				ltmpu16_next = lpInTimeFlowValue[CurTimeFlowCnt + 1];
;;;479    				#else
;;;480                    ltmpu16_next = _output_12bit_data(lpInTimeFlowValue, CurTimeFlowCnt + 1);
;;;481    				#endif
;;;482    				if((!(CurPercent >= 90 && CurPercent < 110)) && ((CurTimeFlowCnt+1) < lpInTimeFlowLength))
;;;483    				{
;;;484    					if(((ltmpu16_next !=0 ) && (((ltmpu16_next * 100) / CurPllCycle) < 33)) 
;;;485    						&& ((((ProbeTotalTime+ltmpu16_next) * 100) / CurPllCycle) < 110))	//累加超过20%，会导致MARK位增加
;;;486    					{
;;;487    						bFlag = 1;
;;;488    						bCompensate ++;
;;;489    					}
;;;490    				}
;;;491    				if(bFlag == 0)
;;;492    				{
;;;493    					if(bCompensate == 0)													//没有实施补偿
;;;494    					{
;;;495    						if(ProbePulse == 1 && ((ltmpu16*100) / CurPllCycle) < 20)
;;;496    						{
;;;497    							ProbePulse = 0;													//防止边沿干扰,控制+20大于70%边
;;;498    						}
;;;499    					}
;;;500    					if(CurPllCycle > ProbeTotalTime)
;;;501    					{
;;;502    						i = CurPllCycle - ProbeTotalTime;
;;;503    						if((i * 100 / CurPllCycle) < 35)
;;;504    						{
;;;505    							CurPllCycleTemp[curnclen%CURNC] = ProbeTotalTime;curnclen++;
;;;506    							ProbeTotalTime = 0;
;;;507    						}
;;;508    						else
;;;509    						{
;;;510    							j = (7 * i) / 8;
;;;511    							CurPllCycleTemp[curnclen%CURNC] = ProbeTotalTime + j;curnclen++;
;;;512    							ProbeTotalTime = CurPllCycle - (ProbeTotalTime + j);
;;;513    						}
;;;514    					}
;;;515    					else
;;;516    					{
;;;517    						i = ProbeTotalTime - CurPllCycle;
;;;518    						if((i * 100 / CurPllCycle) < 35)
;;;519    						{
;;;520    							CurPllCycleTemp[curnclen%CURNC] = ProbeTotalTime;curnclen++;
;;;521    							ProbeTotalTime = 0;
;;;522    						}
;;;523    						else
;;;524    						{
;;;525    							j = (1 * i) / 8;
;;;526    							CurPllCycleTemp[curnclen%CURNC] = ProbeTotalTime - j;curnclen++;
;;;527    							ProbeTotalTime = j;
;;;528    						}
;;;529    					}
;;;530    					if(ProbeDirt == 1)
;;;531    					{
;;;532    						if (TrackBitFlow.Length < TRACKBITFLOWLENGTH)
;;;533    							TrackBitFlow.Value[TrackBitFlow.Length++] = 2;
;;;534    						else
;;;535    							break;
;;;536    					}
;;;537    					else 
;;;538    					{
;;;539    						if(ProbePulse > 0)			
;;;540    						{
;;;541    							if (TrackBitFlow.Length < TRACKBITFLOWLENGTH)
;;;542    								TrackBitFlow.Value[TrackBitFlow.Length++] = 1;
;;;543    							else
;;;544    								break;
;;;545    						}
;;;546    						else
;;;547    						{
;;;548    							if (TrackBitFlow.Length < TRACKBITFLOWLENGTH)
;;;549    								TrackBitFlow.Value[TrackBitFlow.Length++] = 0;
;;;550    							else
;;;551    								break;
;;;552    						}
;;;553    					}
;;;554    					bCompensate = 0;
;;;555    					ProbePulse = 0;
;;;556    					ProbeDirt = 0;
;;;557    				}
;;;558    			}
;;;559    			else if(CurPercent >= 130)																			//非稳态
;;;560    			{
;;;561    				j = 0; 
;;;562    				while(ProbeTotalTime >= CurPllCycle) 
;;;563    				{
;;;564    					j ++;
;;;565    					if (j>10)
;;;566    						break;
;;;567    					CurPllCycleTemp[curnclen%CURNC] = CurPllCycle;curnclen++;
;;;568    					ProbeTotalTime -= CurPllCycle;
;;;569    					CurPllCycle = PllSmooth(CurPllCycleTemp,CURNC);
;;;570    					if (TrackBitFlow.Length < TRACKBITFLOWLENGTH)
;;;571    						TrackBitFlow.Value[TrackBitFlow.Length++] = 2;
;;;572    					else
;;;573    						break;
;;;574    				}
;;;575    				ProbeDirt = 0;
;;;576    				ProbePulse = 0;
;;;577    				bCompensate = 0;
;;;578    				i = (ProbeTotalTime*100)/CurPllCycle;	
;;;579    				if(i < 40)											//if((j <= 1 && i <= 25) || ((j > 1 && i <= 33))) 幅度尽量放开,1号卡就遇到过不去情况																			
;;;580    				{
;;;581    					CurPllCycleTemp[(curnclen-1)%CURNC] += ProbeTotalTime;
;;;582    					ProbeTotalTime = 0;
;;;583    				}
;;;584    				else if(i >= 70)
;;;585    				{
;;;586    					CurPllCycleTemp[curnclen%CURNC] = ProbeTotalTime;curnclen++;
;;;587    					if (TrackBitFlow.Length < TRACKBITFLOWLENGTH)
;;;588    						TrackBitFlow.Value[TrackBitFlow.Length++] = 2;
;;;589    					else
;;;590    						break;
;;;591    					ProbeTotalTime = 0;	
;;;592    				}
;;;593    				else
;;;594    				{
;;;595    					ProbeDirt = 1;
;;;596    					ProbePulse = 1;
;;;597    				}
;;;598    			}
;;;599    		}
;;;600    	}
;;;601    	//解码结束
;;;602    	if(!bSync)
;;;603    	{
;;;604    		memset((uint8_t*)&TrackBitFlow, 0, sizeof(TRACKBITFLOW));
;;;605    		return 0;
;;;606    	}
;;;607    	else
;;;608    	{
;;;609    		return 1;
;;;610    	}
;;;611    }
0001e8  b00f              ADD      sp,sp,#0x3c
0001ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.494|
0001ee  f2403122          MOV      r1,#0x322             ;399
0001f2  48a7              LDR      r0,|L1.1168|
0001f4  f7fffffe          BL       __aeabi_memclr
0001f8  f04f0800          MOV      r8,#0                 ;401
0001fc  e1d2              B        |L1.1444|
                  |L1.510|
0001fe  980d              LDR      r0,[sp,#0x34]         ;403
000200  2800              CMP      r0,#0                 ;403
000202  d13d              BNE      |L1.640|
000204  f8390018          LDRH     r0,[r9,r8,LSL #1]     ;406
000208  b128              CBZ      r0,|L1.534|
00020a  f8390018          LDRH     r0,[r9,r8,LSL #1]     ;406
00020e  f2475130          MOV      r1,#0x7530            ;406
000212  4288              CMP      r0,r1                 ;406
000214  dd00              BLE      |L1.536|
                  |L1.534|
000216  e1c1              B        |L1.1436|
                  |L1.536|
000218  f8391018          LDRH     r1,[r9,r8,LSL #1]     ;415
00021c  4630              MOV      r0,r6                 ;415
00021e  f7fffffe          BL       GetDelta
000222  4605              MOV      r5,r0                 ;415
000224  2064              MOVS     r0,#0x64              ;416
000226  4368              MULS     r0,r5,r0              ;416
000228  f8391018          LDRH     r1,[r9,r8,LSL #1]     ;416
00022c  fbb0f5f1          UDIV     r5,r0,r1              ;416
000230  f8396018          LDRH     r6,[r9,r8,LSL #1]     ;417
000234  2d1e              CMP      r5,#0x1e              ;423
000236  d902              BLS      |L1.574|
000238  2000              MOVS     r0,#0                 ;425
00023a  9008              STR      r0,[sp,#0x20]         ;425
                  |L1.572|
00023c  e1ad              B        |L1.1434|
                  |L1.574|
00023e  9808              LDR      r0,[sp,#0x20]         ;429
000240  1c40              ADDS     r0,r0,#1              ;429
000242  b280              UXTH     r0,r0                 ;429
000244  9008              STR      r0,[sp,#0x20]         ;429
000246  9808              LDR      r0,[sp,#0x20]         ;430
000248  2808              CMP      r0,#8                 ;430
00024a  dbf7              BLT      |L1.572|
00024c  2001              MOVS     r0,#1                 ;432
00024e  900d              STR      r0,[sp,#0x34]         ;432
000250  2000              MOVS     r0,#0                 ;433
000252  9009              STR      r0,[sp,#0x24]         ;433
000254  900a              STR      r0,[sp,#0x28]         ;434
000256  2700              MOVS     r7,#0                 ;435
000258  498d              LDR      r1,|L1.1168|
00025a  f8a10320          STRH     r0,[r1,#0x320]        ;436
00025e  2400              MOVS     r4,#0                 ;437
000260  2500              MOVS     r5,#0                 ;438
000262  e007              B        |L1.628|
                  |L1.612|
000264  f8390015          LDRH     r0,[r9,r5,LSL #1]     ;442
000268  f0050107          AND      r1,r5,#7              ;442
00026c  aa04              ADD      r2,sp,#0x10           ;442
00026e  f8220011          STRH     r0,[r2,r1,LSL #1]     ;442
000272  1c6d              ADDS     r5,r5,#1              ;438
                  |L1.628|
000274  f1080001          ADD      r0,r8,#1              ;438
000278  4285              CMP      r5,r0                 ;438
00027a  d3f3              BCC      |L1.612|
00027c  b284              UXTH     r4,r0                 ;447
                  |L1.638|
00027e  e18c              B        |L1.1434|
                  |L1.640|
000280  f8390018          LDRH     r0,[r9,r8,LSL #1]     ;454
000284  9002              STR      r0,[sp,#8]            ;454
000286  9802              LDR      r0,[sp,#8]            ;458
000288  4407              ADD      r7,r7,r0              ;458
00028a  2108              MOVS     r1,#8                 ;459
00028c  a804              ADD      r0,sp,#0x10           ;459
00028e  f7fffffe          BL       PllSmooth
000292  4606              MOV      r6,r0                 ;459
000294  2064              MOVS     r0,#0x64              ;460
000296  fb07f100          MUL      r1,r7,r0              ;460
00029a  fb91f0f6          SDIV     r0,r1,r6              ;460
00029e  fa1ffa80          UXTH     r10,r0                ;460
0002a2  2164              MOVS     r1,#0x64              ;461
0002a4  9802              LDR      r0,[sp,#8]            ;461
0002a6  4341              MULS     r1,r0,r1              ;461
0002a8  fb91f5f6          SDIV     r5,r1,r6              ;461
0002ac  2d14              CMP      r5,#0x14              ;462
0002ae  d303              BCC      |L1.696|
0002b0  2d21              CMP      r5,#0x21              ;462
0002b2  d201              BCS      |L1.696|
0002b4  2001              MOVS     r0,#1                 ;464
0002b6  9009              STR      r0,[sp,#0x24]         ;464
                  |L1.696|
0002b8  f1ba0f21          CMP      r10,#0x21             ;466
0002bc  db0b              BLT      |L1.726|
0002be  f1ba0f46          CMP      r10,#0x46             ;466
0002c2  da08              BGE      |L1.726|
0002c4  2d14              CMP      r5,#0x14              ;468
0002c6  d201              BCS      |L1.716|
0002c8  2001              MOVS     r0,#1                 ;470
0002ca  9009              STR      r0,[sp,#0x24]         ;470
                  |L1.716|
0002cc  980a              LDR      r0,[sp,#0x28]         ;472
0002ce  1c40              ADDS     r0,r0,#1              ;472
0002d0  b2c0              UXTB     r0,r0                 ;472
0002d2  900a              STR      r0,[sp,#0x28]         ;472
0002d4  e161              B        |L1.1434|
                  |L1.726|
0002d6  f1ba0f46          CMP      r10,#0x46             ;474
0002da  db7d              BLT      |L1.984|
0002dc  f1ba0f82          CMP      r10,#0x82             ;474
0002e0  da7a              BGE      |L1.984|
0002e2  2000              MOVS     r0,#0                 ;476
0002e4  900c              STR      r0,[sp,#0x30]         ;476
0002e6  f1080001          ADD      r0,r8,#1              ;478
0002ea  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;478
0002ee  9001              STR      r0,[sp,#4]            ;478
0002f0  f1ba0f5a          CMP      r10,#0x5a             ;482
0002f4  db02              BLT      |L1.764|
0002f6  f1ba0f6e          CMP      r10,#0x6e             ;482
0002fa  db1a              BLT      |L1.818|
                  |L1.764|
0002fc  f1080001          ADD      r0,r8,#1              ;482
000300  9903              LDR      r1,[sp,#0xc]          ;482
000302  4288              CMP      r0,r1                 ;482
000304  da15              BGE      |L1.818|
000306  9801              LDR      r0,[sp,#4]            ;484
000308  b198              CBZ      r0,|L1.818|
00030a  2164              MOVS     r1,#0x64              ;484
00030c  9801              LDR      r0,[sp,#4]            ;484
00030e  4348              MULS     r0,r1,r0              ;484
000310  fb90f0f6          SDIV     r0,r0,r6              ;484
000314  2821              CMP      r0,#0x21              ;484
000316  da0c              BGE      |L1.818|
000318  9801              LDR      r0,[sp,#4]            ;485
00031a  4438              ADD      r0,r0,r7              ;485
00031c  4348              MULS     r0,r1,r0              ;485
00031e  fb90f0f6          SDIV     r0,r0,r6              ;485
000322  286e              CMP      r0,#0x6e              ;485
000324  da05              BGE      |L1.818|
000326  2001              MOVS     r0,#1                 ;487
000328  900c              STR      r0,[sp,#0x30]         ;487
00032a  980b              LDR      r0,[sp,#0x2c]         ;488
00032c  1c40              ADDS     r0,r0,#1              ;488
00032e  b2c0              UXTB     r0,r0                 ;488
000330  900b              STR      r0,[sp,#0x2c]         ;488
                  |L1.818|
000332  980c              LDR      r0,[sp,#0x30]         ;491
000334  2800              CMP      r0,#0                 ;491
000336  d1a2              BNE      |L1.638|
000338  980b              LDR      r0,[sp,#0x2c]         ;493
00033a  b958              CBNZ     r0,|L1.852|
00033c  980a              LDR      r0,[sp,#0x28]         ;495
00033e  2801              CMP      r0,#1                 ;495
000340  d108              BNE      |L1.852|
000342  2164              MOVS     r1,#0x64              ;495
000344  9802              LDR      r0,[sp,#8]            ;495
000346  4348              MULS     r0,r1,r0              ;495
000348  fb90f0f6          SDIV     r0,r0,r6              ;495
00034c  2814              CMP      r0,#0x14              ;495
00034e  da01              BGE      |L1.852|
000350  2000              MOVS     r0,#0                 ;497
000352  900a              STR      r0,[sp,#0x28]         ;497
                  |L1.852|
000354  42be              CMP      r6,r7                 ;500
000356  dd2a              BLE      |L1.942|
000358  1bf5              SUBS     r5,r6,r7              ;502
00035a  2064              MOVS     r0,#0x64              ;503
00035c  4368              MULS     r0,r5,r0              ;503
00035e  fbb0f0f6          UDIV     r0,r0,r6              ;503
000362  2823              CMP      r0,#0x23              ;503
000364  d20d              BCS      |L1.898|
000366  4620              MOV      r0,r4                 ;505
000368  17e2              ASRS     r2,r4,#31             ;505
00036a  eb047252          ADD      r2,r4,r2,LSR #29      ;505
00036e  10d2              ASRS     r2,r2,#3              ;505
000370  eba402c2          SUB      r2,r4,r2,LSL #3       ;505
000374  ab04              ADD      r3,sp,#0x10           ;505
000376  f8237012          STRH     r7,[r3,r2,LSL #1]     ;505
00037a  1c60              ADDS     r0,r4,#1              ;505
00037c  b284              UXTH     r4,r0                 ;505
00037e  2700              MOVS     r7,#0                 ;506
000380  e03c              B        |L1.1020|
                  |L1.898|
000382  ebc500c5          RSB      r0,r5,r5,LSL #3       ;510
000386  ea4f0bd0          LSR      r11,r0,#3             ;510
00038a  eb07010b          ADD      r1,r7,r11             ;511
00038e  4620              MOV      r0,r4                 ;511
000390  17e2              ASRS     r2,r4,#31             ;511
000392  eb047252          ADD      r2,r4,r2,LSR #29      ;511
000396  10d2              ASRS     r2,r2,#3              ;511
000398  eba402c2          SUB      r2,r4,r2,LSL #3       ;511
00039c  ab04              ADD      r3,sp,#0x10           ;511
00039e  f8231012          STRH     r1,[r3,r2,LSL #1]     ;511
0003a2  1c60              ADDS     r0,r4,#1              ;511
0003a4  b284              UXTH     r4,r0                 ;511
0003a6  eb07000b          ADD      r0,r7,r11             ;512
0003aa  1a37              SUBS     r7,r6,r0              ;512
0003ac  e026              B        |L1.1020|
                  |L1.942|
0003ae  1bbd              SUBS     r5,r7,r6              ;517
0003b0  2064              MOVS     r0,#0x64              ;518
0003b2  4368              MULS     r0,r5,r0              ;518
0003b4  fbb0f0f6          UDIV     r0,r0,r6              ;518
0003b8  2823              CMP      r0,#0x23              ;518
0003ba  d20e              BCS      |L1.986|
0003bc  4620              MOV      r0,r4                 ;520
0003be  17e2              ASRS     r2,r4,#31             ;520
0003c0  eb047252          ADD      r2,r4,r2,LSR #29      ;520
0003c4  10d2              ASRS     r2,r2,#3              ;520
0003c6  eba402c2          SUB      r2,r4,r2,LSL #3       ;520
0003ca  ab04              ADD      r3,sp,#0x10           ;520
0003cc  f8237012          STRH     r7,[r3,r2,LSL #1]     ;520
0003d0  1c60              ADDS     r0,r4,#1              ;520
0003d2  b284              UXTH     r4,r0                 ;520
0003d4  2700              MOVS     r7,#0                 ;521
0003d6  e011              B        |L1.1020|
                  |L1.984|
0003d8  e062              B        |L1.1184|
                  |L1.986|
0003da  ea4f0bd5          LSR      r11,r5,#3             ;525
0003de  eba7010b          SUB      r1,r7,r11             ;526
0003e2  4620              MOV      r0,r4                 ;526
0003e4  17e2              ASRS     r2,r4,#31             ;526
0003e6  eb047252          ADD      r2,r4,r2,LSR #29      ;526
0003ea  10d2              ASRS     r2,r2,#3              ;526
0003ec  eba402c2          SUB      r2,r4,r2,LSL #3       ;526
0003f0  ab04              ADD      r3,sp,#0x10           ;526
0003f2  f8231012          STRH     r1,[r3,r2,LSL #1]     ;526
0003f6  1c60              ADDS     r0,r4,#1              ;526
0003f8  b284              UXTH     r4,r0                 ;526
0003fa  465f              MOV      r7,r11                ;527
                  |L1.1020|
0003fc  9809              LDR      r0,[sp,#0x24]         ;530
0003fe  2801              CMP      r0,#1                 ;530
000400  d113              BNE      |L1.1066|
000402  4823              LDR      r0,|L1.1168|
000404  f8b00320          LDRH     r0,[r0,#0x320]        ;532  ; TrackBitFlow
000408  f5b07f48          CMP      r0,#0x320             ;532
00040c  da0c              BGE      |L1.1064|
00040e  2102              MOVS     r1,#2                 ;533
000410  481f              LDR      r0,|L1.1168|
000412  f8b02320          LDRH     r2,[r0,#0x320]        ;533  ; TrackBitFlow
000416  f8b00320          LDRH     r0,[r0,#0x320]        ;533  ; TrackBitFlow
00041a  1c40              ADDS     r0,r0,#1              ;533
00041c  4b1c              LDR      r3,|L1.1168|
00041e  f8a30320          STRH     r0,[r3,#0x320]        ;533
000422  4618              MOV      r0,r3                 ;533
000424  5481              STRB     r1,[r0,r2]            ;533
000426  e036              B        |L1.1174|
                  |L1.1064|
000428  e0c0              B        |L1.1452|
                  |L1.1066|
00042a  980a              LDR      r0,[sp,#0x28]         ;539
00042c  2800              CMP      r0,#0                 ;539
00042e  dd13              BLE      |L1.1112|
000430  4817              LDR      r0,|L1.1168|
000432  f8b00320          LDRH     r0,[r0,#0x320]        ;541  ; TrackBitFlow
000436  f5b07f48          CMP      r0,#0x320             ;541
00043a  da0c              BGE      |L1.1110|
00043c  2101              MOVS     r1,#1                 ;542
00043e  4814              LDR      r0,|L1.1168|
000440  f8b02320          LDRH     r2,[r0,#0x320]        ;542  ; TrackBitFlow
000444  f8b00320          LDRH     r0,[r0,#0x320]        ;542  ; TrackBitFlow
000448  1c40              ADDS     r0,r0,#1              ;542
00044a  4b11              LDR      r3,|L1.1168|
00044c  f8a30320          STRH     r0,[r3,#0x320]        ;542
000450  4618              MOV      r0,r3                 ;542
000452  5481              STRB     r1,[r0,r2]            ;542
000454  e01f              B        |L1.1174|
                  |L1.1110|
000456  e0a9              B        |L1.1452|
                  |L1.1112|
000458  480d              LDR      r0,|L1.1168|
00045a  f8b00320          LDRH     r0,[r0,#0x320]        ;548  ; TrackBitFlow
00045e  f5b07f48          CMP      r0,#0x320             ;548
000462  da17              BGE      |L1.1172|
000464  2100              MOVS     r1,#0                 ;549
000466  480a              LDR      r0,|L1.1168|
000468  f8b02320          LDRH     r2,[r0,#0x320]        ;549  ; TrackBitFlow
00046c  f8b00320          LDRH     r0,[r0,#0x320]        ;549  ; TrackBitFlow
000470  1c40              ADDS     r0,r0,#1              ;549
000472  4b07              LDR      r3,|L1.1168|
000474  f8a30320          STRH     r0,[r3,#0x320]        ;549
000478  4618              MOV      r0,r3                 ;549
00047a  5481              STRB     r1,[r0,r2]            ;549
00047c  e00b              B        |L1.1174|
00047e  0000              DCW      0x0000
                  |L1.1152|
                          DCD      PARITY_TAB
                  |L1.1156|
                          DCD      Track1TimeFlow
                  |L1.1160|
                          DCD      Track2TimeFlow
                  |L1.1164|
                          DCD      Track3TimeFlow
                  |L1.1168|
                          DCD      TrackBitFlow
                  |L1.1172|
000494  e08a              B        |L1.1452|
                  |L1.1174|
000496  2000              MOVS     r0,#0                 ;554
000498  900b              STR      r0,[sp,#0x2c]         ;554
00049a  900a              STR      r0,[sp,#0x28]         ;555
00049c  9009              STR      r0,[sp,#0x24]         ;556
00049e  e07c              B        |L1.1434|
                  |L1.1184|
0004a0  f1ba0f82          CMP      r10,#0x82             ;559
0004a4  db79              BLT      |L1.1434|
0004a6  f04f0b00          MOV      r11,#0                ;561
0004aa  e02b              B        |L1.1284|
                  |L1.1196|
0004ac  f10b0b01          ADD      r11,r11,#1            ;564
0004b0  f1bb0f0a          CMP      r11,#0xa              ;565
0004b4  d900              BLS      |L1.1208|
0004b6  e027              B        |L1.1288|
                  |L1.1208|
0004b8  4620              MOV      r0,r4                 ;567
0004ba  17e1              ASRS     r1,r4,#31             ;567
0004bc  eb047151          ADD      r1,r4,r1,LSR #29      ;567
0004c0  10c9              ASRS     r1,r1,#3              ;567
0004c2  eba401c1          SUB      r1,r4,r1,LSL #3       ;567
0004c6  aa04              ADD      r2,sp,#0x10           ;567
0004c8  f8226011          STRH     r6,[r2,r1,LSL #1]     ;567
0004cc  1c60              ADDS     r0,r4,#1              ;567
0004ce  b284              UXTH     r4,r0                 ;567
0004d0  1bbf              SUBS     r7,r7,r6              ;568
0004d2  2108              MOVS     r1,#8                 ;569
0004d4  a804              ADD      r0,sp,#0x10           ;569
0004d6  f7fffffe          BL       PllSmooth
0004da  4606              MOV      r6,r0                 ;569
0004dc  48fe              LDR      r0,|L1.2264|
0004de  f8b00320          LDRH     r0,[r0,#0x320]        ;570  ; TrackBitFlow
0004e2  f5b07f48          CMP      r0,#0x320             ;570
0004e6  da0c              BGE      |L1.1282|
0004e8  2102              MOVS     r1,#2                 ;571
0004ea  48fb              LDR      r0,|L1.2264|
0004ec  f8b02320          LDRH     r2,[r0,#0x320]        ;571  ; TrackBitFlow
0004f0  f8b00320          LDRH     r0,[r0,#0x320]        ;571  ; TrackBitFlow
0004f4  1c40              ADDS     r0,r0,#1              ;571
0004f6  4bf8              LDR      r3,|L1.2264|
0004f8  f8a30320          STRH     r0,[r3,#0x320]        ;571
0004fc  4618              MOV      r0,r3                 ;571
0004fe  5481              STRB     r1,[r0,r2]            ;571
000500  e000              B        |L1.1284|
                  |L1.1282|
000502  e001              B        |L1.1288|
                  |L1.1284|
000504  42b7              CMP      r7,r6                 ;562
000506  dad1              BGE      |L1.1196|
                  |L1.1288|
000508  bf00              NOP                            ;566
00050a  2000              MOVS     r0,#0                 ;575
00050c  9009              STR      r0,[sp,#0x24]         ;575
00050e  900a              STR      r0,[sp,#0x28]         ;576
000510  900b              STR      r0,[sp,#0x2c]         ;577
000512  2064              MOVS     r0,#0x64              ;578
000514  4378              MULS     r0,r7,r0              ;578
000516  fb90f5f6          SDIV     r5,r0,r6              ;578
00051a  2d28              CMP      r5,#0x28              ;579
00051c  d216              BCS      |L1.1356|
00051e  1e60              SUBS     r0,r4,#1              ;581
000520  17c1              ASRS     r1,r0,#31             ;581
000522  eb007151          ADD      r1,r0,r1,LSR #29      ;581
000526  10c9              ASRS     r1,r1,#3              ;581
000528  eba001c1          SUB      r1,r0,r1,LSL #3       ;581
00052c  aa04              ADD      r2,sp,#0x10           ;581
00052e  f8321011          LDRH     r1,[r2,r1,LSL #1]     ;581
000532  4439              ADD      r1,r1,r7              ;581
000534  b28a              UXTH     r2,r1                 ;581
000536  17c1              ASRS     r1,r0,#31             ;581
000538  eb007151          ADD      r1,r0,r1,LSR #29      ;581
00053c  10c9              ASRS     r1,r1,#3              ;581
00053e  eba001c1          SUB      r1,r0,r1,LSL #3       ;581
000542  ab04              ADD      r3,sp,#0x10           ;581
000544  f8232011          STRH     r2,[r3,r1,LSL #1]     ;581
000548  2700              MOVS     r7,#0                 ;582
00054a  e026              B        |L1.1434|
                  |L1.1356|
00054c  2d46              CMP      r5,#0x46              ;584
00054e  d321              BCC      |L1.1428|
000550  4620              MOV      r0,r4                 ;586
000552  17e2              ASRS     r2,r4,#31             ;586
000554  eb047252          ADD      r2,r4,r2,LSR #29      ;586
000558  10d2              ASRS     r2,r2,#3              ;586
00055a  eba402c2          SUB      r2,r4,r2,LSL #3       ;586
00055e  ab04              ADD      r3,sp,#0x10           ;586
000560  f8237012          STRH     r7,[r3,r2,LSL #1]     ;586
000564  1c60              ADDS     r0,r4,#1              ;586
000566  b284              UXTH     r4,r0                 ;586
000568  48db              LDR      r0,|L1.2264|
00056a  f8b00320          LDRH     r0,[r0,#0x320]        ;587  ; TrackBitFlow
00056e  f5b07f48          CMP      r0,#0x320             ;587
000572  da0c              BGE      |L1.1422|
000574  2102              MOVS     r1,#2                 ;588
000576  48d8              LDR      r0,|L1.2264|
000578  f8b02320          LDRH     r2,[r0,#0x320]        ;588  ; TrackBitFlow
00057c  f8b00320          LDRH     r0,[r0,#0x320]        ;588  ; TrackBitFlow
000580  1c40              ADDS     r0,r0,#1              ;588
000582  4bd5              LDR      r3,|L1.2264|
000584  f8a30320          STRH     r0,[r3,#0x320]        ;588
000588  4618              MOV      r0,r3                 ;588
00058a  5481              STRB     r1,[r0,r2]            ;588
00058c  e000              B        |L1.1424|
                  |L1.1422|
00058e  e00d              B        |L1.1452|
                  |L1.1424|
000590  2700              MOVS     r7,#0                 ;591
000592  e002              B        |L1.1434|
                  |L1.1428|
000594  2001              MOVS     r0,#1                 ;595
000596  9009              STR      r0,[sp,#0x24]         ;595
000598  900a              STR      r0,[sp,#0x28]         ;596
                  |L1.1434|
00059a  bf00              NOP                            ;412
                  |L1.1436|
00059c  f1080001          ADD      r0,r8,#1              ;401
0005a0  fa1ff880          UXTH     r8,r0                 ;401
                  |L1.1444|
0005a4  9803              LDR      r0,[sp,#0xc]          ;401
0005a6  4580              CMP      r8,r0                 ;401
0005a8  f6ffae29          BLT      |L1.510|
                  |L1.1452|
0005ac  bf00              NOP                            ;535
0005ae  980d              LDR      r0,[sp,#0x34]         ;602
0005b0  b930              CBNZ     r0,|L1.1472|
0005b2  f2403122          MOV      r1,#0x322             ;604
0005b6  48c8              LDR      r0,|L1.2264|
0005b8  f7fffffe          BL       __aeabi_memclr
0005bc  2000              MOVS     r0,#0                 ;605
0005be  e613              B        |L1.488|
                  |L1.1472|
0005c0  2001              MOVS     r0,#1                 ;609
0005c2  e611              B        |L1.488|
;;;612    
                          ENDP

                  DecodeTrackData PROC
;;;622    ********************************************************************/
;;;623    uint8_t DecodeTrackData(uint8_t type)
0005c4  e92d4ff0          PUSH     {r4-r11,lr}
;;;624    {
0005c8  b08d              SUB      sp,sp,#0x34
0005ca  4605              MOV      r5,r0
;;;625    	TRACKDATA *lpOutTrackData;
;;;626    	uint16_t i,j,k,m,FirstBitCnt,SndBitCnt,FirstOkByteCnt,SndOkByteCnt;
;;;627    	uint8_t BitCnt = 0,SyncStep,bFlag,bData;
0005cc  f04f0800          MOV      r8,#0
;;;628    	uint8_t bSyncHead,bCorrectDirt,bCheckOk,DecodeTimes,bFinalSucc,bFinalCorrect;
;;;629    	uint8_t bEachCorrected;			//中间只要有纠错或者2地方,放弃纠错
;;;630    		
;;;631    	if (0x15 == type|| 0x16 == type || 0x17 == type || 0x18 == type)
0005d0  2d15              CMP      r5,#0x15
0005d2  d005              BEQ      |L1.1504|
0005d4  2d16              CMP      r5,#0x16
0005d6  d003              BEQ      |L1.1504|
0005d8  2d17              CMP      r5,#0x17
0005da  d001              BEQ      |L1.1504|
0005dc  2d18              CMP      r5,#0x18
0005de  d101              BNE      |L1.1508|
                  |L1.1504|
;;;632    	{
;;;633    		lpOutTrackData = &Track1Data;
0005e0  4fbe              LDR      r7,|L1.2268|
0005e2  e00f              B        |L1.1540|
                  |L1.1508|
;;;634    	}
;;;635    	else if (0x25 == type)
0005e4  2d25              CMP      r5,#0x25
0005e6  d101              BNE      |L1.1516|
;;;636    	{
;;;637    		lpOutTrackData = &Track2Data;
0005e8  4fbd              LDR      r7,|L1.2272|
0005ea  e00b              B        |L1.1540|
                  |L1.1516|
;;;638    	}
;;;639    	else if (0x35 == type || 0x36 == type || 0x37 == type)
0005ec  2d35              CMP      r5,#0x35
0005ee  d003              BEQ      |L1.1528|
0005f0  2d36              CMP      r5,#0x36
0005f2  d001              BEQ      |L1.1528|
0005f4  2d37              CMP      r5,#0x37
0005f6  d101              BNE      |L1.1532|
                  |L1.1528|
;;;640    	{
;;;641    		lpOutTrackData = &Track3Data;
0005f8  4fba              LDR      r7,|L1.2276|
0005fa  e003              B        |L1.1540|
                  |L1.1532|
;;;642    	}
;;;643    	else
;;;644    		return 2;
0005fc  2002              MOVS     r0,#2
                  |L1.1534|
;;;645    
;;;646    	memset((uint8_t*)lpOutTrackData,0,sizeof(TRACKDATA));
;;;647    	if (!TrackBitFlow.Length)
;;;648    		return 2;
;;;649    	
;;;650    	FirstBitCnt = 0;
;;;651    	SndBitCnt = 0;
;;;652    	FirstOkByteCnt = 0;
;;;653    	SndOkByteCnt = 0;
;;;654    	bFinalSucc = 0;
;;;655    
;;;656    	for(DecodeTimes = 0; DecodeTimes < 2; DecodeTimes ++)				//正反双向解码
;;;657    	{
;;;658    		bSyncHead = 0;
;;;659    		SyncStep = 0;
;;;660    		bFinalCorrect = 0;
;;;661    		bEachCorrected = 0;
;;;662    		
;;;663    		for(k = 0; k < TrackBitFlow.Length; k ++)
;;;664    		{
;;;665    			if(DecodeTimes == 0)									    //正向解
;;;666    			{
;;;667    				i = k;
;;;668    			}
;;;669    			else														//反向解
;;;670    			{
;;;671    				i = TrackBitFlow.Length - (k + 1);
;;;672    			}
;;;673    			bData = TrackBitFlow.Value[i];
;;;674    			if(bData == 2)												//缺省全部转换为零解
;;;675    			{
;;;676    				bData = 0;
;;;677    			}
;;;678    			if(!bSyncHead)												//找同步头
;;;679    			{
;;;680    				if (7 == (type & 0x0F))
;;;681    				{
;;;682    					switch (SyncStep)
;;;683    					{
;;;684    						case 0:
;;;685    							if(bData == 1)
;;;686    							{
;;;687    								SyncStep = 1;
;;;688    							}
;;;689    							break;
;;;690    						case 1:
;;;691    							if(bData == 0)
;;;692    							{
;;;693    								SyncStep = 2;
;;;694    							}
;;;695    							else
;;;696    							{
;;;697    								SyncStep = 0;
;;;698    							}
;;;699    							break;
;;;700    						case 2:
;;;701    							if(bData == 1)
;;;702    							{
;;;703    								SyncStep = 3;
;;;704    							}
;;;705    							else
;;;706    							{
;;;707    								SyncStep = 0;
;;;708    							}
;;;709    							break;
;;;710    						case 3:
;;;711    							if(bData == 0)
;;;712    							{
;;;713    								SyncStep = 4;
;;;714    							}
;;;715    							else
;;;716    							{
;;;717    								SyncStep = 0;
;;;718    							}
;;;719    							break;
;;;720    						case 4:
;;;721    							if(bData == 0)
;;;722    							{
;;;723    								SyncStep = 5;
;;;724    							}
;;;725    							else
;;;726    							{
;;;727    								SyncStep = 0;
;;;728    							}
;;;729    							break;
;;;730    						case 5:
;;;731    							if(bData == 0)
;;;732    							{
;;;733    								SyncStep = 6;
;;;734    							}
;;;735    							else
;;;736    							{
;;;737    								SyncStep = 0;
;;;738    							}
;;;739    							break;
;;;740    						case 6:
;;;741    							if(bData == 1)							//同步上了
;;;742    							{
;;;743    								bSyncHead = 1;
;;;744    								BitCnt = 0;
;;;745    								memset((uint8_t*)&TempTrackDirtData,0,sizeof(TempTrackDirtData));
;;;746    								memset((uint8_t*)&TempTrackData,0,sizeof(TempTrackData));
;;;747    								TempTrackData.Value[0] = 0x45;
;;;748    								TempTrackData.Length = 1;
;;;749    								TempTrackDirtData.Length = 1;
;;;750    							}
;;;751    							SyncStep = 0;
;;;752    							break;
;;;753    					}
;;;754    				}
;;;755    				else if(5 == (type & 0x0F))
;;;756    				{
;;;757    					switch (SyncStep)
;;;758    					{
;;;759    						case 0:
;;;760    							if(bData == 1)
;;;761    							{
;;;762    								SyncStep = 1;
;;;763    							}
;;;764    							break;
;;;765    						case 1:
;;;766    							if(bData == 1)
;;;767    							{
;;;768    								SyncStep = 2;
;;;769    							}
;;;770    							else
;;;771    							{
;;;772    								SyncStep = 0;
;;;773    							}
;;;774    							break;
;;;775    						case 2:
;;;776    							if(bData == 0)
;;;777    							{
;;;778    								SyncStep = 3;
;;;779    							}
;;;780    							else
;;;781    							{
;;;782    								SyncStep = 0;
;;;783    							}
;;;784    							break;
;;;785    						case 3:
;;;786    							if(bData == 1)
;;;787    							{
;;;788    								SyncStep = 4;
;;;789    							}
;;;790    							else
;;;791    							{
;;;792    								SyncStep = 0;
;;;793    							}
;;;794    							break;
;;;795    						case 4:
;;;796    							if(bData == 0)											//同步上了
;;;797    							{
;;;798    								bSyncHead = 1;
;;;799    								BitCnt = 0;
;;;800    								memset((uint8_t*)&TempTrackDirtData,0,sizeof(TempTrackDirtData));
;;;801    								memset((uint8_t*)&TempTrackData,0,sizeof(TempTrackData));
;;;802    								TempTrackData.Value[0] = 0x0B;
;;;803    								TempTrackData.Length = 1;
;;;804    								TempTrackDirtData.Length = 1;
;;;805    							}
;;;806    							SyncStep = 0;
;;;807    							break;
;;;808    					}
;;;809    				}
;;;810    				else if(6 == (type & 0x0F))											//CADMV标准
;;;811    				{
;;;812    					switch (SyncStep)
;;;813    					{
;;;814    						case 0:
;;;815    							if(bData == 1)
;;;816    							{
;;;817    								SyncStep = 1;
;;;818    							} else {
;;;819    								SyncStep = 0;
;;;820    							}
;;;821    							break;
;;;822    						case 1:
;;;823    							if(bData == 0)
;;;824    							{
;;;825    								SyncStep = 2;
;;;826    							}
;;;827    							else
;;;828    							{
;;;829    								SyncStep = 0;
;;;830    							}
;;;831    							break;
;;;832    						case 2:
;;;833    							memset((uint8_t*)&TempTrackDirtData, 0, sizeof(TempTrackDirtData));
;;;834    							memset((uint8_t*)&TempTrackData, 0, sizeof(TempTrackData));
;;;835    							if(bData == 1 && 0x16 == type)							//一磁道 Start Sentinel is % (05H)
;;;836    							{
;;;837    								TempTrackData.Value[0] = 0x05;
;;;838    								SyncStep = 3;
;;;839    							}
;;;840    							else if(bData == 0 && 0x36 == type)						//三磁道 Start Sentinel is ! (01H)
;;;841    							{
;;;842    								TempTrackData.Value[0] = 0x01;
;;;843    								SyncStep = 3;
;;;844    							}
;;;845    							else
;;;846    							{
;;;847    								SyncStep = 0;
;;;848    							}
;;;849    							break;
;;;850    						case 3:
;;;851    							if(bData == 0)
;;;852    							{
;;;853    								SyncStep = 4;
;;;854    							}
;;;855    							else
;;;856    							{
;;;857    								SyncStep = 0;
;;;858    							}
;;;859    							break;
;;;860    						case 4:
;;;861    							if(bData == 0)
;;;862    							{
;;;863    								SyncStep = 5;
;;;864    							}
;;;865    							else
;;;866    							{
;;;867    								SyncStep = 0;
;;;868    							}
;;;869    							break;
;;;870    						case 5:
;;;871    							if(bData == 0)											//同步上了
;;;872    							{
;;;873    								bSyncHead = 1;
;;;874    								BitCnt = 0;
;;;875    								TempTrackData.Length = 1;
;;;876    								TempTrackDirtData.Length = 1;
;;;877    							}
;;;878    							SyncStep = 0;
;;;879    							break;
;;;880    					}
;;;881    				}
;;;882    				else if(8 == (type & 0x0F))											//JIS2标准
;;;883    				{
;;;884    					switch(SyncStep)
;;;885    					{
;;;886    						case 0:
;;;887    							if(bData == 1)
;;;888    							{
;;;889    								SyncStep = 1;
;;;890    							}
;;;891    							break;
;;;892    						case 1:
;;;893    							if(bData == 1)
;;;894    							{
;;;895    								SyncStep = 2;
;;;896    							}
;;;897    							else
;;;898    							{
;;;899    								SyncStep = 0;
;;;900    							}
;;;901    							break;
;;;902    						case 2:
;;;903    							if(bData == 1)
;;;904    							{
;;;905    								SyncStep = 3;
;;;906    							}
;;;907    							else
;;;908    							{
;;;909    								SyncStep = 0;
;;;910    							}
;;;911    							break;
;;;912    						case 3:
;;;913    							if(bData == 1)
;;;914    							{
;;;915    								SyncStep = 4;
;;;916    							}
;;;917    							else
;;;918    							{
;;;919    								SyncStep = 0;
;;;920    							}
;;;921    							break;
;;;922    						case 4:
;;;923    							if(bData == 1)
;;;924    							{
;;;925    								SyncStep = 5;
;;;926    							}
;;;927    							else
;;;928    							{
;;;929    								SyncStep = 0;
;;;930    							}
;;;931    							break;
;;;932    						case 5:
;;;933    							if(bData == 1)
;;;934    							{
;;;935    								SyncStep = 6;
;;;936    							}
;;;937    							else
;;;938    							{
;;;939    								SyncStep = 0;
;;;940    							}
;;;941    							break;
;;;942    						case 6:
;;;943    							if(bData == 1)
;;;944    							{
;;;945    								SyncStep = 7;
;;;946    							}
;;;947    							else
;;;948    							{
;;;949    								SyncStep = 0;
;;;950    							}
;;;951    							break;
;;;952    						case 7:
;;;953    							if(bData == 1)							//同步上了
;;;954    							{
;;;955    								bSyncHead = 1;
;;;956    								BitCnt = 0;
;;;957    								memset((uint8_t*)&TempTrackDirtData,0,sizeof(TempTrackDirtData));
;;;958    								memset((uint8_t*)&TempTrackData,0,sizeof(TempTrackData));
;;;959    								TempTrackData.Value[0] = 0xff; //JIS2为0Xff
;;;960    								TempTrackData.Length = 1;
;;;961    								TempTrackDirtData.Length = 1;
;;;962    							}
;;;963    							SyncStep = 0;
;;;964    							break;
;;;965    					}
;;;966    				}
;;;967    			}
;;;968    			else
;;;969    			{
;;;970    				if(TrackBitFlow.Value[i] == 0)
;;;971    				{
;;;972    					ClearBit(&TempTrackData.Value[TempTrackData.Length],BitCnt);		
;;;973    				}
;;;974    				else if(TrackBitFlow.Value[i] == 1)
;;;975    				{
;;;976    					SetBit(&TempTrackData.Value[TempTrackData.Length],BitCnt);
;;;977    				}
;;;978    				else //if(TrackBitFlow.Value[i] == 2)
;;;979    				{
;;;980    					ClearBit(&TempTrackData.Value[TempTrackData.Length],BitCnt);
;;;981    					SetBit(&TempTrackDirtData.Value[TempTrackDirtData.Length],BitCnt);
;;;982    				}
;;;983    				BitCnt ++;
;;;984    				if (7 == (type & 0x0F))
;;;985    				{
;;;986    					BitCnt %= 7;
;;;987    				}
;;;988    				else if(5 == (type & 0x0F))
;;;989    				{
;;;990    					BitCnt %= 5;
;;;991    				}
;;;992    				else if(6 == (type & 0x0F))
;;;993    				{
;;;994    					BitCnt %= 6;
;;;995    				}
;;;996    				else if(8 == (type & 0x0F))
;;;997    				{
;;;998    					BitCnt %= 8;
;;;999    				}
;;;1000   				
;;;1001   				if(BitCnt == 0)																//BitCnt位一个字节			
;;;1002   				{
;;;1003   					if (TempTrackData.Length < TRACKDATALENGTH-1  )
;;;1004   					{
;;;1005   						TempTrackData.Length ++;
;;;1006   						TempTrackDirtData.Length ++;
;;;1007   					}
;;;1008   					else
;;;1009   					{
;;;1010   						break;
;;;1011   					}
;;;1012   				}
;;;1013   			}
;;;1014   		}
;;;1015   
;;;1016   		type &= 0x0F;																		//取磁道数据编码位数
;;;1017   		if(bSyncHead)																		//同步上了,校验数据
;;;1018   		{
;;;1019   			if(DecodeTimes == 0)
;;;1020   			{
;;;1021   				if (7 == type)
;;;1022   				{
;;;1023   					FirstBitCnt = TempTrackData.Length * 7;
;;;1024   				}
;;;1025   				else if(5 == type)
;;;1026   				{
;;;1027   					FirstBitCnt = TempTrackData.Length * 5;
;;;1028   				}
;;;1029   				else if(6 == type)
;;;1030   				{
;;;1031   					FirstBitCnt = TempTrackData.Length * 6;
;;;1032   				}
;;;1033   				else if(8 == type)
;;;1034   				{
;;;1035   					FirstBitCnt = TempTrackData.Length * 5;
;;;1036   				}
;;;1037   			}
;;;1038   			else
;;;1039   			{
;;;1040   				if (7 == type)
;;;1041   				{
;;;1042   					SndBitCnt = TempTrackData.Length * 7;
;;;1043   				}
;;;1044   				else if (5 == type)
;;;1045   				{
;;;1046   					SndBitCnt = TempTrackData.Length * 5;
;;;1047   				}
;;;1048   				else if (6 == type)
;;;1049   				{
;;;1050   					SndBitCnt = TempTrackData.Length * 6;
;;;1051   				}
;;;1052   				else if (8 == type)
;;;1053   				{
;;;1054   					SndBitCnt = TempTrackData.Length * 8;
;;;1055   				}
;;;1056   			}
;;;1057   			bFlag = 0;
;;;1058   			for(j = 0; (bFlag == 0) && (j < 2); j++)										//查找结束符
;;;1059   			{
;;;1060   				for(i = 1; i < TempTrackData.Length; i ++)
;;;1061   				{
;;;1062   					
;;;1063   					if (7 == type)
;;;1064   					{
;;;1065   						bData = 0x7F;
;;;1066   					}
;;;1067   					else if (6 == type)
;;;1068   					{
;;;1069   						bData = 0x3F;
;;;1070   					}
;;;1071   					else if (5 == type)
;;;1072   					{
;;;1073   						bData = 0x1F;
;;;1074   					}
;;;1075   					else if (8 == type)
;;;1076   					{
;;;1077   						bData = 0xFF;
;;;1078   					}
;;;1079   					if(
;;;1080   					((8 != type)&&((TempTrackData.Value[i] & bData) == 0x1F)) ||
;;;1081   					((8 == type)&&((TempTrackData.Value[i] & bData) == 0xFF))
;;;1082   					)																			//找到结束符
;;;1083   					{
;;;1084   						TempTrackData.Length = i + 2;											//提前结束
;;;1085   						TempTrackDirtData.Length = i + 2;
;;;1086   						bFlag = 1;
;;;1087   						break;
;;;1088   					}
;;;1089   				}
;;;1090   				if(bFlag == 0 && j == 0 && 6 != type)											//CADMV标准无字符校验	
;;;1091   				{
;;;1092   					for(i = 0; i < TempTrackData.Length; i ++)									//横向纠错
;;;1093   					{
;;;1094   						if(!CheckOddParity(TempTrackData.Value[i]))								//奇校验字节OK
;;;1095   						{
;;;1096   							if(CheckDirtOnlyOne(TempTrackDirtData.Value[i]))
;;;1097   							{
;;;1098   								TempTrackData.Value[i] ^= TempTrackDirtData.Value[i]; 
;;;1099   								if (7 == type)
;;;1100   								{
;;;1101   									bData = 0x7F;
;;;1102   								}
;;;1103   								else if(5 == type)
;;;1104   								{
;;;1105   									bData = 0x1F;
;;;1106   								}
;;;1107   								else if(8 == type)
;;;1108   								{
;;;1109   									bData = 0xFF;
;;;1110   								}
;;;1111   								
;;;1112   								if(
;;;1113   								((8 != type)&&((TempTrackData.Value[i] & bData) == 0x1F)) ||
;;;1114   								((8 == type)&&((TempTrackData.Value[i] & 0xFF) == 0xFF))
;;;1115   								)						//是结束符
;;;1116   								{
;;;1117   									bEachCorrected++;
;;;1118   									TempTrackDirtData.Value[i] = 0x00;							//直接纠正,有个案例就错3位，但同时会引入上送错误卡号风险
;;;1119   									bFinalCorrect = 1;	
;;;1120   									break;
;;;1121   								}
;;;1122   								else
;;;1123   								{
;;;1124   									TempTrackData.Value[i] ^= TempTrackDirtData.Value[i];		//异或回去
;;;1125   								}
;;;1126   							}
;;;1127   						}
;;;1128   					}
;;;1129   				}
;;;1130   			}
;;;1131   			if(bFlag == 1 && 6 != type)															//校验纠错
;;;1132   			{
;;;1133   				do
;;;1134   				{
;;;1135   					bCheckOk = 1;
;;;1136   					bCorrectDirt = 0;
;;;1137   					for(i = 0; i < TempTrackData.Length; i ++)									//横向纠错
;;;1138   					{
;;;1139   						if(!CheckOddParity(TempTrackData.Value[i]))								//奇校验字节OK
;;;1140   						{
;;;1141   							if(DecodeTimes == 0)
;;;1142   							{
;;;1143   								if(FirstOkByteCnt < 8)							
;;;1144   								{
;;;1145   									FirstOkByteCnt = 0;
;;;1146   								}
;;;1147   							}
;;;1148   							else
;;;1149   							{
;;;1150   								if(SndOkByteCnt < 8)
;;;1151   								{
;;;1152   									SndOkByteCnt = 0;
;;;1153   								}
;;;1154   							}
;;;1155   							bCheckOk = 0;
;;;1156   							if(CheckDirtOnlyOne(TempTrackDirtData.Value[i]))
;;;1157   							{
;;;1158   								bEachCorrected++;
;;;1159   								TempTrackData.Value[i] ^= TempTrackDirtData.Value[i];
;;;1160   								TempTrackDirtData.Value[i] = 0x00;
;;;1161   								bCorrectDirt = 1;
;;;1162   								bFinalCorrect = 1;
;;;1163   							}
;;;1164   						}
;;;1165   						else																	//必须要连续错8BYTE才认为正确磁卡数据
;;;1166   						{
;;;1167   							if(DecodeTimes == 0)
;;;1168   							{
;;;1169   								FirstOkByteCnt++;
;;;1170   							}
;;;1171   							else
;;;1172   							{
;;;1173   								SndOkByteCnt++;
;;;1174   							}
;;;1175   						}
;;;1176   					}
;;;1177   					if (7 == type)
;;;1178   					{
;;;1179   						bData = 6;
;;;1180   					}
;;;1181   					else if (5 == type)
;;;1182   					{
;;;1183   						bData = 4;
;;;1184   					}
;;;1185   					else if( 8 == type)
;;;1186   					{
;;;1187   						bData = 7;
;;;1188   					}
;;;1189   					for(i = 0; i < bData; i ++)
;;;1190   					{
;;;1191   						if(!CheckLrcEvenParity(TempTrackData.Value,TempTrackData.Length,(uint8_t)i))					//纵向校验错
;;;1192   						{
;;;1193   							bCheckOk = 0;
;;;1194   							if(CheckLrcDirtOnlyOne(&j,TempTrackDirtData.Value,TempTrackDirtData.Length,(uint8_t)i))	//有唯一的污染位
;;;1195   							{
;;;1196   								bEachCorrected++;
;;;1197   								CplBit(&TempTrackData.Value[j],(uint8_t)i);
;;;1198   								ClearBit(&TempTrackDirtData.Value[j],(uint8_t)i);
;;;1199   								bCorrectDirt = 1;
;;;1200   								bFinalCorrect = 1;
;;;1201   							}
;;;1202   						}
;;;1203   					}
;;;1204   				}while(bCorrectDirt);
;;;1205   				if(!bCheckOk)																					//校验通过
;;;1206   				{
;;;1207   					do																						//交叉校验 
;;;1208   					{
;;;1209   						bCheckOk = 1;
;;;1210   						bCorrectDirt = 0;
;;;1211   						k = 0;
;;;1212   						m = 0;
;;;1213   						for(i = 0; i < TempTrackData.Length; i ++)									//横向纠错
;;;1214   						{
;;;1215   							if(!CheckOddParity(TempTrackData.Value[i]))								//奇校验字节OK
;;;1216   							{
;;;1217   								bCheckOk = 0;
;;;1218   								k++;
;;;1219   								m = i;
;;;1220   								if (7 == type)
;;;1221   								{
;;;1222   									bData = 6;
;;;1223   								}
;;;1224   								else if (5 == type)
;;;1225   								{
;;;1226   									bData = 4;
;;;1227   								}
;;;1228   								else if (8 == type)
;;;1229   								{
;;;1230   									bData = 7;
;;;1231   								}
;;;1232   								
;;;1233   								for(j = 0; j < bData; j ++)
;;;1234   								{
;;;1235   									if(!CheckLrcEvenParity(TempTrackData.Value,TempTrackData.Length,(uint8_t)j))					//纵向校验错
;;;1236   									{
;;;1237   										bEachCorrected++;
;;;1238   										CplBit(&TempTrackData.Value[i],(uint8_t)j);
;;;1239   										bCorrectDirt = 1;
;;;1240   										bFinalCorrect = 1;
;;;1241   										break;
;;;1242   									}
;;;1243   								}
;;;1244   							}
;;;1245   						}
;;;1246   						if(k == 1 && bCorrectDirt == 0)										//纵向校验正确，横向错在校验位，且只有一位
;;;1247   						{
;;;1248   							if (7 == type)
;;;1249   							{
;;;1250   								bData = 6;
;;;1251   							}
;;;1252   							else if (5 == type)
;;;1253   							{
;;;1254   								bData = 4;
;;;1255   							}
;;;1256   							else if (8 == type)
;;;1257   							{
;;;1258   								bData = 7;
;;;1259   							}
;;;1260   							bEachCorrected++;
;;;1261   							CplBit(&TempTrackData.Value[m],bData);
;;;1262   							bCorrectDirt = 1;
;;;1263   							bFinalCorrect = 1;
;;;1264   						}
;;;1265   						if (7 == type)
;;;1266   						{
;;;1267   							bData = 6;
;;;1268   						}
;;;1269   						else if (5 == type)
;;;1270   						{
;;;1271   							bData = 4;
;;;1272   						}
;;;1273   						else if (8 == type)
;;;1274   						{
;;;1275   							bData = 7;
;;;1276   						}
;;;1277   						
;;;1278   						for(j = 0; j < bData; j ++)
;;;1279   						{
;;;1280   							if(!CheckLrcEvenParity(TempTrackData.Value,TempTrackData.Length,(uint8_t)j))					//纵向校验错
;;;1281   							{
;;;1282   								bCheckOk = 0;
;;;1283   								break;
;;;1284   							}
;;;1285   						}
;;;1286   					}while(bCorrectDirt);
;;;1287   				}
;;;1288   				
;;;1289   				if(bCheckOk && (bEachCorrected <= ((type == 5) ? 3 * ERRLEVEL: ERRLEVEL)))					//校验通过，控制容错率
;;;1290   				{
;;;1291   					if(TempTrackData.Length >= 3)
;;;1292   					{
;;;1293   						bFlag = 0;
;;;1294   						for(i = 1; i < (TempTrackData.Length-2); i ++)										//去掉结束位和起始位
;;;1295   						{
;;;1296   							if (5 == type)
;;;1297   								TempTrackData.Value[i] &= 0x0F;
;;;1298   							else
;;;1299   								break;
;;;1300   							if(bFinalCorrect == 1)															//过滤纠错后的乱码
;;;1301   							{
;;;1302   								if(!((TempTrackData.Value[i] <= 0x09) || TempTrackData.Value[i] == 0x0E  || TempTrackData.Value[i] == 0x0D  || TempTrackData.Value[i] == 0x0C))
;;;1303   								{
;;;1304   									bFlag = 1;
;;;1305   								}
;;;1306   							}
;;;1307   						}
;;;1308   						if(bFlag == 0)
;;;1309   						{
;;;1310   							if(DecodeTimes == 0)															   //第一次解码拷贝到返回数据
;;;1311   							{
;;;1312   								for(i = 0; i < TempTrackData.Length; i++)										//转换成ASCII字符
;;;1313   								{
;;;1314   									if (7 == type)
;;;1315   									{
;;;1316   										lpOutTrackData->Value[i+1] = (TempTrackData.Value[i] & 0x3F) + 0x20;
;;;1317   									}
;;;1318   									else if (5 == type)
;;;1319   									{
;;;1320   										lpOutTrackData->Value[i+1] = (TempTrackData.Value[i] & 0x0F) + 0x30;
;;;1321   									}
;;;1322   									else if (8 == type)
;;;1323   									{
;;;1324   										lpOutTrackData->Value[i+1] = (TempTrackData.Value[i] & 0x7F);
;;;1325   									}
;;;1326   								}
;;;1327   								lpOutTrackData->Length = TempTrackData.Length+1; 	
;;;1328   							}
;;;1329   							else
;;;1330   							{
;;;1331   								if(TempTrackData.Length > lpOutTrackData->Length)
;;;1332   								{
;;;1333   									for(i = 0; i < TempTrackData.Length; i++)										//转换成ASCII字符
;;;1334   									{
;;;1335   										if (7 == type)
;;;1336   										{
;;;1337   											lpOutTrackData->Value[i+1] = (TempTrackData.Value[i] & 0x3F) + 0x20;
;;;1338   										}
;;;1339   										else if( 5 == type)
;;;1340   										{
;;;1341   											lpOutTrackData->Value[i+1] = (TempTrackData.Value[i] & 0x0F) + 0x30;
;;;1342   										}
;;;1343   										else if( 8 == type)
;;;1344   										{
;;;1345   											lpOutTrackData->Value[i+1] = (TempTrackData.Value[i] & 0x7F);
;;;1346   										}
;;;1347   									}
;;;1348   									lpOutTrackData->Length = TempTrackData.Length+1;
;;;1349   								}									
;;;1350   							}
;;;1351   							bFinalSucc = 1;
;;;1352   						}
;;;1353   					}
;;;1354   				}
;;;1355   			} else if (bFlag == 1 && 6 == type) {
;;;1356   				bData = 6;
;;;1357   				bCheckOk = 0;
;;;1358   				for(j = 0; j < bData; j ++)
;;;1359   				{
;;;1360   					if(!CheckLrcEvenParity(TempTrackData.Value,TempTrackData.Length,(uint8_t)j))		//纵向校验错
;;;1361   					{
;;;1362   						bCheckOk = 1;
;;;1363   						break;
;;;1364   					}
;;;1365   				}
;;;1366   				
;;;1367   				if (0 == bCheckOk) {																	//LRC校验通过
;;;1368   					if(DecodeTimes == 0)															   //第一次解码拷贝到返回数据
;;;1369   					{
;;;1370   						for(i = 0; i < TempTrackData.Length; i++)										//转换成ASCII字符
;;;1371   						{
;;;1372   							lpOutTrackData->Value[i+1] = TempTrackData.Value[i] + 0x20;
;;;1373   						}
;;;1374   						lpOutTrackData->Length = TempTrackData.Length+1;
;;;1375   					}
;;;1376   					else
;;;1377   					{
;;;1378   						if(TempTrackData.Length > lpOutTrackData->Length)
;;;1379   						{
;;;1380   							for(i = 0; i < TempTrackData.Length; i++)										//转换成ASCII字符
;;;1381   							{
;;;1382   								lpOutTrackData->Value[i+1] = TempTrackData.Value[i] + 0x20;
;;;1383   							}
;;;1384   							lpOutTrackData->Length = TempTrackData.Length+1;
;;;1385   						}									
;;;1386   					}
;;;1387   					bFinalSucc = 1;
;;;1388   				}
;;;1389   			}
;;;1390   		}
;;;1391   	}
;;;1392   	if(bFinalSucc == 1)
;;;1393   	{
;;;1394   		if(lpOutTrackData->Length < 4 )
;;;1395   		{
;;;1396   			return 2;										//数据长度为零，解码为空	
;;;1397   		}
;;;1398   		else
;;;1399   		{
;;;1400   			return 0;										//刷卡成功
;;;1401   		}
;;;1402   	}
;;;1403   	else
;;;1404   	{
;;;1405   		if(((FirstOkByteCnt >= 8 && FirstBitCnt >= 100) || (SndOkByteCnt >= 8 && SndBitCnt >= 100)))
;;;1406   		{
;;;1407   			return 1;									//刷卡失败
;;;1408   		}
;;;1409   		else
;;;1410   		{
;;;1411   			return 2;									//刷卡空
;;;1412   		}
;;;1413   	}
;;;1414   }
0005fe  b00d              ADD      sp,sp,#0x34
000600  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1540|
000604  216f              MOVS     r1,#0x6f              ;646
000606  4638              MOV      r0,r7                 ;646
000608  f7fffffe          BL       __aeabi_memclr
00060c  48b2              LDR      r0,|L1.2264|
00060e  f8b00320          LDRH     r0,[r0,#0x320]        ;647  ; TrackBitFlow
000612  b908              CBNZ     r0,|L1.1560|
000614  2002              MOVS     r0,#2                 ;648
000616  e7f2              B        |L1.1534|
                  |L1.1560|
000618  2000              MOVS     r0,#0                 ;650
00061a  900a              STR      r0,[sp,#0x28]         ;650
00061c  9009              STR      r0,[sp,#0x24]         ;651
00061e  9008              STR      r0,[sp,#0x20]         ;652
000620  9007              STR      r0,[sp,#0x1c]         ;653
000622  9002              STR      r0,[sp,#8]            ;654
000624  4681              MOV      r9,r0                 ;656
000626  e3f5              B        |L1.3604|
                  |L1.1576|
000628  2000              MOVS     r0,#0                 ;658
00062a  9005              STR      r0,[sp,#0x14]         ;658
00062c  4682              MOV      r10,r0                ;659
00062e  9001              STR      r0,[sp,#4]            ;660
000630  9000              STR      r0,[sp,#0]            ;661
000632  4683              MOV      r11,r0                ;663
000634  e1db              B        |L1.2542|
                  |L1.1590|
000636  f1b90f00          CMP      r9,#0                 ;665
00063a  d101              BNE      |L1.1600|
00063c  465c              MOV      r4,r11                ;667
00063e  e006              B        |L1.1614|
                  |L1.1600|
000640  48a5              LDR      r0,|L1.2264|
000642  f8b01320          LDRH     r1,[r0,#0x320]        ;671  ; TrackBitFlow
000646  f10b0001          ADD      r0,r11,#1             ;671
00064a  1a08              SUBS     r0,r1,r0              ;671
00064c  b284              UXTH     r4,r0                 ;671
                  |L1.1614|
00064e  48a2              LDR      r0,|L1.2264|
000650  5d06              LDRB     r6,[r0,r4]            ;673
000652  2e02              CMP      r6,#2                 ;674
000654  d100              BNE      |L1.1624|
000656  2600              MOVS     r6,#0                 ;676
                  |L1.1624|
000658  9805              LDR      r0,[sp,#0x14]         ;678
00065a  2800              CMP      r0,#0                 ;678
00065c  d173              BNE      |L1.1862|
00065e  f005000f          AND      r0,r5,#0xf            ;680
000662  2807              CMP      r0,#7                 ;680
000664  d14b              BNE      |L1.1790|
000666  f1ba0f07          CMP      r10,#7                ;682
00066a  d247              BCS      |L1.1788|
00066c  e8dff00a          TBB      [pc,r10]              ;682
000670  04080f17          DCB      0x04,0x08,0x0f,0x17
000674  1e252c00          DCB      0x1e,0x25,0x2c,0x00
000678  2e01              CMP      r6,#1                 ;685
00067a  d100              BNE      |L1.1662|
00067c  46b2              MOV      r10,r6                ;687
                  |L1.1662|
00067e  e03d              B        |L1.1788|
000680  b916              CBNZ     r6,|L1.1672|
000682  f04f0a02          MOV      r10,#2                ;693
000686  e001              B        |L1.1676|
                  |L1.1672|
000688  f04f0a00          MOV      r10,#0                ;697
                  |L1.1676|
00068c  e036              B        |L1.1788|
00068e  2e01              CMP      r6,#1                 ;701
000690  d102              BNE      |L1.1688|
000692  f04f0a03          MOV      r10,#3                ;703
000696  e001              B        |L1.1692|
                  |L1.1688|
000698  f04f0a00          MOV      r10,#0                ;707
                  |L1.1692|
00069c  e02e              B        |L1.1788|
00069e  b916              CBNZ     r6,|L1.1702|
0006a0  f04f0a04          MOV      r10,#4                ;713
0006a4  e001              B        |L1.1706|
                  |L1.1702|
0006a6  f04f0a00          MOV      r10,#0                ;717
                  |L1.1706|
0006aa  e027              B        |L1.1788|
0006ac  b916              CBNZ     r6,|L1.1716|
0006ae  f04f0a05          MOV      r10,#5                ;723
0006b2  e001              B        |L1.1720|
                  |L1.1716|
0006b4  f04f0a00          MOV      r10,#0                ;727
                  |L1.1720|
0006b8  e020              B        |L1.1788|
0006ba  b916              CBNZ     r6,|L1.1730|
0006bc  f04f0a06          MOV      r10,#6                ;733
0006c0  e001              B        |L1.1734|
                  |L1.1730|
0006c2  f04f0a00          MOV      r10,#0                ;737
                  |L1.1734|
0006c6  e019              B        |L1.1788|
0006c8  2e01              CMP      r6,#1                 ;741
0006ca  d114              BNE      |L1.1782|
0006cc  2001              MOVS     r0,#1                 ;743
0006ce  9005              STR      r0,[sp,#0x14]         ;743
0006d0  f04f0800          MOV      r8,#0                 ;744
0006d4  216f              MOVS     r1,#0x6f              ;745
0006d6  4884              LDR      r0,|L1.2280|
0006d8  f7fffffe          BL       __aeabi_memclr
0006dc  216f              MOVS     r1,#0x6f              ;746
0006de  4883              LDR      r0,|L1.2284|
0006e0  f7fffffe          BL       __aeabi_memclr
0006e4  2045              MOVS     r0,#0x45              ;747
0006e6  4981              LDR      r1,|L1.2284|
0006e8  7008              STRB     r0,[r1,#0]            ;747
0006ea  2001              MOVS     r0,#1                 ;748
0006ec  f881006e          STRB     r0,[r1,#0x6e]         ;748
0006f0  497d              LDR      r1,|L1.2280|
0006f2  f881006e          STRB     r0,[r1,#0x6e]         ;749
                  |L1.1782|
0006f6  f04f0a00          MOV      r10,#0                ;751
0006fa  bf00              NOP                            ;752
                  |L1.1788|
0006fc  e173              B        |L1.2534|
                  |L1.1790|
0006fe  f005000f          AND      r0,r5,#0xf            ;755
000702  2805              CMP      r0,#5                 ;755
000704  d13d              BNE      |L1.1922|
000706  f1ba0f05          CMP      r10,#5                ;757
00070a  d239              BCS      |L1.1920|
00070c  e8dff00a          TBB      [pc,r10]              ;757
000710  03070f16          DCB      0x03,0x07,0x0f,0x16
000714  1f00              DCB      0x1f,0x00
000716  2e01              CMP      r6,#1                 ;760
000718  d100              BNE      |L1.1820|
00071a  46b2              MOV      r10,r6                ;762
                  |L1.1820|
00071c  e030              B        |L1.1920|
00071e  2e01              CMP      r6,#1                 ;766
000720  d102              BNE      |L1.1832|
000722  f04f0a02          MOV      r10,#2                ;768
000726  e001              B        |L1.1836|
                  |L1.1832|
000728  f04f0a00          MOV      r10,#0                ;772
                  |L1.1836|
00072c  e028              B        |L1.1920|
00072e  b916              CBNZ     r6,|L1.1846|
000730  f04f0a03          MOV      r10,#3                ;778
000734  e001              B        |L1.1850|
                  |L1.1846|
000736  f04f0a00          MOV      r10,#0                ;782
                  |L1.1850|
00073a  e021              B        |L1.1920|
00073c  2e01              CMP      r6,#1                 ;786
00073e  d103              BNE      |L1.1864|
000740  f04f0a04          MOV      r10,#4                ;788
000744  e002              B        |L1.1868|
                  |L1.1862|
000746  e0da              B        |L1.2302|
                  |L1.1864|
000748  f04f0a00          MOV      r10,#0                ;792
                  |L1.1868|
00074c  e018              B        |L1.1920|
00074e  b9a6              CBNZ     r6,|L1.1914|
000750  2001              MOVS     r0,#1                 ;798
000752  9005              STR      r0,[sp,#0x14]         ;798
000754  f04f0800          MOV      r8,#0                 ;799
000758  216f              MOVS     r1,#0x6f              ;800
00075a  4863              LDR      r0,|L1.2280|
00075c  f7fffffe          BL       __aeabi_memclr
000760  216f              MOVS     r1,#0x6f              ;801
000762  4862              LDR      r0,|L1.2284|
000764  f7fffffe          BL       __aeabi_memclr
000768  200b              MOVS     r0,#0xb               ;802
00076a  4960              LDR      r1,|L1.2284|
00076c  7008              STRB     r0,[r1,#0]            ;802
00076e  2001              MOVS     r0,#1                 ;803
000770  f881006e          STRB     r0,[r1,#0x6e]         ;803
000774  495c              LDR      r1,|L1.2280|
000776  f881006e          STRB     r0,[r1,#0x6e]         ;804
                  |L1.1914|
00077a  f04f0a00          MOV      r10,#0                ;806
00077e  bf00              NOP                            ;807
                  |L1.1920|
000780  e131              B        |L1.2534|
                  |L1.1922|
000782  f005000f          AND      r0,r5,#0xf            ;810
000786  2806              CMP      r0,#6                 ;810
000788  d150              BNE      |L1.2092|
00078a  f1ba0f06          CMP      r10,#6                ;812
00078e  d24c              BCS      |L1.2090|
000790  e8dff00a          TBB      [pc,r10]              ;812
000794  030a112f          DCB      0x03,0x0a,0x11,0x2f
000798  363d              DCB      0x36,0x3d
00079a  2e01              CMP      r6,#1                 ;815
00079c  d101              BNE      |L1.1954|
00079e  46b2              MOV      r10,r6                ;817
0007a0  e001              B        |L1.1958|
                  |L1.1954|
0007a2  f04f0a00          MOV      r10,#0                ;819
                  |L1.1958|
0007a6  e040              B        |L1.2090|
0007a8  b916              CBNZ     r6,|L1.1968|
0007aa  f04f0a02          MOV      r10,#2                ;825
0007ae  e001              B        |L1.1972|
                  |L1.1968|
0007b0  f04f0a00          MOV      r10,#0                ;829
                  |L1.1972|
0007b4  e039              B        |L1.2090|
0007b6  216f              MOVS     r1,#0x6f              ;833
0007b8  484b              LDR      r0,|L1.2280|
0007ba  f7fffffe          BL       __aeabi_memclr
0007be  216f              MOVS     r1,#0x6f              ;834
0007c0  484a              LDR      r0,|L1.2284|
0007c2  f7fffffe          BL       __aeabi_memclr
0007c6  2e01              CMP      r6,#1                 ;835
0007c8  d107              BNE      |L1.2010|
0007ca  2d16              CMP      r5,#0x16              ;835
0007cc  d105              BNE      |L1.2010|
0007ce  2005              MOVS     r0,#5                 ;837
0007d0  4946              LDR      r1,|L1.2284|
0007d2  7008              STRB     r0,[r1,#0]            ;837
0007d4  f04f0a03          MOV      r10,#3                ;838
0007d8  e00a              B        |L1.2032|
                  |L1.2010|
0007da  b93e              CBNZ     r6,|L1.2028|
0007dc  2d36              CMP      r5,#0x36              ;840
0007de  d105              BNE      |L1.2028|
0007e0  2001              MOVS     r0,#1                 ;842
0007e2  4942              LDR      r1,|L1.2284|
0007e4  7008              STRB     r0,[r1,#0]            ;842
0007e6  f04f0a03          MOV      r10,#3                ;843
0007ea  e001              B        |L1.2032|
                  |L1.2028|
0007ec  f04f0a00          MOV      r10,#0                ;847
                  |L1.2032|
0007f0  e01b              B        |L1.2090|
0007f2  b916              CBNZ     r6,|L1.2042|
0007f4  f04f0a04          MOV      r10,#4                ;853
0007f8  e001              B        |L1.2046|
                  |L1.2042|
0007fa  f04f0a00          MOV      r10,#0                ;857
                  |L1.2046|
0007fe  e014              B        |L1.2090|
000800  b916              CBNZ     r6,|L1.2056|
000802  f04f0a05          MOV      r10,#5                ;863
000806  e001              B        |L1.2060|
                  |L1.2056|
000808  f04f0a00          MOV      r10,#0                ;867
                  |L1.2060|
00080c  e00d              B        |L1.2090|
00080e  b94e              CBNZ     r6,|L1.2084|
000810  2001              MOVS     r0,#1                 ;873
000812  9005              STR      r0,[sp,#0x14]         ;873
000814  f04f0800          MOV      r8,#0                 ;874
000818  4934              LDR      r1,|L1.2284|
00081a  f881006e          STRB     r0,[r1,#0x6e]         ;875
00081e  4932              LDR      r1,|L1.2280|
000820  f881006e          STRB     r0,[r1,#0x6e]         ;876
                  |L1.2084|
000824  f04f0a00          MOV      r10,#0                ;878
000828  bf00              NOP                            ;879
                  |L1.2090|
00082a  e0dc              B        |L1.2534|
                  |L1.2092|
00082c  f005000f          AND      r0,r5,#0xf            ;882
000830  2808              CMP      r0,#8                 ;882
000832  d1a5              BNE      |L1.1920|
000834  f1ba0f08          CMP      r10,#8                ;884
000838  d260              BCS      |L1.2300|
00083a  e8dff00a          TBB      [pc,r10]              ;884
00083e  0408              DCB      0x04,0x08
000840  10182028          DCB      0x10,0x18,0x20,0x28
000844  3038              DCB      0x30,0x38
000846  2e01              CMP      r6,#1                 ;887
000848  d100              BNE      |L1.2124|
00084a  46b2              MOV      r10,r6                ;889
                  |L1.2124|
00084c  e056              B        |L1.2300|
00084e  2e01              CMP      r6,#1                 ;893
000850  d102              BNE      |L1.2136|
000852  f04f0a02          MOV      r10,#2                ;895
000856  e001              B        |L1.2140|
                  |L1.2136|
000858  f04f0a00          MOV      r10,#0                ;899
                  |L1.2140|
00085c  e04e              B        |L1.2300|
00085e  2e01              CMP      r6,#1                 ;903
000860  d102              BNE      |L1.2152|
000862  f04f0a03          MOV      r10,#3                ;905
000866  e001              B        |L1.2156|
                  |L1.2152|
000868  f04f0a00          MOV      r10,#0                ;909
                  |L1.2156|
00086c  e046              B        |L1.2300|
00086e  2e01              CMP      r6,#1                 ;913
000870  d102              BNE      |L1.2168|
000872  f04f0a04          MOV      r10,#4                ;915
000876  e001              B        |L1.2172|
                  |L1.2168|
000878  f04f0a00          MOV      r10,#0                ;919
                  |L1.2172|
00087c  e03e              B        |L1.2300|
00087e  2e01              CMP      r6,#1                 ;923
000880  d102              BNE      |L1.2184|
000882  f04f0a05          MOV      r10,#5                ;925
000886  e001              B        |L1.2188|
                  |L1.2184|
000888  f04f0a00          MOV      r10,#0                ;929
                  |L1.2188|
00088c  e036              B        |L1.2300|
00088e  2e01              CMP      r6,#1                 ;933
000890  d102              BNE      |L1.2200|
000892  f04f0a06          MOV      r10,#6                ;935
000896  e001              B        |L1.2204|
                  |L1.2200|
000898  f04f0a00          MOV      r10,#0                ;939
                  |L1.2204|
00089c  e02e              B        |L1.2300|
00089e  2e01              CMP      r6,#1                 ;943
0008a0  d102              BNE      |L1.2216|
0008a2  f04f0a07          MOV      r10,#7                ;945
0008a6  e001              B        |L1.2220|
                  |L1.2216|
0008a8  f04f0a00          MOV      r10,#0                ;949
                  |L1.2220|
0008ac  e026              B        |L1.2300|
0008ae  2e01              CMP      r6,#1                 ;953
0008b0  d121              BNE      |L1.2294|
0008b2  2001              MOVS     r0,#1                 ;955
0008b4  9005              STR      r0,[sp,#0x14]         ;955
0008b6  f04f0800          MOV      r8,#0                 ;956
0008ba  216f              MOVS     r1,#0x6f              ;957
0008bc  480a              LDR      r0,|L1.2280|
0008be  f7fffffe          BL       __aeabi_memclr
0008c2  216f              MOVS     r1,#0x6f              ;958
0008c4  4809              LDR      r0,|L1.2284|
0008c6  f7fffffe          BL       __aeabi_memclr
0008ca  20ff              MOVS     r0,#0xff              ;959
0008cc  4907              LDR      r1,|L1.2284|
0008ce  7008              STRB     r0,[r1,#0]            ;959
0008d0  2001              MOVS     r0,#1                 ;960
0008d2  f881006e          STRB     r0,[r1,#0x6e]         ;960
0008d6  e00b              B        |L1.2288|
                  |L1.2264|
                          DCD      TrackBitFlow
                  |L1.2268|
                          DCD      Track1Data
                  |L1.2272|
                          DCD      Track2Data
                  |L1.2276|
                          DCD      Track3Data
                  |L1.2280|
                          DCD      TempTrackDirtData
                  |L1.2284|
                          DCD      TempTrackData
                  |L1.2288|
0008f0  49fc              LDR      r1,|L1.3300|
0008f2  f881006e          STRB     r0,[r1,#0x6e]         ;961
                  |L1.2294|
0008f6  f04f0a00          MOV      r10,#0                ;963
0008fa  bf00              NOP                            ;964
                  |L1.2300|
0008fc  e073              B        |L1.2534|
                  |L1.2302|
0008fe  48fa              LDR      r0,|L1.3304|
000900  5d00              LDRB     r0,[r0,r4]            ;970
000902  b940              CBNZ     r0,|L1.2326|
000904  49f9              LDR      r1,|L1.3308|
000906  f891106e          LDRB     r1,[r1,#0x6e]         ;972  ; TempTrackData
00090a  4af8              LDR      r2,|L1.3308|
00090c  1888              ADDS     r0,r1,r2              ;972
00090e  4641              MOV      r1,r8                 ;972
000910  f7fffffe          BL       ClearBit
000914  e01c              B        |L1.2384|
                  |L1.2326|
000916  48f4              LDR      r0,|L1.3304|
000918  5d00              LDRB     r0,[r0,r4]            ;974
00091a  2801              CMP      r0,#1                 ;974
00091c  d108              BNE      |L1.2352|
00091e  49f3              LDR      r1,|L1.3308|
000920  f891106e          LDRB     r1,[r1,#0x6e]         ;976  ; TempTrackData
000924  4af1              LDR      r2,|L1.3308|
000926  1888              ADDS     r0,r1,r2              ;976
000928  4641              MOV      r1,r8                 ;976
00092a  f7fffffe          BL       SetBit
00092e  e00f              B        |L1.2384|
                  |L1.2352|
000930  49ee              LDR      r1,|L1.3308|
000932  f891106e          LDRB     r1,[r1,#0x6e]         ;980  ; TempTrackData
000936  4aed              LDR      r2,|L1.3308|
000938  1888              ADDS     r0,r1,r2              ;980
00093a  4641              MOV      r1,r8                 ;980
00093c  f7fffffe          BL       ClearBit
000940  49e8              LDR      r1,|L1.3300|
000942  f891106e          LDRB     r1,[r1,#0x6e]         ;981  ; TempTrackDirtData
000946  4ae7              LDR      r2,|L1.3300|
000948  1888              ADDS     r0,r1,r2              ;981
00094a  4641              MOV      r1,r8                 ;981
00094c  f7fffffe          BL       SetBit
                  |L1.2384|
000950  f1080001          ADD      r0,r8,#1              ;983
000954  f00008ff          AND      r8,r0,#0xff           ;983
000958  f005000f          AND      r0,r5,#0xf            ;984
00095c  2807              CMP      r0,#7                 ;984
00095e  d106              BNE      |L1.2414|
000960  fb98f1f0          SDIV     r1,r8,r0              ;986
000964  fb008011          MLS      r0,r0,r1,r8           ;986
000968  f00008ff          AND      r8,r0,#0xff           ;986
00096c  e023              B        |L1.2486|
                  |L1.2414|
00096e  f005000f          AND      r0,r5,#0xf            ;988
000972  2805              CMP      r0,#5                 ;988
000974  d106              BNE      |L1.2436|
000976  fb98f1f0          SDIV     r1,r8,r0              ;990
00097a  fb008011          MLS      r0,r0,r1,r8           ;990
00097e  f00008ff          AND      r8,r0,#0xff           ;990
000982  e018              B        |L1.2486|
                  |L1.2436|
000984  f005000f          AND      r0,r5,#0xf            ;992
000988  2806              CMP      r0,#6                 ;992
00098a  d106              BNE      |L1.2458|
00098c  fb98f1f0          SDIV     r1,r8,r0              ;994
000990  fb008011          MLS      r0,r0,r1,r8           ;994
000994  f00008ff          AND      r8,r0,#0xff           ;994
000998  e00d              B        |L1.2486|
                  |L1.2458|
00099a  f005000f          AND      r0,r5,#0xf            ;996
00099e  2808              CMP      r0,#8                 ;996
0009a0  d109              BNE      |L1.2486|
0009a2  4640              MOV      r0,r8                 ;998
0009a4  ea4f71e8          ASR      r1,r8,#31             ;998
0009a8  eb087151          ADD      r1,r8,r1,LSR #29      ;998
0009ac  10c9              ASRS     r1,r1,#3              ;998
0009ae  eba801c1          SUB      r1,r8,r1,LSL #3       ;998
0009b2  f00108ff          AND      r8,r1,#0xff           ;998
                  |L1.2486|
0009b6  f1b80f00          CMP      r8,#0                 ;1001
0009ba  d114              BNE      |L1.2534|
0009bc  48cb              LDR      r0,|L1.3308|
0009be  f890006e          LDRB     r0,[r0,#0x6e]         ;1003  ; TempTrackData
0009c2  286d              CMP      r0,#0x6d              ;1003
0009c4  da0e              BGE      |L1.2532|
0009c6  48c9              LDR      r0,|L1.3308|
0009c8  f890006e          LDRB     r0,[r0,#0x6e]         ;1005  ; TempTrackData
0009cc  1c40              ADDS     r0,r0,#1              ;1005
0009ce  49c7              LDR      r1,|L1.3308|
0009d0  f881006e          STRB     r0,[r1,#0x6e]         ;1005
0009d4  48c3              LDR      r0,|L1.3300|
0009d6  f890006e          LDRB     r0,[r0,#0x6e]         ;1006  ; TempTrackDirtData
0009da  1c40              ADDS     r0,r0,#1              ;1006
0009dc  49c1              LDR      r1,|L1.3300|
0009de  f881006e          STRB     r0,[r1,#0x6e]         ;1006
0009e2  e000              B        |L1.2534|
                  |L1.2532|
0009e4  e009              B        |L1.2554|
                  |L1.2534|
0009e6  f10b0001          ADD      r0,r11,#1             ;663
0009ea  fa1ffb80          UXTH     r11,r0                ;663
                  |L1.2542|
0009ee  48be              LDR      r0,|L1.3304|
0009f0  f8b00320          LDRH     r0,[r0,#0x320]        ;663  ; TrackBitFlow
0009f4  4558              CMP      r0,r11                ;663
0009f6  f73fae1e          BGT      |L1.1590|
                  |L1.2554|
0009fa  bf00              NOP                            ;1010
0009fc  f005050f          AND      r5,r5,#0xf            ;1016
000a00  9805              LDR      r0,[sp,#0x14]         ;1017
000a02  2800              CMP      r0,#0                 ;1017
000a04  d077              BEQ      |L1.2806|
000a06  f1b90f00          CMP      r9,#0                 ;1019
000a0a  d124              BNE      |L1.2646|
000a0c  2d07              CMP      r5,#7                 ;1021
000a0e  d106              BNE      |L1.2590|
000a10  48b6              LDR      r0,|L1.3308|
000a12  f890006e          LDRB     r0,[r0,#0x6e]         ;1023  ; TempTrackData
000a16  ebc000c0          RSB      r0,r0,r0,LSL #3       ;1023
000a1a  900a              STR      r0,[sp,#0x28]         ;1023
000a1c  e03e              B        |L1.2716|
                  |L1.2590|
000a1e  2d05              CMP      r5,#5                 ;1025
000a20  d106              BNE      |L1.2608|
000a22  48b2              LDR      r0,|L1.3308|
000a24  f890006e          LDRB     r0,[r0,#0x6e]         ;1027  ; TempTrackData
000a28  eb000080          ADD      r0,r0,r0,LSL #2       ;1027
000a2c  900a              STR      r0,[sp,#0x28]         ;1027
000a2e  e035              B        |L1.2716|
                  |L1.2608|
000a30  2d06              CMP      r5,#6                 ;1029
000a32  d107              BNE      |L1.2628|
000a34  48ad              LDR      r0,|L1.3308|
000a36  f890006e          LDRB     r0,[r0,#0x6e]         ;1031  ; TempTrackData
000a3a  eb000040          ADD      r0,r0,r0,LSL #1       ;1031
000a3e  0040              LSLS     r0,r0,#1              ;1031
000a40  900a              STR      r0,[sp,#0x28]         ;1031
000a42  e02b              B        |L1.2716|
                  |L1.2628|
000a44  2d08              CMP      r5,#8                 ;1033
000a46  d129              BNE      |L1.2716|
000a48  48a8              LDR      r0,|L1.3308|
000a4a  f890006e          LDRB     r0,[r0,#0x6e]         ;1035  ; TempTrackData
000a4e  eb000080          ADD      r0,r0,r0,LSL #2       ;1035
000a52  900a              STR      r0,[sp,#0x28]         ;1035
000a54  e022              B        |L1.2716|
                  |L1.2646|
000a56  2d07              CMP      r5,#7                 ;1040
000a58  d106              BNE      |L1.2664|
000a5a  48a4              LDR      r0,|L1.3308|
000a5c  f890006e          LDRB     r0,[r0,#0x6e]         ;1042  ; TempTrackData
000a60  ebc000c0          RSB      r0,r0,r0,LSL #3       ;1042
000a64  9009              STR      r0,[sp,#0x24]         ;1042
000a66  e019              B        |L1.2716|
                  |L1.2664|
000a68  2d05              CMP      r5,#5                 ;1044
000a6a  d106              BNE      |L1.2682|
000a6c  489f              LDR      r0,|L1.3308|
000a6e  f890006e          LDRB     r0,[r0,#0x6e]         ;1046  ; TempTrackData
000a72  eb000080          ADD      r0,r0,r0,LSL #2       ;1046
000a76  9009              STR      r0,[sp,#0x24]         ;1046
000a78  e010              B        |L1.2716|
                  |L1.2682|
000a7a  2d06              CMP      r5,#6                 ;1048
000a7c  d107              BNE      |L1.2702|
000a7e  489b              LDR      r0,|L1.3308|
000a80  f890006e          LDRB     r0,[r0,#0x6e]         ;1050  ; TempTrackData
000a84  eb000040          ADD      r0,r0,r0,LSL #1       ;1050
000a88  0040              LSLS     r0,r0,#1              ;1050
000a8a  9009              STR      r0,[sp,#0x24]         ;1050
000a8c  e006              B        |L1.2716|
                  |L1.2702|
000a8e  2d08              CMP      r5,#8                 ;1052
000a90  d104              BNE      |L1.2716|
000a92  4896              LDR      r0,|L1.3308|
000a94  f890006e          LDRB     r0,[r0,#0x6e]         ;1054  ; TempTrackData
000a98  00c0              LSLS     r0,r0,#3              ;1054
000a9a  9009              STR      r0,[sp,#0x24]         ;1054
                  |L1.2716|
000a9c  2000              MOVS     r0,#0                 ;1057
000a9e  9006              STR      r0,[sp,#0x18]         ;1057
000aa0  900c              STR      r0,[sp,#0x30]         ;1058
000aa2  e083              B        |L1.2988|
                  |L1.2724|
000aa4  2401              MOVS     r4,#1                 ;1060
000aa6  e029              B        |L1.2812|
                  |L1.2728|
000aa8  2d07              CMP      r5,#7                 ;1063
000aaa  d101              BNE      |L1.2736|
000aac  267f              MOVS     r6,#0x7f              ;1065
000aae  e00a              B        |L1.2758|
                  |L1.2736|
000ab0  2d06              CMP      r5,#6                 ;1067
000ab2  d101              BNE      |L1.2744|
000ab4  263f              MOVS     r6,#0x3f              ;1069
000ab6  e006              B        |L1.2758|
                  |L1.2744|
000ab8  2d05              CMP      r5,#5                 ;1071
000aba  d101              BNE      |L1.2752|
000abc  261f              MOVS     r6,#0x1f              ;1073
000abe  e002              B        |L1.2758|
                  |L1.2752|
000ac0  2d08              CMP      r5,#8                 ;1075
000ac2  d100              BNE      |L1.2758|
000ac4  26ff              MOVS     r6,#0xff              ;1077
                  |L1.2758|
000ac6  2d08              CMP      r5,#8                 ;1079
000ac8  d004              BEQ      |L1.2772|
000aca  4888              LDR      r0,|L1.3308|
000acc  5d00              LDRB     r0,[r0,r4]            ;1080
000ace  4030              ANDS     r0,r0,r6              ;1080
000ad0  281f              CMP      r0,#0x1f              ;1080
000ad2  d006              BEQ      |L1.2786|
                  |L1.2772|
000ad4  2d08              CMP      r5,#8                 ;1081
000ad6  d10f              BNE      |L1.2808|
000ad8  4884              LDR      r0,|L1.3308|
000ada  5d00              LDRB     r0,[r0,r4]            ;1081
000adc  4030              ANDS     r0,r0,r6              ;1081
000ade  28ff              CMP      r0,#0xff              ;1081
000ae0  d10a              BNE      |L1.2808|
                  |L1.2786|
000ae2  1ca0              ADDS     r0,r4,#2              ;1084
000ae4  4981              LDR      r1,|L1.3308|
000ae6  f881006e          STRB     r0,[r1,#0x6e]         ;1084
000aea  497e              LDR      r1,|L1.3300|
000aec  f881006e          STRB     r0,[r1,#0x6e]         ;1085
000af0  2001              MOVS     r0,#1                 ;1086
000af2  9006              STR      r0,[sp,#0x18]         ;1086
000af4  e007              B        |L1.2822|
                  |L1.2806|
000af6  e1f4              B        |L1.3810|
                  |L1.2808|
000af8  1c60              ADDS     r0,r4,#1              ;1060
000afa  b284              UXTH     r4,r0                 ;1060
                  |L1.2812|
000afc  487b              LDR      r0,|L1.3308|
000afe  f890006e          LDRB     r0,[r0,#0x6e]         ;1060  ; TempTrackData
000b02  42a0              CMP      r0,r4                 ;1060
000b04  dcd0              BGT      |L1.2728|
                  |L1.2822|
000b06  bf00              NOP                            ;1087
000b08  9806              LDR      r0,[sp,#0x18]         ;1090
000b0a  bbc8              CBNZ     r0,|L1.2944|
000b0c  f8bd0030          LDRH     r0,[sp,#0x30]         ;1090
000b10  bbb0              CBNZ     r0,|L1.2944|
000b12  2d06              CMP      r5,#6                 ;1090
000b14  d045              BEQ      |L1.2978|
000b16  2400              MOVS     r4,#0                 ;1092
000b18  e03d              B        |L1.2966|
                  |L1.2842|
000b1a  4974              LDR      r1,|L1.3308|
000b1c  5d08              LDRB     r0,[r1,r4]            ;1094
000b1e  f7fffffe          BL       CheckOddParity
000b22  bb70              CBNZ     r0,|L1.2946|
000b24  496f              LDR      r1,|L1.3300|
000b26  5d08              LDRB     r0,[r1,r4]            ;1096
000b28  f7fffffe          BL       CheckDirtOnlyOne
000b2c  b348              CBZ      r0,|L1.2946|
000b2e  486f              LDR      r0,|L1.3308|
000b30  5d00              LDRB     r0,[r0,r4]            ;1098
000b32  496c              LDR      r1,|L1.3300|
000b34  5d09              LDRB     r1,[r1,r4]            ;1098
000b36  4048              EORS     r0,r0,r1              ;1098
000b38  496c              LDR      r1,|L1.3308|
000b3a  5508              STRB     r0,[r1,r4]            ;1098
000b3c  2d07              CMP      r5,#7                 ;1099
000b3e  d101              BNE      |L1.2884|
000b40  267f              MOVS     r6,#0x7f              ;1101
000b42  e006              B        |L1.2898|
                  |L1.2884|
000b44  2d05              CMP      r5,#5                 ;1103
000b46  d101              BNE      |L1.2892|
000b48  261f              MOVS     r6,#0x1f              ;1105
000b4a  e002              B        |L1.2898|
                  |L1.2892|
000b4c  2d08              CMP      r5,#8                 ;1107
000b4e  d100              BNE      |L1.2898|
000b50  26ff              MOVS     r6,#0xff              ;1109
                  |L1.2898|
000b52  2d08              CMP      r5,#8                 ;1112
000b54  d004              BEQ      |L1.2912|
000b56  4865              LDR      r0,|L1.3308|
000b58  5d00              LDRB     r0,[r0,r4]            ;1113
000b5a  4030              ANDS     r0,r0,r6              ;1113
000b5c  281f              CMP      r0,#0x1f              ;1113
000b5e  d005              BEQ      |L1.2924|
                  |L1.2912|
000b60  2d08              CMP      r5,#8                 ;1114
000b62  d10f              BNE      |L1.2948|
000b64  4861              LDR      r0,|L1.3308|
000b66  5d00              LDRB     r0,[r0,r4]            ;1114
000b68  28ff              CMP      r0,#0xff              ;1114
000b6a  d10b              BNE      |L1.2948|
                  |L1.2924|
000b6c  9800              LDR      r0,[sp,#0]            ;1117
000b6e  1c40              ADDS     r0,r0,#1              ;1117
000b70  b2c0              UXTB     r0,r0                 ;1117
000b72  9000              STR      r0,[sp,#0]            ;1117
000b74  2000              MOVS     r0,#0                 ;1118
000b76  495b              LDR      r1,|L1.3300|
000b78  5508              STRB     r0,[r1,r4]            ;1118
000b7a  2001              MOVS     r0,#1                 ;1119
000b7c  9001              STR      r0,[sp,#4]            ;1119
000b7e  e00f              B        |L1.2976|
                  |L1.2944|
000b80  e00f              B        |L1.2978|
                  |L1.2946|
000b82  e006              B        |L1.2962|
                  |L1.2948|
000b84  4859              LDR      r0,|L1.3308|
000b86  5d00              LDRB     r0,[r0,r4]            ;1124
000b88  4956              LDR      r1,|L1.3300|
000b8a  5d09              LDRB     r1,[r1,r4]            ;1124
000b8c  4048              EORS     r0,r0,r1              ;1124
000b8e  4957              LDR      r1,|L1.3308|
000b90  5508              STRB     r0,[r1,r4]            ;1124
                  |L1.2962|
000b92  1c60              ADDS     r0,r4,#1              ;1092
000b94  b284              UXTH     r4,r0                 ;1092
                  |L1.2966|
000b96  4855              LDR      r0,|L1.3308|
000b98  f890006e          LDRB     r0,[r0,#0x6e]         ;1092  ; TempTrackData
000b9c  42a0              CMP      r0,r4                 ;1092
000b9e  dcbc              BGT      |L1.2842|
                  |L1.2976|
000ba0  bf00              NOP                            ;1120
                  |L1.2978|
000ba2  f8bd0030          LDRH     r0,[sp,#0x30]         ;1058
000ba6  1c40              ADDS     r0,r0,#1              ;1058
000ba8  b280              UXTH     r0,r0                 ;1058
000baa  900c              STR      r0,[sp,#0x30]         ;1058
                  |L1.2988|
000bac  9806              LDR      r0,[sp,#0x18]         ;1058
000bae  b920              CBNZ     r0,|L1.3002|
000bb0  f8bd0030          LDRH     r0,[sp,#0x30]         ;1058
000bb4  2802              CMP      r0,#2                 ;1058
000bb6  f6ffaf75          BLT      |L1.2724|
                  |L1.3002|
000bba  9806              LDR      r0,[sp,#0x18]         ;1131
000bbc  2801              CMP      r0,#1                 ;1131
000bbe  d17d              BNE      |L1.3260|
000bc0  2d06              CMP      r5,#6                 ;1131
000bc2  d07b              BEQ      |L1.3260|
000bc4  bf00              NOP                            ;1133
                  |L1.3014|
000bc6  2001              MOVS     r0,#1                 ;1135
000bc8  9003              STR      r0,[sp,#0xc]          ;1135
000bca  2000              MOVS     r0,#0                 ;1136
000bcc  9004              STR      r0,[sp,#0x10]         ;1136
000bce  2400              MOVS     r4,#0                 ;1137
000bd0  e039              B        |L1.3142|
                  |L1.3026|
000bd2  4946              LDR      r1,|L1.3308|
000bd4  5d08              LDRB     r0,[r1,r4]            ;1139
000bd6  f7fffffe          BL       CheckOddParity
000bda  bb30              CBNZ     r0,|L1.3114|
000bdc  f1b90f00          CMP      r9,#0                 ;1141
000be0  d105              BNE      |L1.3054|
000be2  9808              LDR      r0,[sp,#0x20]         ;1143
000be4  2808              CMP      r0,#8                 ;1143
000be6  da07              BGE      |L1.3064|
000be8  2000              MOVS     r0,#0                 ;1145
000bea  9008              STR      r0,[sp,#0x20]         ;1145
000bec  e004              B        |L1.3064|
                  |L1.3054|
000bee  9807              LDR      r0,[sp,#0x1c]         ;1150
000bf0  2808              CMP      r0,#8                 ;1150
000bf2  da01              BGE      |L1.3064|
000bf4  2000              MOVS     r0,#0                 ;1152
000bf6  9007              STR      r0,[sp,#0x1c]         ;1152
                  |L1.3064|
000bf8  2000              MOVS     r0,#0                 ;1155
000bfa  9003              STR      r0,[sp,#0xc]          ;1155
000bfc  4939              LDR      r1,|L1.3300|
000bfe  5d08              LDRB     r0,[r1,r4]            ;1156
000c00  f7fffffe          BL       CheckDirtOnlyOne
000c04  b1e8              CBZ      r0,|L1.3138|
000c06  9800              LDR      r0,[sp,#0]            ;1158
000c08  1c40              ADDS     r0,r0,#1              ;1158
000c0a  b2c0              UXTB     r0,r0                 ;1158
000c0c  9000              STR      r0,[sp,#0]            ;1158
000c0e  4837              LDR      r0,|L1.3308|
000c10  5d00              LDRB     r0,[r0,r4]            ;1159
000c12  4934              LDR      r1,|L1.3300|
000c14  5d09              LDRB     r1,[r1,r4]            ;1159
000c16  4048              EORS     r0,r0,r1              ;1159
000c18  4934              LDR      r1,|L1.3308|
000c1a  5508              STRB     r0,[r1,r4]            ;1159
000c1c  2000              MOVS     r0,#0                 ;1160
000c1e  4931              LDR      r1,|L1.3300|
000c20  5508              STRB     r0,[r1,r4]            ;1160
000c22  2001              MOVS     r0,#1                 ;1161
000c24  9004              STR      r0,[sp,#0x10]         ;1161
000c26  9001              STR      r0,[sp,#4]            ;1162
000c28  e00b              B        |L1.3138|
                  |L1.3114|
000c2a  f1b90f00          CMP      r9,#0                 ;1167
000c2e  d104              BNE      |L1.3130|
000c30  9808              LDR      r0,[sp,#0x20]         ;1169
000c32  1c40              ADDS     r0,r0,#1              ;1169
000c34  b280              UXTH     r0,r0                 ;1169
000c36  9008              STR      r0,[sp,#0x20]         ;1169
000c38  e003              B        |L1.3138|
                  |L1.3130|
000c3a  9807              LDR      r0,[sp,#0x1c]         ;1173
000c3c  1c40              ADDS     r0,r0,#1              ;1173
000c3e  b280              UXTH     r0,r0                 ;1173
000c40  9007              STR      r0,[sp,#0x1c]         ;1173
                  |L1.3138|
000c42  1c60              ADDS     r0,r4,#1              ;1137
000c44  b284              UXTH     r4,r0                 ;1137
                  |L1.3142|
000c46  4829              LDR      r0,|L1.3308|
000c48  f890006e          LDRB     r0,[r0,#0x6e]         ;1137  ; TempTrackData
000c4c  42a0              CMP      r0,r4                 ;1137
000c4e  dcc0              BGT      |L1.3026|
000c50  2d07              CMP      r5,#7                 ;1177
000c52  d101              BNE      |L1.3160|
000c54  2606              MOVS     r6,#6                 ;1179
000c56  e006              B        |L1.3174|
                  |L1.3160|
000c58  2d05              CMP      r5,#5                 ;1181
000c5a  d101              BNE      |L1.3168|
000c5c  2604              MOVS     r6,#4                 ;1183
000c5e  e002              B        |L1.3174|
                  |L1.3168|
000c60  2d08              CMP      r5,#8                 ;1185
000c62  d100              BNE      |L1.3174|
000c64  2607              MOVS     r6,#7                 ;1187
                  |L1.3174|
000c66  2400              MOVS     r4,#0                 ;1189
000c68  e02a              B        |L1.3264|
                  |L1.3178|
000c6a  b2e2              UXTB     r2,r4                 ;1191
000c6c  481f              LDR      r0,|L1.3308|
000c6e  f890106e          LDRB     r1,[r0,#0x6e]         ;1191  ; TempTrackData
000c72  f7fffffe          BL       CheckLrcEvenParity
000c76  b9f8              CBNZ     r0,|L1.3256|
000c78  2000              MOVS     r0,#0                 ;1193
000c7a  9003              STR      r0,[sp,#0xc]          ;1193
000c7c  b2e3              UXTB     r3,r4                 ;1194
000c7e  4819              LDR      r0,|L1.3300|
000c80  f890206e          LDRB     r2,[r0,#0x6e]         ;1194  ; TempTrackDirtData
000c84  4601              MOV      r1,r0                 ;1194
000c86  a80c              ADD      r0,sp,#0x30           ;1194
000c88  f7fffffe          BL       CheckLrcDirtOnlyOne
000c8c  b1a0              CBZ      r0,|L1.3256|
000c8e  9800              LDR      r0,[sp,#0]            ;1196
000c90  1c40              ADDS     r0,r0,#1              ;1196
000c92  b2c0              UXTB     r0,r0                 ;1196
000c94  9000              STR      r0,[sp,#0]            ;1196
000c96  b2e1              UXTB     r1,r4                 ;1197
000c98  4a14              LDR      r2,|L1.3308|
000c9a  f8bd3030          LDRH     r3,[sp,#0x30]         ;1197
000c9e  18d0              ADDS     r0,r2,r3              ;1197
000ca0  f7fffffe          BL       CplBit
000ca4  b2e1              UXTB     r1,r4                 ;1198
000ca6  4a0f              LDR      r2,|L1.3300|
000ca8  f8bd3030          LDRH     r3,[sp,#0x30]         ;1198
000cac  18d0              ADDS     r0,r2,r3              ;1198
000cae  f7fffffe          BL       ClearBit
000cb2  2001              MOVS     r0,#1                 ;1199
000cb4  9004              STR      r0,[sp,#0x10]         ;1199
000cb6  9001              STR      r0,[sp,#4]            ;1200
                  |L1.3256|
000cb8  1c60              ADDS     r0,r4,#1              ;1189
000cba  e000              B        |L1.3262|
                  |L1.3260|
000cbc  e147              B        |L1.3918|
                  |L1.3262|
000cbe  b284              UXTH     r4,r0                 ;1189
                  |L1.3264|
000cc0  42b4              CMP      r4,r6                 ;1189
000cc2  dbd2              BLT      |L1.3178|
000cc4  9804              LDR      r0,[sp,#0x10]         ;1204
000cc6  2800              CMP      r0,#0                 ;1204
000cc8  f47faf7d          BNE      |L1.3014|
000ccc  9803              LDR      r0,[sp,#0xc]          ;1205
000cce  bbe0              CBNZ     r0,|L1.3402|
000cd0  bf00              NOP                            ;1207
                  |L1.3282|
000cd2  2001              MOVS     r0,#1                 ;1209
000cd4  9003              STR      r0,[sp,#0xc]          ;1209
000cd6  2000              MOVS     r0,#0                 ;1210
000cd8  9004              STR      r0,[sp,#0x10]         ;1210
000cda  4683              MOV      r11,r0                ;1211
000cdc  900b              STR      r0,[sp,#0x2c]         ;1212
000cde  2400              MOVS     r4,#0                 ;1213
000ce0  e047              B        |L1.3442|
000ce2  0000              DCW      0x0000
                  |L1.3300|
                          DCD      TempTrackDirtData
                  |L1.3304|
                          DCD      TrackBitFlow
                  |L1.3308|
                          DCD      TempTrackData
                  |L1.3312|
000cf0  49f7              LDR      r1,|L1.4304|
000cf2  5d08              LDRB     r0,[r1,r4]            ;1215
000cf4  f7fffffe          BL       CheckOddParity
000cf8  bb40              CBNZ     r0,|L1.3404|
000cfa  2000              MOVS     r0,#0                 ;1217
000cfc  9003              STR      r0,[sp,#0xc]          ;1217
000cfe  f10b0001          ADD      r0,r11,#1             ;1218
000d02  fa1ffb80          UXTH     r11,r0                ;1218
000d06  940b              STR      r4,[sp,#0x2c]         ;1219
000d08  2d07              CMP      r5,#7                 ;1220
000d0a  d101              BNE      |L1.3344|
000d0c  2606              MOVS     r6,#6                 ;1222
000d0e  e006              B        |L1.3358|
                  |L1.3344|
000d10  2d05              CMP      r5,#5                 ;1224
000d12  d101              BNE      |L1.3352|
000d14  2604              MOVS     r6,#4                 ;1226
000d16  e002              B        |L1.3358|
                  |L1.3352|
000d18  2d08              CMP      r5,#8                 ;1228
000d1a  d100              BNE      |L1.3358|
000d1c  2607              MOVS     r6,#7                 ;1230
                  |L1.3358|
000d1e  2000              MOVS     r0,#0                 ;1233
000d20  900c              STR      r0,[sp,#0x30]         ;1233
000d22  e01f              B        |L1.3428|
                  |L1.3364|
000d24  f8bd0030          LDRH     r0,[sp,#0x30]         ;1235
000d28  b2c2              UXTB     r2,r0                 ;1235
000d2a  48e9              LDR      r0,|L1.4304|
000d2c  f890106e          LDRB     r1,[r0,#0x6e]         ;1235  ; TempTrackData
000d30  f7fffffe          BL       CheckLrcEvenParity
000d34  b988              CBNZ     r0,|L1.3418|
000d36  9800              LDR      r0,[sp,#0]            ;1237
000d38  1c40              ADDS     r0,r0,#1              ;1237
000d3a  b2c0              UXTB     r0,r0                 ;1237
000d3c  9000              STR      r0,[sp,#0]            ;1237
000d3e  f8bd2030          LDRH     r2,[sp,#0x30]         ;1238
000d42  b2d1              UXTB     r1,r2                 ;1238
000d44  4ae2              LDR      r2,|L1.4304|
000d46  1910              ADDS     r0,r2,r4              ;1238
000d48  e001              B        |L1.3406|
                  |L1.3402|
000d4a  e05c              B        |L1.3590|
                  |L1.3404|
000d4c  e00f              B        |L1.3438|
                  |L1.3406|
000d4e  f7fffffe          BL       CplBit
000d52  2001              MOVS     r0,#1                 ;1239
000d54  9004              STR      r0,[sp,#0x10]         ;1239
000d56  9001              STR      r0,[sp,#4]            ;1240
000d58  e008              B        |L1.3436|
                  |L1.3418|
000d5a  f8bd0030          LDRH     r0,[sp,#0x30]         ;1233
000d5e  1c40              ADDS     r0,r0,#1              ;1233
000d60  b280              UXTH     r0,r0                 ;1233
000d62  900c              STR      r0,[sp,#0x30]         ;1233
                  |L1.3428|
000d64  f8bd0030          LDRH     r0,[sp,#0x30]         ;1233
000d68  42b0              CMP      r0,r6                 ;1233
000d6a  dbdb              BLT      |L1.3364|
                  |L1.3436|
000d6c  bf00              NOP                            ;1241
                  |L1.3438|
000d6e  1c60              ADDS     r0,r4,#1              ;1213
000d70  b284              UXTH     r4,r0                 ;1213
                  |L1.3442|
000d72  48d7              LDR      r0,|L1.4304|
000d74  f890006e          LDRB     r0,[r0,#0x6e]         ;1213  ; TempTrackData
000d78  42a0              CMP      r0,r4                 ;1213
000d7a  dcb9              BGT      |L1.3312|
000d7c  f1bb0f01          CMP      r11,#1                ;1246
000d80  d119              BNE      |L1.3510|
000d82  9804              LDR      r0,[sp,#0x10]         ;1246
000d84  b9b8              CBNZ     r0,|L1.3510|
000d86  2d07              CMP      r5,#7                 ;1248
000d88  d101              BNE      |L1.3470|
000d8a  2606              MOVS     r6,#6                 ;1250
000d8c  e006              B        |L1.3484|
                  |L1.3470|
000d8e  2d05              CMP      r5,#5                 ;1252
000d90  d101              BNE      |L1.3478|
000d92  2604              MOVS     r6,#4                 ;1254
000d94  e002              B        |L1.3484|
                  |L1.3478|
000d96  2d08              CMP      r5,#8                 ;1256
000d98  d100              BNE      |L1.3484|
000d9a  2607              MOVS     r6,#7                 ;1258
                  |L1.3484|
000d9c  9800              LDR      r0,[sp,#0]            ;1260
000d9e  1c40              ADDS     r0,r0,#1              ;1260
000da0  b2c0              UXTB     r0,r0                 ;1260
000da2  9000              STR      r0,[sp,#0]            ;1260
000da4  4aca              LDR      r2,|L1.4304|
000da6  990b              LDR      r1,[sp,#0x2c]         ;1261
000da8  1850              ADDS     r0,r2,r1              ;1261
000daa  4631              MOV      r1,r6                 ;1261
000dac  f7fffffe          BL       CplBit
000db0  2001              MOVS     r0,#1                 ;1262
000db2  9004              STR      r0,[sp,#0x10]         ;1262
000db4  9001              STR      r0,[sp,#4]            ;1263
                  |L1.3510|
000db6  2d07              CMP      r5,#7                 ;1265
000db8  d101              BNE      |L1.3518|
000dba  2606              MOVS     r6,#6                 ;1267
000dbc  e006              B        |L1.3532|
                  |L1.3518|
000dbe  2d05              CMP      r5,#5                 ;1269
000dc0  d101              BNE      |L1.3526|
000dc2  2604              MOVS     r6,#4                 ;1271
000dc4  e002              B        |L1.3532|
                  |L1.3526|
000dc6  2d08              CMP      r5,#8                 ;1273
000dc8  d100              BNE      |L1.3532|
000dca  2607              MOVS     r6,#7                 ;1275
                  |L1.3532|
000dcc  2000              MOVS     r0,#0                 ;1278
000dce  900c              STR      r0,[sp,#0x30]         ;1278
000dd0  e010              B        |L1.3572|
                  |L1.3538|
000dd2  f8bd0030          LDRH     r0,[sp,#0x30]         ;1280
000dd6  b2c2              UXTB     r2,r0                 ;1280
000dd8  48bd              LDR      r0,|L1.4304|
000dda  f890106e          LDRB     r1,[r0,#0x6e]         ;1280  ; TempTrackData
000dde  f7fffffe          BL       CheckLrcEvenParity
000de2  b910              CBNZ     r0,|L1.3562|
000de4  2000              MOVS     r0,#0                 ;1282
000de6  9003              STR      r0,[sp,#0xc]          ;1282
000de8  e008              B        |L1.3580|
                  |L1.3562|
000dea  f8bd0030          LDRH     r0,[sp,#0x30]         ;1278
000dee  1c40              ADDS     r0,r0,#1              ;1278
000df0  b280              UXTH     r0,r0                 ;1278
000df2  900c              STR      r0,[sp,#0x30]         ;1278
                  |L1.3572|
000df4  f8bd0030          LDRH     r0,[sp,#0x30]         ;1278
000df8  42b0              CMP      r0,r6                 ;1278
000dfa  dbea              BLT      |L1.3538|
                  |L1.3580|
000dfc  bf00              NOP                            ;1283
000dfe  9804              LDR      r0,[sp,#0x10]         ;1286
000e00  2800              CMP      r0,#0                 ;1286
000e02  f47faf66          BNE      |L1.3282|
                  |L1.3590|
000e06  9803              LDR      r0,[sp,#0xc]          ;1289
000e08  2800              CMP      r0,#0                 ;1289
000e0a  d06a              BEQ      |L1.3810|
000e0c  2d05              CMP      r5,#5                 ;1289
000e0e  d102              BNE      |L1.3606|
000e10  2103              MOVS     r1,#3                 ;1289
000e12  e001              B        |L1.3608|
                  |L1.3604|
000e14  e0f6              B        |L1.4100|
                  |L1.3606|
000e16  2101              MOVS     r1,#1                 ;1289
                  |L1.3608|
000e18  9800              LDR      r0,[sp,#0]            ;1289
000e1a  4281              CMP      r1,r0                 ;1289
000e1c  db61              BLT      |L1.3810|
000e1e  48ac              LDR      r0,|L1.4304|
000e20  f890006e          LDRB     r0,[r0,#0x6e]         ;1291  ; TempTrackData
000e24  2803              CMP      r0,#3                 ;1291
000e26  db5c              BLT      |L1.3810|
000e28  2000              MOVS     r0,#0                 ;1293
000e2a  9006              STR      r0,[sp,#0x18]         ;1293
000e2c  2401              MOVS     r4,#1                 ;1294
000e2e  e020              B        |L1.3698|
                  |L1.3632|
000e30  2d05              CMP      r5,#5                 ;1296
000e32  d106              BNE      |L1.3650|
000e34  48a6              LDR      r0,|L1.4304|
000e36  5d00              LDRB     r0,[r0,r4]            ;1297
000e38  f000000f          AND      r0,r0,#0xf            ;1297
000e3c  49a4              LDR      r1,|L1.4304|
000e3e  5508              STRB     r0,[r1,r4]            ;1297
000e40  e000              B        |L1.3652|
                  |L1.3650|
000e42  e01c              B        |L1.3710|
                  |L1.3652|
000e44  9801              LDR      r0,[sp,#4]            ;1300
000e46  2801              CMP      r0,#1                 ;1300
000e48  d111              BNE      |L1.3694|
000e4a  48a1              LDR      r0,|L1.4304|
000e4c  5d00              LDRB     r0,[r0,r4]            ;1302
000e4e  2809              CMP      r0,#9                 ;1302
000e50  dd0d              BLE      |L1.3694|
000e52  489f              LDR      r0,|L1.4304|
000e54  5d00              LDRB     r0,[r0,r4]            ;1302
000e56  280e              CMP      r0,#0xe               ;1302
000e58  d009              BEQ      |L1.3694|
000e5a  489d              LDR      r0,|L1.4304|
000e5c  5d00              LDRB     r0,[r0,r4]            ;1302
000e5e  280d              CMP      r0,#0xd               ;1302
000e60  d005              BEQ      |L1.3694|
000e62  489b              LDR      r0,|L1.4304|
000e64  5d00              LDRB     r0,[r0,r4]            ;1302
000e66  280c              CMP      r0,#0xc               ;1302
000e68  d001              BEQ      |L1.3694|
000e6a  2001              MOVS     r0,#1                 ;1304
000e6c  9006              STR      r0,[sp,#0x18]         ;1304
                  |L1.3694|
000e6e  1c60              ADDS     r0,r4,#1              ;1294
000e70  b284              UXTH     r4,r0                 ;1294
                  |L1.3698|
000e72  4897              LDR      r0,|L1.4304|
000e74  f890006e          LDRB     r0,[r0,#0x6e]         ;1294  ; TempTrackData
000e78  1e80              SUBS     r0,r0,#2              ;1294
000e7a  42a0              CMP      r0,r4                 ;1294
000e7c  dcd8              BGT      |L1.3632|
                  |L1.3710|
000e7e  bf00              NOP                            ;1299
000e80  9806              LDR      r0,[sp,#0x18]         ;1308
000e82  bb70              CBNZ     r0,|L1.3810|
000e84  f1b90f00          CMP      r9,#0                 ;1310
000e88  d12c              BNE      |L1.3812|
000e8a  2400              MOVS     r4,#0                 ;1312
000e8c  e01d              B        |L1.3786|
                  |L1.3726|
000e8e  2d07              CMP      r5,#7                 ;1314
000e90  d107              BNE      |L1.3746|
000e92  488f              LDR      r0,|L1.4304|
000e94  5d00              LDRB     r0,[r0,r4]            ;1316
000e96  f000003f          AND      r0,r0,#0x3f           ;1316
000e9a  3020              ADDS     r0,r0,#0x20           ;1316
000e9c  1c61              ADDS     r1,r4,#1              ;1316
000e9e  5478              STRB     r0,[r7,r1]            ;1316
000ea0  e011              B        |L1.3782|
                  |L1.3746|
000ea2  2d05              CMP      r5,#5                 ;1318
000ea4  d107              BNE      |L1.3766|
000ea6  488a              LDR      r0,|L1.4304|
000ea8  5d00              LDRB     r0,[r0,r4]            ;1320
000eaa  f000000f          AND      r0,r0,#0xf            ;1320
000eae  3030              ADDS     r0,r0,#0x30           ;1320
000eb0  1c61              ADDS     r1,r4,#1              ;1320
000eb2  5478              STRB     r0,[r7,r1]            ;1320
000eb4  e007              B        |L1.3782|
                  |L1.3766|
000eb6  2d08              CMP      r5,#8                 ;1322
000eb8  d105              BNE      |L1.3782|
000eba  4885              LDR      r0,|L1.4304|
000ebc  5d00              LDRB     r0,[r0,r4]            ;1324
000ebe  f000017f          AND      r1,r0,#0x7f           ;1324
000ec2  1c60              ADDS     r0,r4,#1              ;1324
000ec4  5439              STRB     r1,[r7,r0]            ;1324
                  |L1.3782|
000ec6  1c60              ADDS     r0,r4,#1              ;1312
000ec8  b284              UXTH     r4,r0                 ;1312
                  |L1.3786|
000eca  4881              LDR      r0,|L1.4304|
000ecc  f890006e          LDRB     r0,[r0,#0x6e]         ;1312  ; TempTrackData
000ed0  42a0              CMP      r0,r4                 ;1312
000ed2  dcdc              BGT      |L1.3726|
000ed4  487e              LDR      r0,|L1.4304|
000ed6  f890006e          LDRB     r0,[r0,#0x6e]         ;1327  ; TempTrackData
000eda  1c40              ADDS     r0,r0,#1              ;1327
000edc  f887006e          STRB     r0,[r7,#0x6e]         ;1327
000ee0  e032              B        |L1.3912|
                  |L1.3810|
000ee2  e08b              B        |L1.4092|
                  |L1.3812|
000ee4  487a              LDR      r0,|L1.4304|
000ee6  f890006e          LDRB     r0,[r0,#0x6e]         ;1331  ; TempTrackData
000eea  f897106e          LDRB     r1,[r7,#0x6e]         ;1331
000eee  4288              CMP      r0,r1                 ;1331
000ef0  dd2a              BLE      |L1.3912|
000ef2  2400              MOVS     r4,#0                 ;1333
000ef4  e01d              B        |L1.3890|
                  |L1.3830|
000ef6  2d07              CMP      r5,#7                 ;1335
000ef8  d107              BNE      |L1.3850|
000efa  4875              LDR      r0,|L1.4304|
000efc  5d00              LDRB     r0,[r0,r4]            ;1337
000efe  f000003f          AND      r0,r0,#0x3f           ;1337
000f02  3020              ADDS     r0,r0,#0x20           ;1337
000f04  1c61              ADDS     r1,r4,#1              ;1337
000f06  5478              STRB     r0,[r7,r1]            ;1337
000f08  e011              B        |L1.3886|
                  |L1.3850|
000f0a  2d05              CMP      r5,#5                 ;1339
000f0c  d107              BNE      |L1.3870|
000f0e  4870              LDR      r0,|L1.4304|
000f10  5d00              LDRB     r0,[r0,r4]            ;1341
000f12  f000000f          AND      r0,r0,#0xf            ;1341
000f16  3030              ADDS     r0,r0,#0x30           ;1341
000f18  1c61              ADDS     r1,r4,#1              ;1341
000f1a  5478              STRB     r0,[r7,r1]            ;1341
000f1c  e007              B        |L1.3886|
                  |L1.3870|
000f1e  2d08              CMP      r5,#8                 ;1343
000f20  d105              BNE      |L1.3886|
000f22  486b              LDR      r0,|L1.4304|
000f24  5d00              LDRB     r0,[r0,r4]            ;1345
000f26  f000017f          AND      r1,r0,#0x7f           ;1345
000f2a  1c60              ADDS     r0,r4,#1              ;1345
000f2c  5439              STRB     r1,[r7,r0]            ;1345
                  |L1.3886|
000f2e  1c60              ADDS     r0,r4,#1              ;1333
000f30  b284              UXTH     r4,r0                 ;1333
                  |L1.3890|
000f32  4867              LDR      r0,|L1.4304|
000f34  f890006e          LDRB     r0,[r0,#0x6e]         ;1333  ; TempTrackData
000f38  42a0              CMP      r0,r4                 ;1333
000f3a  dcdc              BGT      |L1.3830|
000f3c  4864              LDR      r0,|L1.4304|
000f3e  f890006e          LDRB     r0,[r0,#0x6e]         ;1348  ; TempTrackData
000f42  1c40              ADDS     r0,r0,#1              ;1348
000f44  f887006e          STRB     r0,[r7,#0x6e]         ;1348
                  |L1.3912|
000f48  2001              MOVS     r0,#1                 ;1351
000f4a  9002              STR      r0,[sp,#8]            ;1351
000f4c  e056              B        |L1.4092|
                  |L1.3918|
000f4e  9806              LDR      r0,[sp,#0x18]         ;1355
000f50  2801              CMP      r0,#1                 ;1355
000f52  d153              BNE      |L1.4092|
000f54  2d06              CMP      r5,#6                 ;1355
000f56  d151              BNE      |L1.4092|
000f58  2606              MOVS     r6,#6                 ;1356
000f5a  2000              MOVS     r0,#0                 ;1357
000f5c  9003              STR      r0,[sp,#0xc]          ;1357
000f5e  900c              STR      r0,[sp,#0x30]         ;1358
000f60  e010              B        |L1.3972|
                  |L1.3938|
000f62  f8bd0030          LDRH     r0,[sp,#0x30]         ;1360
000f66  b2c2              UXTB     r2,r0                 ;1360
000f68  4859              LDR      r0,|L1.4304|
000f6a  f890106e          LDRB     r1,[r0,#0x6e]         ;1360  ; TempTrackData
000f6e  f7fffffe          BL       CheckLrcEvenParity
000f72  b910              CBNZ     r0,|L1.3962|
000f74  2001              MOVS     r0,#1                 ;1362
000f76  9003              STR      r0,[sp,#0xc]          ;1362
000f78  e008              B        |L1.3980|
                  |L1.3962|
000f7a  f8bd0030          LDRH     r0,[sp,#0x30]         ;1358
000f7e  1c40              ADDS     r0,r0,#1              ;1358
000f80  b280              UXTH     r0,r0                 ;1358
000f82  900c              STR      r0,[sp,#0x30]         ;1358
                  |L1.3972|
000f84  f8bd0030          LDRH     r0,[sp,#0x30]         ;1358
000f88  42b0              CMP      r0,r6                 ;1358
000f8a  dbea              BLT      |L1.3938|
                  |L1.3980|
000f8c  bf00              NOP                            ;1363
000f8e  9803              LDR      r0,[sp,#0xc]          ;1367
000f90  bba0              CBNZ     r0,|L1.4092|
000f92  f1b90f00          CMP      r9,#0                 ;1368
000f96  d114              BNE      |L1.4034|
000f98  2400              MOVS     r4,#0                 ;1370
000f9a  e006              B        |L1.4010|
                  |L1.3996|
000f9c  484c              LDR      r0,|L1.4304|
000f9e  5d00              LDRB     r0,[r0,r4]            ;1372
000fa0  3020              ADDS     r0,r0,#0x20           ;1372
000fa2  b2c1              UXTB     r1,r0                 ;1372
000fa4  1c60              ADDS     r0,r4,#1              ;1372
000fa6  5439              STRB     r1,[r7,r0]            ;1372
000fa8  b284              UXTH     r4,r0                 ;1370
                  |L1.4010|
000faa  4849              LDR      r0,|L1.4304|
000fac  f890006e          LDRB     r0,[r0,#0x6e]         ;1370  ; TempTrackData
000fb0  42a0              CMP      r0,r4                 ;1370
000fb2  dcf3              BGT      |L1.3996|
000fb4  4846              LDR      r0,|L1.4304|
000fb6  f890006e          LDRB     r0,[r0,#0x6e]         ;1374  ; TempTrackData
000fba  1c40              ADDS     r0,r0,#1              ;1374
000fbc  f887006e          STRB     r0,[r7,#0x6e]         ;1374
000fc0  e01a              B        |L1.4088|
                  |L1.4034|
000fc2  4843              LDR      r0,|L1.4304|
000fc4  f890006e          LDRB     r0,[r0,#0x6e]         ;1378  ; TempTrackData
000fc8  f897106e          LDRB     r1,[r7,#0x6e]         ;1378
000fcc  4288              CMP      r0,r1                 ;1378
000fce  dd13              BLE      |L1.4088|
000fd0  2400              MOVS     r4,#0                 ;1380
000fd2  e006              B        |L1.4066|
                  |L1.4052|
000fd4  483e              LDR      r0,|L1.4304|
000fd6  5d00              LDRB     r0,[r0,r4]            ;1382
000fd8  3020              ADDS     r0,r0,#0x20           ;1382
000fda  b2c1              UXTB     r1,r0                 ;1382
000fdc  1c60              ADDS     r0,r4,#1              ;1382
000fde  5439              STRB     r1,[r7,r0]            ;1382
000fe0  b284              UXTH     r4,r0                 ;1380
                  |L1.4066|
000fe2  483b              LDR      r0,|L1.4304|
000fe4  f890006e          LDRB     r0,[r0,#0x6e]         ;1380  ; TempTrackData
000fe8  42a0              CMP      r0,r4                 ;1380
000fea  dcf3              BGT      |L1.4052|
000fec  4838              LDR      r0,|L1.4304|
000fee  f890006e          LDRB     r0,[r0,#0x6e]         ;1384  ; TempTrackData
000ff2  1c40              ADDS     r0,r0,#1              ;1384
000ff4  f887006e          STRB     r0,[r7,#0x6e]         ;1384
                  |L1.4088|
000ff8  2001              MOVS     r0,#1                 ;1387
000ffa  9002              STR      r0,[sp,#8]            ;1387
                  |L1.4092|
000ffc  f1090001          ADD      r0,r9,#1              ;656
001000  f00009ff          AND      r9,r0,#0xff           ;656
                  |L1.4100|
001004  f1b90f02          CMP      r9,#2                 ;656
001008  f6ffab0e          BLT      |L1.1576|
00100c  9802              LDR      r0,[sp,#8]            ;1392
00100e  2801              CMP      r0,#1                 ;1392
001010  d108              BNE      |L1.4132|
001012  f897006e          LDRB     r0,[r7,#0x6e]         ;1394
001016  2804              CMP      r0,#4                 ;1394
001018  da02              BGE      |L1.4128|
00101a  2002              MOVS     r0,#2                 ;1396
                  |L1.4124|
00101c  f7ffbaef          B        |L1.1534|
                  |L1.4128|
001020  2000              MOVS     r0,#0                 ;1400
001022  e7fb              B        |L1.4124|
                  |L1.4132|
001024  9808              LDR      r0,[sp,#0x20]         ;1405
001026  2808              CMP      r0,#8                 ;1405
001028  db02              BLT      |L1.4144|
00102a  980a              LDR      r0,[sp,#0x28]         ;1405
00102c  2864              CMP      r0,#0x64              ;1405
00102e  da05              BGE      |L1.4156|
                  |L1.4144|
001030  9807              LDR      r0,[sp,#0x1c]         ;1405
001032  2808              CMP      r0,#8                 ;1405
001034  db04              BLT      |L1.4160|
001036  9809              LDR      r0,[sp,#0x24]         ;1405
001038  2864              CMP      r0,#0x64              ;1405
00103a  db01              BLT      |L1.4160|
                  |L1.4156|
00103c  2001              MOVS     r0,#1                 ;1407
00103e  e7ed              B        |L1.4124|
                  |L1.4160|
001040  2002              MOVS     r0,#2                 ;1411
001042  e7eb              B        |L1.4124|
;;;1415   
                          ENDP

                  InitMagDecode PROC
;;;1423   ********************************************************************/
;;;1424   void InitMagDecode(void)
001044  b510              PUSH     {r4,lr}
;;;1425   {
;;;1426   	memset((uint8_t*)&Track1TimeFlow, 0, sizeof(Track1TimeFlow));
001046  f640019a          MOV      r1,#0x89a
00104a  4822              LDR      r0,|L1.4308|
00104c  f7fffffe          BL       __aeabi_memclr
;;;1427   	memset((uint8_t*)&Track2TimeFlow, 0, sizeof(Track2TimeFlow));
001050  f24031ea          MOV      r1,#0x3ea
001054  4820              LDR      r0,|L1.4312|
001056  f7fffffe          BL       __aeabi_memclr
;;;1428   	memset((uint8_t*)&Track3TimeFlow, 0, sizeof(Track3TimeFlow));
00105a  f6400172          MOV      r1,#0x872
00105e  481f              LDR      r0,|L1.4316|
001060  f7fffffe          BL       __aeabi_memclr
;;;1429   	
;;;1430   	memset((uint8_t*)&TrackBitFlow, 0, sizeof(TrackBitFlow));
001064  f2403122          MOV      r1,#0x322
001068  481d              LDR      r0,|L1.4320|
00106a  f7fffffe          BL       __aeabi_memclr
;;;1431   
;;;1432   	memset((uint8_t*)&Track1Data, 0, sizeof(Track1Data));
00106e  216f              MOVS     r1,#0x6f
001070  481c              LDR      r0,|L1.4324|
001072  f7fffffe          BL       __aeabi_memclr
;;;1433   	memset((uint8_t*)&Track2Data, 0, sizeof(Track2Data));
001076  216f              MOVS     r1,#0x6f
001078  481b              LDR      r0,|L1.4328|
00107a  f7fffffe          BL       __aeabi_memclr
;;;1434   	memset((uint8_t*)&Track3Data, 0, sizeof(Track3Data));
00107e  216f              MOVS     r1,#0x6f
001080  481a              LDR      r0,|L1.4332|
001082  f7fffffe          BL       __aeabi_memclr
;;;1435   }
001086  bd10              POP      {r4,pc}
;;;1436   
                          ENDP

                  MagDecodeTrack PROC
;;;1444   ********************************************************************/
;;;1445   uint8_t MagDecodeTrack(uint8_t type)
001088  e92d41f0          PUSH     {r4-r8,lr}
;;;1446   {
00108c  4606              MOV      r6,r0
;;;1447   	uint8_t DecodeTimes, bFlag, bBrushError = 0;
00108e  2700              MOVS     r7,#0
;;;1448   	for(DecodeTimes = 0; DecodeTimes < 2; DecodeTimes++)
001090  2500              MOVS     r5,#0
001092  e015              B        |L1.4288|
                  |L1.4244|
;;;1449   	{
;;;1450   		if(DecodeTimes == 1)
001094  2d01              CMP      r5,#1
001096  d102              BNE      |L1.4254|
;;;1451   		{
;;;1452   			ResortMagData(type);						//反解		
001098  4630              MOV      r0,r6
00109a  f7fffffe          BL       ResortMagData
                  |L1.4254|
;;;1453   		}
;;;1454   		if(DecodeTimeToBit(type))
00109e  4630              MOV      r0,r6
0010a0  f7fffffe          BL       DecodeTimeToBit
0010a4  b150              CBZ      r0,|L1.4284|
;;;1455   		{
;;;1456   			bFlag = DecodeTrackData(type);
0010a6  4630              MOV      r0,r6
0010a8  f7fffffe          BL       DecodeTrackData
0010ac  4604              MOV      r4,r0
;;;1457   			if(bFlag == 0)
0010ae  b914              CBNZ     r4,|L1.4278|
;;;1458   			{
;;;1459   				return 0;
0010b0  2000              MOVS     r0,#0
                  |L1.4274|
;;;1460   			}
;;;1461   			else if(bFlag == 1)
;;;1462   			{
;;;1463   				bBrushError = 1;
;;;1464   			}
;;;1465   		}
;;;1466   	}
;;;1467   	if(bBrushError == 1)
;;;1468   	{
;;;1469   		return 1;
;;;1470   	}
;;;1471   	return 2;
;;;1472   }
0010b2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4278|
0010b6  2c01              CMP      r4,#1                 ;1461
0010b8  d100              BNE      |L1.4284|
0010ba  2701              MOVS     r7,#1                 ;1463
                  |L1.4284|
0010bc  1c68              ADDS     r0,r5,#1              ;1448
0010be  b2c5              UXTB     r5,r0                 ;1448
                  |L1.4288|
0010c0  2d02              CMP      r5,#2                 ;1448
0010c2  dbe7              BLT      |L1.4244|
0010c4  2f01              CMP      r7,#1                 ;1467
0010c6  d101              BNE      |L1.4300|
0010c8  2001              MOVS     r0,#1                 ;1469
0010ca  e7f2              B        |L1.4274|
                  |L1.4300|
0010cc  2002              MOVS     r0,#2                 ;1471
0010ce  e7f0              B        |L1.4274|
                  |L1.4304|
                          DCD      TempTrackData
                  |L1.4308|
                          DCD      Track1TimeFlow
                  |L1.4312|
                          DCD      Track2TimeFlow
                  |L1.4316|
                          DCD      Track3TimeFlow
                  |L1.4320|
                          DCD      TrackBitFlow
                  |L1.4324|
                          DCD      Track1Data
                  |L1.4328|
                          DCD      Track2Data
                  |L1.4332|
                          DCD      Track3Data
                          ENDP

                  MSR_Check_Sync_Pattern PROC
;;;1531   *******************************************************************************/
;;;1532   EXTERNMAG void MSR_Check_Sync_Pattern (void)
0010f0  2000              MOVS     r0,#0
;;;1533   {
;;;1534   	MSR_fCardDataReady = 0;
0010f2  49af              LDR      r1,|L1.5040|
0010f4  7008              STRB     r0,[r1,#0]
;;;1535   	return;
;;;1536   }
0010f6  4770              BX       lr
;;;1537   
                          ENDP

                  FlushBuffer_Init PROC
;;;1486   *******************************************************************************/
;;;1487   EXTERNMAG void FlushBuffer_Init (void)
0010f8  b510              PUSH     {r4,lr}
;;;1488   {
;;;1489   	InitMagDecode();
0010fa  f7fffffe          BL       InitMagDecode
;;;1490   	MSR_Check_Sync_Pattern();
0010fe  f7fffffe          BL       MSR_Check_Sync_Pattern
;;;1491   }
001102  bd10              POP      {r4,pc}
;;;1492   
                          ENDP

                  SetF2FInputBuffer PROC
;;;1509   *******************************************************************************/
;;;1510   EXTERNMAG void SetF2FInputBuffer (unsigned char TrNo, unsigned short int TmrCnt, unsigned char level)
001104  b530              PUSH     {r4,r5,lr}
;;;1511   {
;;;1512   	//if (MSR_fCardDataReady == 0) {
;;;1513   		switch (TrNo) {
001106  b120              CBZ      r0,|L1.4370|
001108  2801              CMP      r0,#1
00110a  d00f              BEQ      |L1.4396|
00110c  2802              CMP      r0,#2
00110e  d127              BNE      |L1.4448|
001110  e019              B        |L1.4422|
                  |L1.4370|
;;;1514   			case 0:Track1TimeFlow.Value[Track1TimeFlow.Length++] = TmrCnt; break;
001112  4ba8              LDR      r3,|L1.5044|
001114  f8b34898          LDRH     r4,[r3,#0x898]
001118  f8b33898          LDRH     r3,[r3,#0x898]
00111c  1c5b              ADDS     r3,r3,#1
00111e  b29d              UXTH     r5,r3
001120  4ba4              LDR      r3,|L1.5044|
001122  f8a35898          STRH     r5,[r3,#0x898]
001126  f8231014          STRH     r1,[r3,r4,LSL #1]
00112a  e019              B        |L1.4448|
                  |L1.4396|
;;;1515   			case 1:Track2TimeFlow.Value[Track2TimeFlow.Length++] = TmrCnt; break;
00112c  4ba2              LDR      r3,|L1.5048|
00112e  f8b343e8          LDRH     r4,[r3,#0x3e8]  ; Track2TimeFlow
001132  f8b333e8          LDRH     r3,[r3,#0x3e8]  ; Track2TimeFlow
001136  1c5b              ADDS     r3,r3,#1
001138  4d9f              LDR      r5,|L1.5048|
00113a  f8a533e8          STRH     r3,[r5,#0x3e8]
00113e  462b              MOV      r3,r5
001140  f8231014          STRH     r1,[r3,r4,LSL #1]
001144  e00c              B        |L1.4448|
                  |L1.4422|
;;;1516   			case 2:Track3TimeFlow.Value[Track3TimeFlow.Length++] = TmrCnt; break;
001146  4b9d              LDR      r3,|L1.5052|
001148  f8b34870          LDRH     r4,[r3,#0x870]
00114c  f8b33870          LDRH     r3,[r3,#0x870]
001150  1c5b              ADDS     r3,r3,#1
001152  b29d              UXTH     r5,r3
001154  4b99              LDR      r3,|L1.5052|
001156  f8a35870          STRH     r5,[r3,#0x870]
00115a  f8231014          STRH     r1,[r3,r4,LSL #1]
00115e  bf00              NOP      
                  |L1.4448|
001160  bf00              NOP                            ;1514
;;;1517   		}
;;;1518   	//}
;;;1519   }
001162  bd30              POP      {r4,r5,pc}
;;;1520   
                          ENDP

                  MSR_F2F_Decoder PROC
;;;1548   *******************************************************************************/
;;;1549   EXTERNMAG void MSR_F2F_Decoder (void)
001164  4770              BX       lr
;;;1550   {
;;;1551   	return;
;;;1552   }
;;;1553   
                          ENDP

                  MSR_Character_Decoder PROC
;;;1564   *******************************************************************************/
;;;1565   EXTERNMAG void MSR_Character_Decoder (void)
001166  b510              PUSH     {r4,lr}
;;;1566   {
;;;1567   	if (Track1TimeFlow.Length > 20) {			//至少前后有10个前导0才去解码
001168  4892              LDR      r0,|L1.5044|
00116a  f8b00898          LDRH     r0,[r0,#0x898]
00116e  2814              CMP      r0,#0x14
001170  dd02              BLE      |L1.4472|
;;;1568   		MagDecodeTrack(1);						//第一磁道数据7Bit解码
001172  2001              MOVS     r0,#1
001174  f7fffffe          BL       MagDecodeTrack
                  |L1.4472|
;;;1569   	}
;;;1570   	
;;;1571   	if (Track2TimeFlow.Length > 20) {			//至少前后有10个前导0才去解码
001178  488f              LDR      r0,|L1.5048|
00117a  f8b003e8          LDRH     r0,[r0,#0x3e8]  ; Track2TimeFlow
00117e  2814              CMP      r0,#0x14
001180  dd02              BLE      |L1.4488|
;;;1572   		MagDecodeTrack(2);						//第二磁道数据5Bit解码
001182  2002              MOVS     r0,#2
001184  f7fffffe          BL       MagDecodeTrack
                  |L1.4488|
;;;1573   	}
;;;1574   	
;;;1575   	if (Track3TimeFlow.Length > 20) {			//至少前后有10个前导0才去解码
001188  488c              LDR      r0,|L1.5052|
00118a  f8b00870          LDRH     r0,[r0,#0x870]
00118e  2814              CMP      r0,#0x14
001190  dd02              BLE      |L1.4504|
;;;1576   		MagDecodeTrack(3);						//第三磁道数据5Bit解码
001192  2003              MOVS     r0,#3
001194  f7fffffe          BL       MagDecodeTrack
                  |L1.4504|
;;;1577   	}
;;;1578   	return;
;;;1579   }
001198  bd10              POP      {r4,pc}
;;;1580   
                          ENDP

                  GetMSR_CardDataForUART PROC
;;;1591   *******************************************************************************/
;;;1592   EXTERNMAG unsigned char GetMSR_CardDataForUART (void)
00119a  b510              PUSH     {r4,lr}
;;;1593   {
;;;1594   	int i;
;;;1595   	if (Track1Data.Length > 2) {
00119c  4888              LDR      r0,|L1.5056|
00119e  f890006e          LDRB     r0,[r0,#0x6e]  ; Track1Data
0011a2  2802              CMP      r0,#2
0011a4  dd13              BLE      |L1.4558|
;;;1596   		printf("TK1:");
0011a6  a087              ADR      r0,|L1.5060|
0011a8  f7fffffe          BL       __2printf
;;;1597   		for (i = 2; i < Track1Data.Length - 2; i++) {
0011ac  2402              MOVS     r4,#2
0011ae  e005              B        |L1.4540|
                  |L1.4528|
;;;1598   			printf("%c", Track1Data.Value[i]);
0011b0  4883              LDR      r0,|L1.5056|
0011b2  5d01              LDRB     r1,[r0,r4]
0011b4  a085              ADR      r0,|L1.5068|
0011b6  f7fffffe          BL       __2printf
0011ba  1c64              ADDS     r4,r4,#1              ;1597
                  |L1.4540|
0011bc  4880              LDR      r0,|L1.5056|
0011be  f890006e          LDRB     r0,[r0,#0x6e]         ;1597  ; Track1Data
0011c2  1e80              SUBS     r0,r0,#2              ;1597
0011c4  42a0              CMP      r0,r4                 ;1597
0011c6  dcf3              BGT      |L1.4528|
;;;1599   		}
;;;1600   		printf("\r\n");
0011c8  a081              ADR      r0,|L1.5072|
0011ca  f7fffffe          BL       __2printf
                  |L1.4558|
;;;1601   	}
;;;1602   	
;;;1603   	if (Track2Data.Length > 2) {
0011ce  4881              LDR      r0,|L1.5076|
0011d0  f890006e          LDRB     r0,[r0,#0x6e]  ; Track2Data
0011d4  2802              CMP      r0,#2
0011d6  dd13              BLE      |L1.4608|
;;;1604   		printf("TK2:");
0011d8  a07f              ADR      r0,|L1.5080|
0011da  f7fffffe          BL       __2printf
;;;1605   		for (i = 2; i < Track2Data.Length - 2; i++) {
0011de  2402              MOVS     r4,#2
0011e0  e005              B        |L1.4590|
                  |L1.4578|
;;;1606   			printf("%c", Track2Data.Value[i]);
0011e2  487c              LDR      r0,|L1.5076|
0011e4  5d01              LDRB     r1,[r0,r4]
0011e6  a079              ADR      r0,|L1.5068|
0011e8  f7fffffe          BL       __2printf
0011ec  1c64              ADDS     r4,r4,#1              ;1605
                  |L1.4590|
0011ee  4879              LDR      r0,|L1.5076|
0011f0  f890006e          LDRB     r0,[r0,#0x6e]         ;1605  ; Track2Data
0011f4  1e80              SUBS     r0,r0,#2              ;1605
0011f6  42a0              CMP      r0,r4                 ;1605
0011f8  dcf3              BGT      |L1.4578|
;;;1607   		}
;;;1608   		printf("\r\n");
0011fa  a075              ADR      r0,|L1.5072|
0011fc  f7fffffe          BL       __2printf
                  |L1.4608|
;;;1609   	}
;;;1610   	
;;;1611   	if (Track3Data.Length > 2) {
001200  4877              LDR      r0,|L1.5088|
001202  f890006e          LDRB     r0,[r0,#0x6e]  ; Track3Data
001206  2802              CMP      r0,#2
001208  dd13              BLE      |L1.4658|
;;;1612   		printf("TK3:");
00120a  a076              ADR      r0,|L1.5092|
00120c  f7fffffe          BL       __2printf
;;;1613   		for (i = 2; i < Track3Data.Length - 2; i++) {
001210  2402              MOVS     r4,#2
001212  e005              B        |L1.4640|
                  |L1.4628|
;;;1614   			printf("%c", Track3Data.Value[i]);
001214  4872              LDR      r0,|L1.5088|
001216  5d01              LDRB     r1,[r0,r4]
001218  a06c              ADR      r0,|L1.5068|
00121a  f7fffffe          BL       __2printf
00121e  1c64              ADDS     r4,r4,#1              ;1613
                  |L1.4640|
001220  486f              LDR      r0,|L1.5088|
001222  f890006e          LDRB     r0,[r0,#0x6e]         ;1613  ; Track3Data
001226  1e80              SUBS     r0,r0,#2              ;1613
001228  42a0              CMP      r0,r4                 ;1613
00122a  dcf3              BGT      |L1.4628|
;;;1615   		}
;;;1616   		printf("\r\n");
00122c  a068              ADR      r0,|L1.5072|
00122e  f7fffffe          BL       __2printf
                  |L1.4658|
;;;1617   	}
;;;1618   	
;;;1619   	return NULL;
001232  2000              MOVS     r0,#0
;;;1620   }
001234  bd10              POP      {r4,pc}
;;;1621   
                          ENDP

                  MSR_WaitForReady PROC
;;;1633   *******************************************************************************/
;;;1634   EXTERNMAG void MSR_WaitForReady (void)
001236  2001              MOVS     r0,#1
;;;1635   {
;;;1636   	MSR_fCardDataReady = 1;
001238  495d              LDR      r1,|L1.5040|
00123a  7008              STRB     r0,[r1,#0]
;;;1637   }
00123c  4770              BX       lr
;;;1638   
                          ENDP

                  MSR_GetCharacterDataOn PROC
;;;1654   *******************************************************************************/
;;;1655   EXTERNMAG int MSR_GetCharacterDataOn (unsigned char TrNo, unsigned char *pBuf, unsigned char length)
00123e  e92d41f0          PUSH     {r4-r8,lr}
;;;1656   {
001242  4607              MOV      r7,r0
001244  460e              MOV      r6,r1
001246  4615              MOV      r5,r2
;;;1657   	int ret = 0;
001248  2400              MOVS     r4,#0
;;;1658   	if (pBuf == NULL) {
00124a  b916              CBNZ     r6,|L1.4690|
;;;1659   		return -3;
00124c  1ee0              SUBS     r0,r4,#3
                  |L1.4686|
;;;1660   	}
;;;1661   	memset(pBuf, 0, length);
;;;1662   	switch (TrNo) {
;;;1663   		case 0:
;;;1664   			if (Track1TimeFlow.Length > 20) {					//捕获到了一磁道数据，至少前后有10个前导位才解码
;;;1665   				ret = MagDecodeTrack(0x17);						//第一磁道数据7Bit解码
;;;1666   				if (0 != ret) {									//ISO标准解码失败
;;;1667   				#ifdef JIS_SUPPORT
;;;1668   					if (0 != ret) {
;;;1669   						ret = MagDecodeTrack(0x18);				//第一磁道数据8Bit解码
;;;1670   					}
;;;1671   				#endif
;;;1672   
;;;1673   				#ifdef CADMV_SUPPORT
;;;1674   					if (0 != ret) {
;;;1675   						ret = MagDecodeTrack(0x16);				//第一磁道数据6Bit解码
;;;1676   					}
;;;1677   				#endif
;;;1678   				}
;;;1679   				if (0 == ret) {									//解码成功
;;;1680   					Track1Data.Value[0] = 0x2B;					//一磁道数据开始分隔符
;;;1681   					Track1Data.Length -= 2;						//拷贝数据去掉第一个字节分隔符和最后一个字节的校验
;;;1682   					memcpy(pBuf, &Track1Data.Value[1], (Track1Data.Length - length < 0) ? Track1Data.Length : length);
;;;1683   					Track1Data.Length += 2;						//恢复长度
;;;1684   				}
;;;1685   			} else {
;;;1686   				ret = 2;
;;;1687   			}
;;;1688   			break;
;;;1689   		case 1:
;;;1690   			if (Track2TimeFlow.Length > 20) {					//捕获到了二磁道数据，至少前后有10个前导位才解码
;;;1691   				ret = MagDecodeTrack(0x25);						//第二磁道数据5Bit解码
;;;1692   				if (0 == ret) {									//解码成功
;;;1693   					Track2Data.Value[0] = 0x2C;					//二磁道数据开始分隔符
;;;1694   					Track2Data.Length -= 2;						//拷贝数据去掉第一个字节分隔符和最后一个字节的校验
;;;1695   					memcpy(pBuf, &Track2Data.Value[1], (Track2Data.Length - length < 0) ? Track2Data.Length : length);
;;;1696   					Track2Data.Length += 2;						//恢复长度
;;;1697   				}
;;;1698   			} else {
;;;1699   				ret = 2;
;;;1700   			}
;;;1701   			break;
;;;1702   		case 2:
;;;1703   			if (Track3TimeFlow.Length > 20) {					//捕获到了三磁道数据，至少前后有10个前导位才解码
;;;1704   				ret = MagDecodeTrack(0x35);						//第三磁道数据5Bit解码
;;;1705   				if (0 != ret) {									//ISO标准解码失败
;;;1706   				#ifdef AAMVA_SUPPORT
;;;1707   					if (0 != ret) {
;;;1708   						ret = MagDecodeTrack(0x37);				//第三磁道数据7Bit解码
;;;1709   					}
;;;1710   				#endif
;;;1711   				#ifdef CADMV_SUPPORT
;;;1712   					if (0 != ret) {
;;;1713   						ret = MagDecodeTrack(0x36);				//第三磁道数据6Bit解码
;;;1714   					}
;;;1715   				#endif
;;;1716   				}
;;;1717   				if (0 == ret) {									//解码成功
;;;1718   					Track3Data.Value[0] = 0x2D;					//三磁道数据开始分隔符
;;;1719   					Track3Data.Length -= 2;						//拷贝数据去掉第一个字节分隔符和最后一个字节的校验
;;;1720   					memcpy(pBuf, &Track3Data.Value[1], (Track3Data.Length - length < 0) ? Track3Data.Length : length);
;;;1721   					Track3Data.Length += 2;						//恢复长度
;;;1722   				}
;;;1723   			} else {
;;;1724   				ret = 2;
;;;1725   			}
;;;1726   			break;
;;;1727   		default:
;;;1728   			ret = 3;
;;;1729   			break;
;;;1730   	}
;;;1731   	return (0 - ret);
;;;1732   }
00124e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4690|
001252  4629              MOV      r1,r5                 ;1661
001254  4630              MOV      r0,r6                 ;1661
001256  f7fffffe          BL       __aeabi_memclr
00125a  b127              CBZ      r7,|L1.4710|
00125c  2f01              CMP      r7,#1                 ;1662
00125e  d03a              BEQ      |L1.4822|
001260  2f02              CMP      r7,#2                 ;1662
001262  d17d              BNE      |L1.4960|
001264  e064              B        |L1.4912|
                  |L1.4710|
001266  4853              LDR      r0,|L1.5044|
001268  f8b00898          LDRH     r0,[r0,#0x898]        ;1664
00126c  2814              CMP      r0,#0x14              ;1664
00126e  dd30              BLE      |L1.4818|
001270  2017              MOVS     r0,#0x17              ;1665
001272  f7fffffe          BL       MagDecodeTrack
001276  4604              MOV      r4,r0                 ;1665
001278  b14c              CBZ      r4,|L1.4750|
00127a  b11c              CBZ      r4,|L1.4740|
00127c  2018              MOVS     r0,#0x18              ;1669
00127e  f7fffffe          BL       MagDecodeTrack
001282  4604              MOV      r4,r0                 ;1669
                  |L1.4740|
001284  b11c              CBZ      r4,|L1.4750|
001286  2016              MOVS     r0,#0x16              ;1675
001288  f7fffffe          BL       MagDecodeTrack
00128c  4604              MOV      r4,r0                 ;1675
                  |L1.4750|
00128e  b9fc              CBNZ     r4,|L1.4816|
001290  202b              MOVS     r0,#0x2b              ;1680
001292  494b              LDR      r1,|L1.5056|
001294  7008              STRB     r0,[r1,#0]            ;1680
001296  4608              MOV      r0,r1                 ;1681
001298  f890006e          LDRB     r0,[r0,#0x6e]         ;1681  ; Track1Data
00129c  1e80              SUBS     r0,r0,#2              ;1681
00129e  f881006e          STRB     r0,[r1,#0x6e]         ;1681
0012a2  4608              MOV      r0,r1                 ;1682
0012a4  f890006e          LDRB     r0,[r0,#0x6e]         ;1682  ; Track1Data
0012a8  1b40              SUBS     r0,r0,r5              ;1682
0012aa  d503              BPL      |L1.4788|
0012ac  4608              MOV      r0,r1                 ;1682
0012ae  f890006e          LDRB     r0,[r0,#0x6e]         ;1682  ; Track1Data
0012b2  e000              B        |L1.4790|
                  |L1.4788|
0012b4  4628              MOV      r0,r5                 ;1682
                  |L1.4790|
0012b6  4602              MOV      r2,r0                 ;1682
0012b8  4941              LDR      r1,|L1.5056|
0012ba  1c49              ADDS     r1,r1,#1              ;1682
0012bc  4630              MOV      r0,r6                 ;1682
0012be  f7fffffe          BL       __aeabi_memcpy
0012c2  483f              LDR      r0,|L1.5056|
0012c4  f890006e          LDRB     r0,[r0,#0x6e]         ;1683  ; Track1Data
0012c8  1c80              ADDS     r0,r0,#2              ;1683
0012ca  493d              LDR      r1,|L1.5056|
0012cc  f881006e          STRB     r0,[r1,#0x6e]         ;1683
                  |L1.4816|
0012d0  e000              B        |L1.4820|
                  |L1.4818|
0012d2  2402              MOVS     r4,#2                 ;1686
                  |L1.4820|
0012d4  e068              B        |L1.5032|
                  |L1.4822|
0012d6  4838              LDR      r0,|L1.5048|
0012d8  f8b003e8          LDRH     r0,[r0,#0x3e8]        ;1690  ; Track2TimeFlow
0012dc  2814              CMP      r0,#0x14              ;1690
0012de  dd25              BLE      |L1.4908|
0012e0  2025              MOVS     r0,#0x25              ;1691
0012e2  f7fffffe          BL       MagDecodeTrack
0012e6  4604              MOV      r4,r0                 ;1691
0012e8  b9fc              CBNZ     r4,|L1.4906|
0012ea  202c              MOVS     r0,#0x2c              ;1693
0012ec  4939              LDR      r1,|L1.5076|
0012ee  7008              STRB     r0,[r1,#0]            ;1693
0012f0  4608              MOV      r0,r1                 ;1694
0012f2  f890006e          LDRB     r0,[r0,#0x6e]         ;1694  ; Track2Data
0012f6  1e80              SUBS     r0,r0,#2              ;1694
0012f8  f881006e          STRB     r0,[r1,#0x6e]         ;1694
0012fc  4608              MOV      r0,r1                 ;1695
0012fe  f890006e          LDRB     r0,[r0,#0x6e]         ;1695  ; Track2Data
001302  1b40              SUBS     r0,r0,r5              ;1695
001304  d503              BPL      |L1.4878|
001306  4608              MOV      r0,r1                 ;1695
001308  f890006e          LDRB     r0,[r0,#0x6e]         ;1695  ; Track2Data
00130c  e000              B        |L1.4880|
                  |L1.4878|
00130e  4628              MOV      r0,r5                 ;1695
                  |L1.4880|
001310  4602              MOV      r2,r0                 ;1695
001312  4930              LDR      r1,|L1.5076|
001314  1c49              ADDS     r1,r1,#1              ;1695
001316  4630              MOV      r0,r6                 ;1695
001318  f7fffffe          BL       __aeabi_memcpy
00131c  482d              LDR      r0,|L1.5076|
00131e  f890006e          LDRB     r0,[r0,#0x6e]         ;1696  ; Track2Data
001322  1c80              ADDS     r0,r0,#2              ;1696
001324  492b              LDR      r1,|L1.5076|
001326  f881006e          STRB     r0,[r1,#0x6e]         ;1696
                  |L1.4906|
00132a  e000              B        |L1.4910|
                  |L1.4908|
00132c  2402              MOVS     r4,#2                 ;1699
                  |L1.4910|
00132e  e03b              B        |L1.5032|
                  |L1.4912|
001330  4822              LDR      r0,|L1.5052|
001332  f8b00870          LDRH     r0,[r0,#0x870]        ;1703
001336  2814              CMP      r0,#0x14              ;1703
001338  dd32              BLE      |L1.5024|
00133a  2035              MOVS     r0,#0x35              ;1704
00133c  f7fffffe          BL       MagDecodeTrack
001340  4604              MOV      r4,r0                 ;1704
001342  b14c              CBZ      r4,|L1.4952|
001344  b11c              CBZ      r4,|L1.4942|
001346  2037              MOVS     r0,#0x37              ;1708
001348  f7fffffe          BL       MagDecodeTrack
00134c  4604              MOV      r4,r0                 ;1708
                  |L1.4942|
00134e  b11c              CBZ      r4,|L1.4952|
001350  2036              MOVS     r0,#0x36              ;1713
001352  f7fffffe          BL       MagDecodeTrack
001356  4604              MOV      r4,r0                 ;1713
                  |L1.4952|
001358  bb0c              CBNZ     r4,|L1.5022|
00135a  202d              MOVS     r0,#0x2d              ;1718
00135c  4920              LDR      r1,|L1.5088|
00135e  e000              B        |L1.4962|
                  |L1.4960|
001360  e020              B        |L1.5028|
                  |L1.4962|
001362  7008              STRB     r0,[r1,#0]            ;1718
001364  4608              MOV      r0,r1                 ;1719
001366  f890006e          LDRB     r0,[r0,#0x6e]         ;1719  ; Track3Data
00136a  1e80              SUBS     r0,r0,#2              ;1719
00136c  f881006e          STRB     r0,[r1,#0x6e]         ;1719
001370  4608              MOV      r0,r1                 ;1720
001372  f890006e          LDRB     r0,[r0,#0x6e]         ;1720  ; Track3Data
001376  1b40              SUBS     r0,r0,r5              ;1720
001378  d503              BPL      |L1.4994|
00137a  4608              MOV      r0,r1                 ;1720
00137c  f890006e          LDRB     r0,[r0,#0x6e]         ;1720  ; Track3Data
001380  e000              B        |L1.4996|
                  |L1.4994|
001382  4628              MOV      r0,r5                 ;1720
                  |L1.4996|
001384  4602              MOV      r2,r0                 ;1720
001386  4916              LDR      r1,|L1.5088|
001388  1c49              ADDS     r1,r1,#1              ;1720
00138a  4630              MOV      r0,r6                 ;1720
00138c  f7fffffe          BL       __aeabi_memcpy
001390  4813              LDR      r0,|L1.5088|
001392  f890006e          LDRB     r0,[r0,#0x6e]         ;1721  ; Track3Data
001396  1c80              ADDS     r0,r0,#2              ;1721
001398  4911              LDR      r1,|L1.5088|
00139a  f881006e          STRB     r0,[r1,#0x6e]         ;1721
                  |L1.5022|
00139e  e000              B        |L1.5026|
                  |L1.5024|
0013a0  2402              MOVS     r4,#2                 ;1724
                  |L1.5026|
0013a2  e001              B        |L1.5032|
                  |L1.5028|
0013a4  2403              MOVS     r4,#3                 ;1728
0013a6  bf00              NOP                            ;1729
                  |L1.5032|
0013a8  bf00              NOP                            ;1688
0013aa  4260              RSBS     r0,r4,#0              ;1731
0013ac  e74f              B        |L1.4686|
;;;1733   
                          ENDP

0013ae  0000              DCW      0x0000
                  |L1.5040|
                          DCD      MSR_fCardDataReady
                  |L1.5044|
                          DCD      Track1TimeFlow
                  |L1.5048|
                          DCD      Track2TimeFlow
                  |L1.5052|
                          DCD      Track3TimeFlow
                  |L1.5056|
                          DCD      Track1Data
                  |L1.5060|
0013c4  544b313a          DCB      "TK1:",0
0013c8  00      
0013c9  00                DCB      0
0013ca  00                DCB      0
0013cb  00                DCB      0
                  |L1.5068|
0013cc  256300            DCB      "%c",0
0013cf  00                DCB      0
                  |L1.5072|
0013d0  0d0a00            DCB      "\r\n",0
0013d3  00                DCB      0
                  |L1.5076|
                          DCD      Track2Data
                  |L1.5080|
0013d8  544b323a          DCB      "TK2:",0
0013dc  00      
0013dd  00                DCB      0
0013de  00                DCB      0
0013df  00                DCB      0
                  |L1.5088|
                          DCD      Track3Data
                  |L1.5092|
0013e4  544b333a          DCB      "TK3:",0
0013e8  00      
0013e9  00                DCB      0
0013ea  00                DCB      0
0013eb  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  Track1TimeFlow
                          %        2202
                  Track2TimeFlow
                          %        1002
                  Track3TimeFlow
                          %        2162
                  TrackBitFlow
                          %        802
                  TempTrackDirtData
                          %        111
                  TempTrackData
                          %        111
                  Track1Data
                          %        111
                  Track2Data
                          %        111
                  Track3Data
                          %        111

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  PARITY_TAB
000000  00010102          DCB      0x00,0x01,0x01,0x02
000004  01020203          DCB      0x01,0x02,0x02,0x03
000008  01020203          DCB      0x01,0x02,0x02,0x03
00000c  02030304          DCB      0x02,0x03,0x03,0x04

                          AREA ||.data||, DATA, ALIGN=0

                  MSR_fCardDataReady
000000  00                DCB      0x00
